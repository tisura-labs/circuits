{"noir_version":"1.0.0-beta.6+e796dfd67726cbc28eb9991782533b211025928d","hash":"8746410231787968980","abi":{"parameters":[{"name":"key","type":{"kind":"array","length":8,"type":{"kind":"integer","sign":"unsigned","width":32}},"visibility":"private"},{"name":"ctr","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"},{"name":"nonce","type":{"kind":"array","length":3,"type":{"kind":"integer","sign":"unsigned","width":32}},"visibility":"private"},{"name":"signature_payload","type":{"kind":"struct","path":"SignaturePayload","fields":[{"name":"encrypted_record","type":{"kind":"struct","path":"std::collections::bounded_vec::BoundedVec","fields":[{"name":"storage","type":{"kind":"array","length":1216,"type":{"kind":"integer","sign":"unsigned","width":8}}},{"name":"len","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"encrypted_record_signed","type":{"kind":"array","length":64,"type":{"kind":"integer","sign":"unsigned","width":8}}},{"name":"proxy_pubkey_x","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}}},{"name":"proxy_pubkey_y","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}}}]},"visibility":"public"},{"name":"airdrop_payload","type":{"kind":"struct","path":"AirdropPayload","fields":[{"name":"repo_name","type":{"kind":"struct","path":"std::collections::bounded_vec::BoundedVec","fields":[{"name":"storage","type":{"kind":"array","length":20,"type":{"kind":"integer","sign":"unsigned","width":8}}},{"name":"len","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"repo_owner","type":{"kind":"struct","path":"std::collections::bounded_vec::BoundedVec","fields":[{"name":"storage","type":{"kind":"array","length":20,"type":{"kind":"integer","sign":"unsigned","width":8}}},{"name":"len","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"n_contributions","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"graphql_response","type":{"kind":"struct","path":"airdrop::utils::JsonSlice","fields":[{"name":"json","type":{"kind":"string","length":192}},{"name":"start","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]},"visibility":"public"}],"return_type":null,"error_types":{"542922450338173070":{"error_kind":"string","string":"create_json_entries: MaxNumValues limit exceeded!"},"1285086328212934425":{"error_kind":"string","string":"find_key_in_map, key not found"},"1353342520245986795":{"error_kind":"string","string":"Unexpected number of contributions!"},"2442402699985098867":{"error_kind":"string","string":"ScanData: Invalid token"},"2508785135312043634":{"error_kind":"string","string":"get_number_unchecked: entry exists but is not a number!"},"2905794910586529473":{"error_kind":"string","string":"get_json_entry_unchecked: key not found"},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3966221204951312152":{"error_kind":"string","string":"build_transcript: incomplete token (number, string or literal)"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5639284723758936875":{"error_kind":"string","string":"Cannot find key/value straddling KEY_DELIMITER_TOKEN"},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"6501172132811776676":{"error_kind":"string","string":"Unexpected proxy public key X!"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"8109012468901134134":{"error_kind":"string","string":"Unexpected proxy public key Y!"},"9729867350472088386":{"error_kind":"string","string":"ValidationFlags: grammar error"},"9923511803505800760":{"error_kind":"string","string":"proxy did not sign encrypted_record_hash!"},"10529081074255638466":{"error_kind":"string","string":"get_string_unchecked: entry exists but is not a string!"},"12921714806815923365":{"error_kind":"string","string":"get_string, string size is larger than StringBytes"},"13872591378009313268":{"error_kind":"string","string":"capture_missing_tokens: MaxNumTokens limit exceeded!"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"15021022550228702883":{"error_kind":"string","string":"Encrypted JSON does not match expected value."},"15544221083219072719":{"error_kind":"string","string":"check_shuffle, lhs and rhs arrays do not contain equivalent values"},"16081317107610296567":{"error_kind":"string","string":"first json token does not describe an object, array or key"},"16680141988109035797":{"error_kind":"string","string":"get_object: entry exists but is not an object!"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"16966099434324434240":{"error_kind":"string","string":"Unexpected repo owner!"},"17112506136711115559":{"error_kind":"string","string":"Unexpected repo name!"},"17205526991431008989":{"error_kind":"string","string":"validate_tokens: unclosed objects or arrays"},"17721029505246779248":{"error_kind":"string","string":"cannot extract array elements via a key"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"18170897293561019657":{"error_kind":"string","string":"build_transcript: MaxNumTokens limit exceeded!"}}},"bytecode":"","debug_symbols":"","file_map":{"3":{"source":"use crate::cmp::{Eq, Ord};\nuse crate::convert::From;\nuse crate::runtime::is_unconstrained;\n\nmod check_shuffle;\nmod quicksort;\n\nimpl<T, let N: u32> [T; N] {\n    /// Returns the length of this array.\n    ///\n    /// ```noir\n    /// fn len(self) -> Field\n    /// ```\n    ///\n    /// example\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let array = [42, 42];\n    ///     assert(array.len() == 2);\n    /// }\n    /// ```\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Returns this array as a slice.\n    ///\n    /// ```noir\n    /// let array = [1, 2];\n    /// let slice = array.as_slice();\n    /// assert_eq(slice, &[1, 2]);\n    /// ```\n    #[builtin(as_slice)]\n    pub fn as_slice(self) -> [T] {}\n\n    /// Applies a function to each element of this array, returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.map(|a| a * 2);\n    /// assert_eq(b, [2, 4, 6]);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of this array along with its index,\n    /// returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.mapi(|i, a| i + a * 2);\n    /// assert_eq(b, [2, 5, 8]);\n    /// ```\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(i, self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of this array.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let mut b = [0; 3];\n    /// let mut i = 0;\n    /// a.for_each(|x| {\n    ///     b[i] = x;\n    ///     i += 1;\n    /// });\n    /// assert_eq(a, b);\n    /// ```\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        for i in 0..self.len() {\n            f(self[i]);\n        }\n    }\n\n    /// Applies a function to each element of this array along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let mut b = [0; 3];\n    /// a.for_eachi(|i, x| {\n    ///     b[i] = x;\n    /// });\n    /// assert_eq(a, b);\n    /// ```\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        for i in 0..self.len() {\n            f(i, self[i]);\n        }\n    }\n\n    /// Applies a function to each element of the array, returning the final accumulated value. The first\n    /// parameter is the initial value.\n    ///\n    /// This is a left fold, so the given function will be applied to the accumulator and first element of\n    /// the array, then the second, and so on. For a given call the expected result would be equivalent to:\n    ///\n    /// ```rust\n    /// let a1 = [1];\n    /// let a2 = [1, 2];\n    /// let a3 = [1, 2, 3];\n    ///\n    /// let f = |a, b| a - b;\n    /// a1.fold(10, f); //=> f(10, 1)\n    /// a2.fold(10, f); //=> f(f(10, 1), 2)\n    /// a3.fold(10, f); //=> f(f(f(10, 1), 2), 3)\n    ///\n    /// assert_eq(a3.fold(10, f), 10 - 1 - 2 - 3);\n    /// ```\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    /// Same as fold, but uses the first element as the starting element.\n    ///\n    /// Requires the input array to be non-empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [1, 2, 3, 4];\n    ///     let reduced = arr.reduce(|a, b| a + b);\n    ///     assert(reduced == 10);\n    /// }\n    /// ```\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    /// Returns true if all the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 2];\n    ///     let all = arr.all(|a| a == 2);\n    ///     assert(all);\n    /// }\n    /// ```\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    /// Returns true if any of the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 5];\n    ///     let any = arr.any(|a| a == 5);\n    ///     assert(any);\n    /// }\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n\n    /// Concatenates this array with another array.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr1 = [1, 2, 3, 4];\n    ///     let arr2 = [6, 7, 8, 9, 10, 11];\n    ///     let concatenated_arr = arr1.concat(arr2);\n    ///     assert(concatenated_arr == [1, 2, 3, 4, 6, 7, 8, 9, 10, 11]);\n    /// }\n    /// ```\n    pub fn concat<let M: u32>(self, array2: [T; M]) -> [T; N + M] {\n        let mut result = [crate::mem::zeroed(); N + M];\n        for i in 0..N {\n            result[i] = self[i];\n        }\n        for i in 0..M {\n            result[i + N] = array2[i];\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Ord + Eq,\n{\n    /// Returns a new sorted array. The original array remains untouched. Notice that this function will\n    /// only work for arrays of fields or integers, not for any arbitrary type. This is because the sorting\n    /// logic it uses internally is optimized specifically for these values. If you need a sort function to\n    /// sort any type, you should use the `sort_via` function.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32];\n    ///     let sorted = arr.sort();\n    ///     assert(sorted == [32, 42]);\n    /// }\n    /// ```\n    pub fn sort(self) -> Self {\n        self.sort_via(|a, b| a <= b)\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Eq,\n{\n    /// Returns a new sorted array by sorting it with a custom comparison function.\n    /// The original array remains untouched.\n    /// The ordering function must return true if the first argument should be sorted to be before the second argument or is equal to the second argument.\n    ///\n    /// Using this method with an operator like `<` that does not return `true` for equal values will result in an assertion failure for arrays with equal elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32]\n    ///     let sorted_ascending = arr.sort_via(|a, b| a <= b);\n    ///     assert(sorted_ascending == [32, 42]); // verifies\n    ///\n    ///     let sorted_descending = arr.sort_via(|a, b| a >= b);\n    ///     assert(sorted_descending == [32, 42]); // does not verify\n    /// }\n    /// ```\n    pub fn sort_via<Env>(self, ordering: fn[Env](T, T) -> bool) -> Self {\n        // Safety: `sorted` array is checked to be:\n        // a. a permutation of `input`'s elements\n        // b. satisfying the predicate `ordering`\n        let sorted = unsafe { quicksort::quicksort(self, ordering) };\n\n        if !is_unconstrained() {\n            for i in 0..N - 1 {\n                assert(\n                    ordering(sorted[i], sorted[i + 1]),\n                    \"Array has not been sorted correctly according to `ordering`.\",\n                );\n            }\n            check_shuffle::check_shuffle(self, sorted);\n        }\n        sorted\n    }\n}\n\nimpl<let N: u32> [u8; N] {\n    /// Converts a byte array of type `[u8; N]` to a string. Note that this performs no UTF-8 validation -\n    /// the given array is interpreted as-is as a string.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let hi = [104, 105].as_str_unchecked();\n    ///     assert_eq(hi, \"hi\");\n    /// }\n    /// ```\n    #[builtin(array_as_str_unchecked)]\n    pub fn as_str_unchecked(self) -> str<N> {}\n}\n\nimpl<let N: u32> From<str<N>> for [u8; N] {\n    /// Returns an array of the string bytes.\n    fn from(s: str<N>) -> Self {\n        s.as_bytes()\n    }\n}\n\nmod test {\n    #[test]\n    fn map_empty() {\n        assert_eq([].map(|x| x + 1), []);\n    }\n\n    global arr_with_100_values: [u32; 100] = [\n        42, 123, 87, 93, 48, 80, 50, 5, 104, 84, 70, 47, 119, 66, 71, 121, 3, 29, 42, 118, 2, 54,\n        89, 44, 81, 0, 26, 106, 68, 96, 84, 48, 95, 54, 45, 32, 89, 100, 109, 19, 37, 41, 19, 98,\n        53, 114, 107, 66, 6, 74, 13, 19, 105, 64, 123, 28, 44, 50, 89, 58, 123, 126, 21, 43, 86, 35,\n        21, 62, 82, 0, 108, 120, 72, 72, 62, 80, 12, 71, 70, 86, 116, 73, 38, 15, 127, 81, 30, 8,\n        125, 28, 26, 69, 114, 63, 27, 28, 61, 42, 13, 32,\n    ];\n    global expected_with_100_values: [u32; 100] = [\n        0, 0, 2, 3, 5, 6, 8, 12, 13, 13, 15, 19, 19, 19, 21, 21, 26, 26, 27, 28, 28, 28, 29, 30, 32,\n        32, 35, 37, 38, 41, 42, 42, 42, 43, 44, 44, 45, 47, 48, 48, 50, 50, 53, 54, 54, 58, 61, 62,\n        62, 63, 64, 66, 66, 68, 69, 70, 70, 71, 71, 72, 72, 73, 74, 80, 80, 81, 81, 82, 84, 84, 86,\n        86, 87, 89, 89, 89, 93, 95, 96, 98, 100, 104, 105, 106, 107, 108, 109, 114, 114, 116, 118,\n        119, 120, 121, 123, 123, 123, 125, 126, 127,\n    ];\n    fn sort_u32(a: u32, b: u32) -> bool {\n        a <= b\n    }\n\n    #[test]\n    fn test_sort() {\n        let mut arr: [u32; 7] = [3, 6, 8, 10, 1, 2, 1];\n\n        let sorted = arr.sort();\n\n        let expected: [u32; 7] = [1, 1, 2, 3, 6, 8, 10];\n        assert(sorted == expected);\n    }\n\n    #[test]\n    fn test_sort_100_values() {\n        let mut arr: [u32; 100] = [\n            42, 123, 87, 93, 48, 80, 50, 5, 104, 84, 70, 47, 119, 66, 71, 121, 3, 29, 42, 118, 2,\n            54, 89, 44, 81, 0, 26, 106, 68, 96, 84, 48, 95, 54, 45, 32, 89, 100, 109, 19, 37, 41,\n            19, 98, 53, 114, 107, 66, 6, 74, 13, 19, 105, 64, 123, 28, 44, 50, 89, 58, 123, 126, 21,\n            43, 86, 35, 21, 62, 82, 0, 108, 120, 72, 72, 62, 80, 12, 71, 70, 86, 116, 73, 38, 15,\n            127, 81, 30, 8, 125, 28, 26, 69, 114, 63, 27, 28, 61, 42, 13, 32,\n        ];\n\n        let sorted = arr.sort();\n\n        let expected: [u32; 100] = [\n            0, 0, 2, 3, 5, 6, 8, 12, 13, 13, 15, 19, 19, 19, 21, 21, 26, 26, 27, 28, 28, 28, 29, 30,\n            32, 32, 35, 37, 38, 41, 42, 42, 42, 43, 44, 44, 45, 47, 48, 48, 50, 50, 53, 54, 54, 58,\n            61, 62, 62, 63, 64, 66, 66, 68, 69, 70, 70, 71, 71, 72, 72, 73, 74, 80, 80, 81, 81, 82,\n            84, 84, 86, 86, 87, 89, 89, 89, 93, 95, 96, 98, 100, 104, 105, 106, 107, 108, 109, 114,\n            114, 116, 118, 119, 120, 121, 123, 123, 123, 125, 126, 127,\n        ];\n        assert(sorted == expected);\n    }\n\n    #[test]\n    fn test_sort_100_values_comptime() {\n        let sorted = arr_with_100_values.sort();\n        assert(sorted == expected_with_100_values);\n    }\n\n    #[test]\n    fn test_sort_via() {\n        let mut arr: [u32; 7] = [3, 6, 8, 10, 1, 2, 1];\n\n        let sorted = arr.sort_via(sort_u32);\n\n        let expected: [u32; 7] = [1, 1, 2, 3, 6, 8, 10];\n        assert(sorted == expected);\n    }\n\n    #[test]\n    fn test_sort_via_100_values() {\n        let mut arr: [u32; 100] = [\n            42, 123, 87, 93, 48, 80, 50, 5, 104, 84, 70, 47, 119, 66, 71, 121, 3, 29, 42, 118, 2,\n            54, 89, 44, 81, 0, 26, 106, 68, 96, 84, 48, 95, 54, 45, 32, 89, 100, 109, 19, 37, 41,\n            19, 98, 53, 114, 107, 66, 6, 74, 13, 19, 105, 64, 123, 28, 44, 50, 89, 58, 123, 126, 21,\n            43, 86, 35, 21, 62, 82, 0, 108, 120, 72, 72, 62, 80, 12, 71, 70, 86, 116, 73, 38, 15,\n            127, 81, 30, 8, 125, 28, 26, 69, 114, 63, 27, 28, 61, 42, 13, 32,\n        ];\n\n        let sorted = arr.sort_via(sort_u32);\n\n        let expected: [u32; 100] = [\n            0, 0, 2, 3, 5, 6, 8, 12, 13, 13, 15, 19, 19, 19, 21, 21, 26, 26, 27, 28, 28, 28, 29, 30,\n            32, 32, 35, 37, 38, 41, 42, 42, 42, 43, 44, 44, 45, 47, 48, 48, 50, 50, 53, 54, 54, 58,\n            61, 62, 62, 63, 64, 66, 66, 68, 69, 70, 70, 71, 71, 72, 72, 73, 74, 80, 80, 81, 81, 82,\n            84, 84, 86, 86, 87, 89, 89, 89, 93, 95, 96, 98, 100, 104, 105, 106, 107, 108, 109, 114,\n            114, 116, 118, 119, 120, 121, 123, 123, 123, 125, 126, 127,\n        ];\n        assert(sorted == expected);\n    }\n\n    #[test]\n    fn mapi_empty() {\n        assert_eq([].mapi(|i, x| i * x + 1), []);\n    }\n\n    #[test]\n    fn for_each_empty() {\n        let empty_array: [Field; 0] = [];\n        empty_array.for_each(|_x| assert(false));\n    }\n\n    #[test]\n    fn for_eachi_empty() {\n        let empty_array: [Field; 0] = [];\n        empty_array.for_eachi(|_i, _x| assert(false));\n    }\n\n    #[test]\n    fn map_example() {\n        let a = [1, 2, 3];\n        let b = a.map(|a| a * 2);\n        assert_eq(b, [2, 4, 6]);\n    }\n\n    #[test]\n    fn mapi_example() {\n        let a = [1, 2, 3];\n        let b = a.mapi(|i, a| i + a * 2);\n        assert_eq(b, [2, 5, 8]);\n    }\n\n    #[test]\n    fn for_each_example() {\n        let a = [1, 2, 3];\n        let mut b = [0, 0, 0];\n        let b_ref = &mut b;\n        let mut i = 0;\n        let i_ref = &mut i;\n        a.for_each(|x| {\n            b_ref[*i_ref] = x * 2;\n            *i_ref += 1;\n        });\n        assert_eq(b, [2, 4, 6]);\n        assert_eq(i, 3);\n    }\n\n    #[test]\n    fn for_eachi_example() {\n        let a = [1, 2, 3];\n        let mut b = [0, 0, 0];\n        let b_ref = &mut b;\n        a.for_eachi(|i, a| { b_ref[i] = i + a * 2; });\n        assert_eq(b, [2, 5, 8]);\n    }\n\n    #[test]\n    fn concat() {\n        let arr1 = [1, 2, 3, 4];\n        let arr2 = [6, 7, 8, 9, 10, 11];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1, 2, 3, 4, 6, 7, 8, 9, 10, 11]);\n    }\n\n    #[test]\n    fn concat_zero_length_with_something() {\n        let arr1 = [];\n        let arr2 = [1];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1]);\n    }\n\n    #[test]\n    fn concat_something_with_zero_length() {\n        let arr1 = [1];\n        let arr2 = [];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1]);\n    }\n\n    #[test]\n    fn concat_zero_lengths() {\n        let arr1: [Field; 0] = [];\n        let arr2: [Field; 0] = [];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, []);\n    }\n}\n","path":"std/array/mod.nr"},"5":{"source":"use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n","path":"std/cmp.nr"},"6":{"source":"use crate::{cmp::Eq, convert::From, runtime::is_unconstrained, static_assert};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n///\n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n///\n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n///\n/// Example:\n///\n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a\n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    ///\n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    ///\n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    ///\n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure.\n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    ///\n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    ///\n    /// Panics if the new length of the vector will be greater than the max length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    ///\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    ///\n    /// v.push(100);\n    /// assert(v.len() == 1);\n    ///\n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    ///\n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    ///\n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    ///\n    /// Note that uninitialized elements may be zeroed out!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    ///\n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    ///\n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    ///\n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        if is_unconstrained() {\n            for i in 0..append_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        } else {\n            let mut exceeded_len = false;\n            for i in 0..Len {\n                exceeded_len |= i == append_len;\n                if !exceeded_len {\n                    self.storage[self.len + i] = vec.get_unchecked(i);\n                }\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input.\n    /// The maximum length of the vector is determined based on the type signature.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        static_assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    ///\n    /// Panics if the vector is empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// let two = v.pop();\n    /// let one = v.pop();\n    ///\n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    ///\n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        if is_unconstrained() {\n            for i in 0..self.len {\n                ret |= predicate(self.storage[i]);\n            }\n        } else {\n            let mut ret = false;\n            let mut exceeded_len = false;\n            for i in 0..MaxLen {\n                exceeded_len |= i == self.len;\n                if !exceeded_len {\n                    ret |= predicate(self.storage[i]);\n                }\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element\n    /// in this vector, along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.mapi(|i, value| i + value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 5, 8, 11]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(i, self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(i, self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Calls a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let mut result = BoundedVec::<u32, 4>::new();\n    /// vec.for_each(|value| result.push(value * 2));\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    f(self.get_unchecked(i));\n                }\n            }\n        }\n    }\n\n    /// Calls a closure on each element in this vector, along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let mut result = BoundedVec::<u32, 4>::new();\n    /// vec.for_eachi(|i, value| result.push(i + value * 2));\n    ///\n    /// let expected = BoundedVec::from_array([2, 5, 8, 11]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                f(i, self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    f(i, self.get_unchecked(i));\n                }\n            }\n        }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function will zero out any elements at or past index `len` of `array`.\n    /// This incurs an extra runtime cost of O(MaxLen). If you are sure your array is\n    /// zeroed after that index, you can use `from_parts_unchecked` to remove the extra loop.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    /// ```\n    pub fn from_parts(mut array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        let zeroed = crate::mem::zeroed();\n\n        if is_unconstrained() {\n            for i in len..MaxLen {\n                array[i] = zeroed;\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i >= len {\n                    array[i] = zeroed;\n                }\n            }\n        }\n\n        BoundedVec { storage: array, len }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function is unsafe because it expects all elements past the `len` index\n    /// of `array` to be zeroed, but does not check for this internally. Use `from_parts`\n    /// for a safe version of this function which does zero out any indices past the\n    /// given length. Invalidating this assumption can notably cause `BoundedVec::eq`\n    /// to give incorrect results since it will check even elements past `len`.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    ///\n    /// // invalid use!\n    /// let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n    /// let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n    ///\n    /// // both vecs have length 3 so we'd expect them to be equal, but this\n    /// // fails because elements past the length are still checked in eq\n    /// assert_eq(vec1, vec2); // fails\n    /// ```\n    pub fn from_parts_unchecked(array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        BoundedVec { storage: array, len }\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n        if self.len == other.len {\n            self.storage == other.storage\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod mapi {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-mapi-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.mapi(|i, value| i + value * 2);\n            // docs:end:bounded-vec-mapi-example\n            let expected = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.mapi(|i, value| (i + value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.mapi(|_, value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod for_each {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        // map in terms of for_each\n        fn for_each_map<T, U, Env, let MaxLen: u32>(\n            input: BoundedVec<T, MaxLen>,\n            f: fn[Env](T) -> U,\n        ) -> BoundedVec<U, MaxLen> {\n            let mut output = BoundedVec::<U, MaxLen>::new();\n            let output_ref = &mut output;\n            input.for_each(|x| output_ref.push(f(x)));\n            output\n        }\n\n        #[test]\n        fn smoke_test() {\n            let mut acc = 0;\n            let acc_ref = &mut acc;\n            // docs:start:bounded-vec-for-each-example\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            vec.for_each(|value| { *acc_ref += value; });\n            // docs:end:bounded-vec-for-each-example\n            assert_eq(acc, 6);\n        }\n\n        #[test]\n        fn applies_function_correctly() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_each_map(vec, |value| value * 2);\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_each_map(vec, |value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = for_each_map(vec, |value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod for_eachi {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        // mapi in terms of for_eachi\n        fn for_eachi_mapi<T, U, Env, let MaxLen: u32>(\n            input: BoundedVec<T, MaxLen>,\n            f: fn[Env](u32, T) -> U,\n        ) -> BoundedVec<U, MaxLen> {\n            let mut output = BoundedVec::<U, MaxLen>::new();\n            let output_ref = &mut output;\n            input.for_eachi(|i, x| output_ref.push(f(i, x)));\n            output\n        }\n\n        #[test]\n        fn smoke_test() {\n            let mut acc = 0;\n            let acc_ref = &mut acc;\n            // docs:start:bounded-vec-for-eachi-example\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            vec.for_eachi(|i, value| { *acc_ref += i * value; });\n            // docs:end:bounded-vec-for-eachi-example\n\n            // 0 * 1 + 1 * 2 + 2 * 3\n            assert_eq(acc, 8);\n        }\n\n        #[test]\n        fn applies_function_correctly() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_eachi_mapi(vec, |i, value| i + value * 2);\n            let expected = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_eachi_mapi(vec, |i, value| (i + value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = for_eachi_mapi(vec, |_, value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n            assert_eq(bounded_vec.get(2), 3);\n        }\n\n        #[test(should_fail_with = \"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n        use crate::convert::From;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n\n    mod from_parts {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn from_parts() {\n            // docs:start:from-parts\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // Any elements past the given length are zeroed out, so these\n            // two BoundedVecs will be completely equal\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 2], 3);\n            assert_eq(vec1, vec2);\n            // docs:end:from-parts\n        }\n\n        #[test]\n        fn from_parts_unchecked() {\n            // docs:start:from-parts-unchecked\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // invalid use!\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n\n            // both vecs have length 3 so we'd expect them to be equal, but this\n            // fails because elements past the length are still checked in eq\n            assert(vec1 != vec2);\n            // docs:end:from-parts-unchecked\n        }\n    }\n}\n","path":"std/collections/bounded_vec.nr"},"12":{"source":"// docs:start:from-trait\npub trait From<T> {\n    fn from(input: T) -> Self;\n}\n// docs:end:from-trait\n\nimpl<T> From<T> for T {\n    fn from(input: T) -> T {\n        input\n    }\n}\n\n// docs:start:into-trait\npub trait Into<T> {\n    fn into(self) -> T;\n}\n\nimpl<T, U> Into<T> for U\nwhere\n    T: From<U>,\n{\n    fn into(self) -> T {\n        T::from(self)\n    }\n}\n// docs:end:into-trait\n\n// docs:start:from-impls\n// Unsigned integers\n\nimpl From<u8> for u32 {\n    fn from(value: u8) -> u32 {\n        value as u32\n    }\n}\n\nimpl From<u8> for u64 {\n    fn from(value: u8) -> u64 {\n        value as u64\n    }\n}\nimpl From<u32> for u64 {\n    fn from(value: u32) -> u64 {\n        value as u64\n    }\n}\n\nimpl From<u8> for u128 {\n    fn from(value: u8) -> u128 {\n        value as u128\n    }\n}\nimpl From<u32> for u128 {\n    fn from(value: u32) -> u128 {\n        value as u128\n    }\n}\nimpl From<u64> for u128 {\n    fn from(value: u64) -> u128 {\n        value as u128\n    }\n}\n\nimpl From<u8> for Field {\n    fn from(value: u8) -> Field {\n        value as Field\n    }\n}\nimpl From<u32> for Field {\n    fn from(value: u32) -> Field {\n        value as Field\n    }\n}\nimpl From<u64> for Field {\n    fn from(value: u64) -> Field {\n        value as Field\n    }\n}\n\nimpl From<u128> for Field {\n    fn from(value: u128) -> Field {\n        value as Field\n    }\n}\n\n// Signed integers\n\nimpl From<i8> for i32 {\n    fn from(value: i8) -> i32 {\n        value as i32\n    }\n}\n\nimpl From<i8> for i64 {\n    fn from(value: i8) -> i64 {\n        value as i64\n    }\n}\nimpl From<i32> for i64 {\n    fn from(value: i32) -> i64 {\n        value as i64\n    }\n}\n\n// Booleans\nimpl From<bool> for u8 {\n    fn from(value: bool) -> u8 {\n        value as u8\n    }\n}\nimpl From<bool> for u32 {\n    fn from(value: bool) -> u32 {\n        value as u32\n    }\n}\nimpl From<bool> for u64 {\n    fn from(value: bool) -> u64 {\n        value as u64\n    }\n}\nimpl From<bool> for i8 {\n    fn from(value: bool) -> i8 {\n        value as i8\n    }\n}\nimpl From<bool> for i32 {\n    fn from(value: bool) -> i32 {\n        value as i32\n    }\n}\nimpl From<bool> for i64 {\n    fn from(value: bool) -> i64 {\n        value as i64\n    }\n}\nimpl From<bool> for Field {\n    fn from(value: bool) -> Field {\n        value as Field\n    }\n}\n// docs:end:from-impls\n\n/// A generic interface for casting between primitive types,\n/// equivalent of using the `as` keyword between values.\n///\n/// # Example\n///\n/// ```\n/// let x: Field = 1234567890;\n/// let y: u8 = x as u8;\n/// let z: u8 = x.as_();\n/// assert_eq(y, z);\n/// ```\npub trait AsPrimitive<T> {\n    /// The equivalent of doing `self as T`.\n    fn as_(self) -> T;\n}\n\n#[generate_as_primitive_impls]\ncomptime fn generate_as_primitive_impls(_: FunctionDefinition) -> Quoted {\n    let types = [\n        quote { bool },\n        quote { u8 },\n        quote { u16 },\n        quote { u32 },\n        quote { u64 },\n        quote { u128 },\n        quote { i8 },\n        quote { i16 },\n        quote { i32 },\n        quote { i64 },\n        quote { Field },\n    ];\n\n    let mut impls = &[];\n    for type1 in types {\n        for type2 in types {\n            impls = impls.push_back(\n                quote {\n                impl AsPrimitive<$type1> for $type2 {\n                    fn as_(self) -> $type1 {\n                        self as $type1\n                    }\n                }\n            },\n            );\n        }\n    }\n    impls.join(quote {})\n}\n","path":"std/convert.nr"},"17":{"source":"use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 128 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low = (x as u128) as Field;\n    let high = (x - low) / TWO_POW_128;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    // Safety: borrow is enforced to be boolean due to its type.\n    // if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    // if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        // Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            // Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        // Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n","path":"std/field/bn254.nr"},"18":{"source":"pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        __assert_max_bit_size(self, BIT_SIZE);\n    }\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = __to_le_bits(self);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = __to_be_bits(self);\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        __to_le_radix(self, radix)\n    }\n\n    fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        __to_be_radix(self, radix)\n    }\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(apply_range_constraint)]\nfn __assert_max_bit_size(value: Field, bit_size: u32) {}\n\n// `_radix` must be less than 256\n#[builtin(to_le_radix)]\nfn __to_le_radix<let N: u32>(value: Field, radix: u32) -> [u8; N] {}\n\n// `_radix` must be less than 256\n#[builtin(to_be_radix)]\nfn __to_be_radix<let N: u32>(value: Field, radix: u32) -> [u8; N] {}\n\n/// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n/// This slice will be zero padded should not all bits be necessary to represent `self`.\n///\n/// # Failures\n/// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n/// be able to represent the original `Field`.\n///\n/// # Safety\n/// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n/// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n/// wrap around due to overflow when verifying the decomposition.\n#[builtin(to_le_bits)]\nfn __to_le_bits<let N: u32>(value: Field) -> [u1; N] {}\n\n/// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n/// This array will be zero padded should not all bits be necessary to represent `self`.\n///\n/// # Failures\n/// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n/// be able to represent the original `Field`.\n///\n/// # Safety\n/// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n/// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n/// wrap around due to overflow when verifying the decomposition.\n#[builtin(to_be_bits)]\nfn __to_be_bits<let N: u32>(value: Field) -> [u1; N] {}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n","path":"std/field/mod.nr"},"19":{"source":"// Exposed only for usage in `std::meta`\npub(crate) mod poseidon2;\n\nuse crate::default::Default;\nuse crate::embedded_curve_ops::{\n    EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_array_return,\n};\nuse crate::meta::derive_via;\n\n#[foreign(sha256_compression)]\n// docs:start:sha256_compression\npub fn sha256_compression(input: [u32; 16], state: [u32; 8]) -> [u32; 8] {}\n// docs:end:sha256_compression\n\n#[foreign(keccakf1600)]\n// docs:start:keccakf1600\npub fn keccakf1600(input: [u64; 25]) -> [u64; 25] {}\n// docs:end:keccakf1600\n\npub mod keccak {\n    #[deprecated(\"This function has been moved to std::hash::keccakf1600\")]\n    pub fn keccakf1600(input: [u64; 25]) -> [u64; 25] {\n        super::keccakf1600(input)\n    }\n}\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[inline_always]\npub fn pedersen_commitment_with_separator<let N: u32>(\n    input: [Field; N],\n    separator: u32,\n) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[no_predicates]\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: [EmbeddedCurveScalar; N + 1] = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N + 1];\n    let mut generators: [EmbeddedCurvePoint; N + 1] =\n        [EmbeddedCurvePoint::point_at_infinity(); N + 1];\n    let domain_generators: [EmbeddedCurvePoint; N] =\n        derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n\n    for i in 0..N {\n        scalars[i] = from_field_unsafe(input[i]);\n        generators[i] = domain_generators[i];\n    }\n    scalars[N] = EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field };\n\n    let length_generator: [EmbeddedCurvePoint; 1] =\n        derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    generators[N] = length_generator[0];\n    multi_scalar_mul_array_return(generators, scalars)[0].x\n}\n\n#[field(bn254)]\n#[inline_always]\npub fn derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n// Same as from_field but:\n// does not assert the limbs are 128 bits\n// does not assert the decomposition does not overflow the EmbeddedCurveScalar\nfn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    // Safety: xlo and xhi decomposition is checked below\n    let (xlo, xhi) = unsafe { crate::field::bn254::decompose_hint(scalar) };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: TypeDefinition) -> Quoted {\n    let name = quote { Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(\n        s,\n        name,\n        signature,\n        for_each_field,\n        quote {},\n        |fields| fields,\n    )\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher<H>\nwhere\n    H: Hasher,\n{\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u128 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H)\n    where\n        H: Hasher,\n    {}\n}\n\nimpl<T, let N: u32> Hash for [T; N]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B)\nwhere\n    A: Hash,\n    B: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n    E: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1),\n        0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1),\n        EmbeddedCurvePoint {\n            x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n            y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n            is_infinite: false,\n        },\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2),\n        0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2),\n        EmbeddedCurvePoint {\n            x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n            y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3),\n        0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3),\n        EmbeddedCurvePoint {\n            x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n            y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4),\n        0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4),\n        EmbeddedCurvePoint {\n            x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n            y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5),\n        0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5),\n        EmbeddedCurvePoint {\n            x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n            y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6),\n        0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6),\n        EmbeddedCurvePoint {\n            x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n            y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        EmbeddedCurvePoint {\n            x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n            y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        EmbeddedCurvePoint {\n            x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n            y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        EmbeddedCurvePoint {\n            x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n            y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        EmbeddedCurvePoint {\n            x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n            y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n            is_infinite: false,\n        },\n    );\n}\n","path":"std/hash/mod.nr"},"20":{"source":"use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub(crate) struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub(crate) fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub(crate) struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n","path":"std/hash/poseidon2.nr"},"39":{"source":"use crate::convert::AsPrimitive;\n\n// docs:start:add-trait\npub trait Add {\n    fn add(self, other: Self) -> Self;\n}\n// docs:end:add-trait\n\nimpl Add for Field {\n    fn add(self, other: Field) -> Field {\n        self + other\n    }\n}\n\nimpl Add for u128 {\n    fn add(self, other: u128) -> u128 {\n        self + other\n    }\n}\nimpl Add for u64 {\n    fn add(self, other: u64) -> u64 {\n        self + other\n    }\n}\nimpl Add for u32 {\n    fn add(self, other: u32) -> u32 {\n        self + other\n    }\n}\nimpl Add for u16 {\n    fn add(self, other: u16) -> u16 {\n        self + other\n    }\n}\nimpl Add for u8 {\n    fn add(self, other: u8) -> u8 {\n        self + other\n    }\n}\nimpl Add for u1 {\n    fn add(self, other: u1) -> u1 {\n        self + other\n    }\n}\n\nimpl Add for i8 {\n    fn add(self, other: i8) -> i8 {\n        self + other\n    }\n}\nimpl Add for i16 {\n    fn add(self, other: i16) -> i16 {\n        self + other\n    }\n}\nimpl Add for i32 {\n    fn add(self, other: i32) -> i32 {\n        self + other\n    }\n}\nimpl Add for i64 {\n    fn add(self, other: i64) -> i64 {\n        self + other\n    }\n}\n\n// docs:start:sub-trait\npub trait Sub {\n    fn sub(self, other: Self) -> Self;\n}\n// docs:end:sub-trait\n\nimpl Sub for Field {\n    fn sub(self, other: Field) -> Field {\n        self - other\n    }\n}\n\nimpl Sub for u128 {\n    fn sub(self, other: u128) -> u128 {\n        self - other\n    }\n}\nimpl Sub for u64 {\n    fn sub(self, other: u64) -> u64 {\n        self - other\n    }\n}\nimpl Sub for u32 {\n    fn sub(self, other: u32) -> u32 {\n        self - other\n    }\n}\nimpl Sub for u16 {\n    fn sub(self, other: u16) -> u16 {\n        self - other\n    }\n}\nimpl Sub for u8 {\n    fn sub(self, other: u8) -> u8 {\n        self - other\n    }\n}\nimpl Sub for u1 {\n    fn sub(self, other: u1) -> u1 {\n        self - other\n    }\n}\n\nimpl Sub for i8 {\n    fn sub(self, other: i8) -> i8 {\n        self - other\n    }\n}\nimpl Sub for i16 {\n    fn sub(self, other: i16) -> i16 {\n        self - other\n    }\n}\nimpl Sub for i32 {\n    fn sub(self, other: i32) -> i32 {\n        self - other\n    }\n}\nimpl Sub for i64 {\n    fn sub(self, other: i64) -> i64 {\n        self - other\n    }\n}\n\n// docs:start:mul-trait\npub trait Mul {\n    fn mul(self, other: Self) -> Self;\n}\n// docs:end:mul-trait\n\nimpl Mul for Field {\n    fn mul(self, other: Field) -> Field {\n        self * other\n    }\n}\n\nimpl Mul for u128 {\n    fn mul(self, other: u128) -> u128 {\n        self * other\n    }\n}\nimpl Mul for u64 {\n    fn mul(self, other: u64) -> u64 {\n        self * other\n    }\n}\nimpl Mul for u32 {\n    fn mul(self, other: u32) -> u32 {\n        self * other\n    }\n}\nimpl Mul for u16 {\n    fn mul(self, other: u16) -> u16 {\n        self * other\n    }\n}\nimpl Mul for u8 {\n    fn mul(self, other: u8) -> u8 {\n        self * other\n    }\n}\nimpl Mul for u1 {\n    fn mul(self, other: u1) -> u1 {\n        self * other\n    }\n}\n\nimpl Mul for i8 {\n    fn mul(self, other: i8) -> i8 {\n        self * other\n    }\n}\nimpl Mul for i16 {\n    fn mul(self, other: i16) -> i16 {\n        self * other\n    }\n}\nimpl Mul for i32 {\n    fn mul(self, other: i32) -> i32 {\n        self * other\n    }\n}\nimpl Mul for i64 {\n    fn mul(self, other: i64) -> i64 {\n        self * other\n    }\n}\n\n// docs:start:div-trait\npub trait Div {\n    fn div(self, other: Self) -> Self;\n}\n// docs:end:div-trait\n\nimpl Div for Field {\n    fn div(self, other: Field) -> Field {\n        self / other\n    }\n}\n\nimpl Div for u128 {\n    fn div(self, other: u128) -> u128 {\n        self / other\n    }\n}\nimpl Div for u64 {\n    fn div(self, other: u64) -> u64 {\n        self / other\n    }\n}\nimpl Div for u32 {\n    fn div(self, other: u32) -> u32 {\n        self / other\n    }\n}\nimpl Div for u16 {\n    fn div(self, other: u16) -> u16 {\n        self / other\n    }\n}\nimpl Div for u8 {\n    fn div(self, other: u8) -> u8 {\n        self / other\n    }\n}\nimpl Div for u1 {\n    fn div(self, other: u1) -> u1 {\n        self / other\n    }\n}\n\nimpl Div for i8 {\n    fn div(self, other: i8) -> i8 {\n        self / other\n    }\n}\nimpl Div for i16 {\n    fn div(self, other: i16) -> i16 {\n        self / other\n    }\n}\nimpl Div for i32 {\n    fn div(self, other: i32) -> i32 {\n        self / other\n    }\n}\nimpl Div for i64 {\n    fn div(self, other: i64) -> i64 {\n        self / other\n    }\n}\n\n// docs:start:rem-trait\npub trait Rem {\n    fn rem(self, other: Self) -> Self;\n}\n// docs:end:rem-trait\n\nimpl Rem for u128 {\n    fn rem(self, other: u128) -> u128 {\n        self % other\n    }\n}\nimpl Rem for u64 {\n    fn rem(self, other: u64) -> u64 {\n        self % other\n    }\n}\nimpl Rem for u32 {\n    fn rem(self, other: u32) -> u32 {\n        self % other\n    }\n}\nimpl Rem for u16 {\n    fn rem(self, other: u16) -> u16 {\n        self % other\n    }\n}\nimpl Rem for u8 {\n    fn rem(self, other: u8) -> u8 {\n        self % other\n    }\n}\nimpl Rem for u1 {\n    fn rem(self, other: u1) -> u1 {\n        self % other\n    }\n}\n\nimpl Rem for i8 {\n    fn rem(self, other: i8) -> i8 {\n        self % other\n    }\n}\nimpl Rem for i16 {\n    fn rem(self, other: i16) -> i16 {\n        self % other\n    }\n}\nimpl Rem for i32 {\n    fn rem(self, other: i32) -> i32 {\n        self % other\n    }\n}\nimpl Rem for i64 {\n    fn rem(self, other: i64) -> i64 {\n        self % other\n    }\n}\n\n// docs:start:neg-trait\npub trait Neg {\n    fn neg(self) -> Self;\n}\n// docs:end:neg-trait\n\n// docs:start:neg-trait-impls\nimpl Neg for Field {\n    fn neg(self) -> Field {\n        -self\n    }\n}\n\nimpl Neg for i8 {\n    fn neg(self) -> i8 {\n        -self\n    }\n}\nimpl Neg for i16 {\n    fn neg(self) -> i16 {\n        -self\n    }\n}\nimpl Neg for i32 {\n    fn neg(self) -> i32 {\n        -self\n    }\n}\nimpl Neg for i64 {\n    fn neg(self) -> i64 {\n        -self\n    }\n}\n// docs:end:neg-trait-impls\n\n// docs:start:wrapping-add-trait\npub trait WrappingAdd {\n    fn wrapping_add(self, y: Self) -> Self;\n}\n// docs:end:wrapping-add-trait\n\nimpl WrappingAdd for u1 {\n    fn wrapping_add(self: u1, y: u1) -> u1 {\n        self ^ y\n    }\n}\n\nimpl WrappingAdd for u8 {\n    fn wrapping_add(self: u8, y: u8) -> u8 {\n        wrapping_add_hlp(self, y)\n    }\n}\n\nimpl WrappingAdd for u16 {\n    fn wrapping_add(self: u16, y: u16) -> u16 {\n        wrapping_add_hlp(self, y)\n    }\n}\n\nimpl WrappingAdd for u32 {\n    fn wrapping_add(self: u32, y: u32) -> u32 {\n        wrapping_add_hlp(self, y)\n    }\n}\n\nimpl WrappingAdd for u64 {\n    fn wrapping_add(self: u64, y: u64) -> u64 {\n        wrapping_add_hlp(self, y)\n    }\n}\n\nimpl WrappingAdd for u128 {\n    fn wrapping_add(self: u128, y: u128) -> u128 {\n        wrapping_add_hlp(self, y)\n    }\n}\n\nimpl WrappingAdd for i8 {\n    fn wrapping_add(self: i8, y: i8) -> i8 {\n        wrapping_add_hlp(self, y)\n    }\n}\n\nimpl WrappingAdd for i16 {\n    fn wrapping_add(self: i16, y: i16) -> i16 {\n        wrapping_add_hlp(self, y)\n    }\n}\n\nimpl WrappingAdd for i32 {\n    fn wrapping_add(self: i32, y: i32) -> i32 {\n        wrapping_add_hlp(self, y)\n    }\n}\n\nimpl WrappingAdd for i64 {\n    fn wrapping_add(self: i64, y: i64) -> i64 {\n        wrapping_add_hlp(self, y)\n    }\n}\nimpl WrappingAdd for Field {\n    fn wrapping_add(self: Field, y: Field) -> Field {\n        self + y\n    }\n}\n\n// docs:start:wrapping-sub-trait\npub trait WrappingSub {\n    fn wrapping_sub(self, y: Self) -> Self;\n}\n// docs:start:wrapping-sub-trait\n\nimpl WrappingSub for u1 {\n    fn wrapping_sub(self: u1, y: u1) -> u1 {\n        self ^ y\n    }\n}\n\nimpl WrappingSub for u8 {\n    fn wrapping_sub(self: u8, y: u8) -> u8 {\n        wrapping_sub_hlp(self, y) as u8\n    }\n}\n\nimpl WrappingSub for u16 {\n    fn wrapping_sub(self: u16, y: u16) -> u16 {\n        wrapping_sub_hlp(self, y) as u16\n    }\n}\n\nimpl WrappingSub for u32 {\n    fn wrapping_sub(self: u32, y: u32) -> u32 {\n        wrapping_sub_hlp(self, y) as u32\n    }\n}\nimpl WrappingSub for u64 {\n    fn wrapping_sub(self: u64, y: u64) -> u64 {\n        wrapping_sub_hlp(self, y) as u64\n    }\n}\nimpl WrappingSub for u128 {\n    fn wrapping_sub(self: u128, y: u128) -> u128 {\n        wrapping_sub_hlp(self, y) as u128\n    }\n}\n\nimpl WrappingSub for i8 {\n    fn wrapping_sub(self: i8, y: i8) -> i8 {\n        wrapping_sub_hlp(self, y) as i8\n    }\n}\n\nimpl WrappingSub for i16 {\n    fn wrapping_sub(self: i16, y: i16) -> i16 {\n        wrapping_sub_hlp(self, y) as i16\n    }\n}\n\nimpl WrappingSub for i32 {\n    fn wrapping_sub(self: i32, y: i32) -> i32 {\n        wrapping_sub_hlp(self, y) as i32\n    }\n}\nimpl WrappingSub for i64 {\n    fn wrapping_sub(self: i64, y: i64) -> i64 {\n        wrapping_sub_hlp(self, y) as i64\n    }\n}\nimpl WrappingSub for Field {\n    fn wrapping_sub(self: Field, y: Field) -> Field {\n        self - y\n    }\n}\n\n// docs:start:wrapping-mul-trait\npub trait WrappingMul {\n    fn wrapping_mul(self, y: Self) -> Self;\n}\n// docs:start:wrapping-mul-trait\n\nimpl WrappingMul for u1 {\n    fn wrapping_mul(self: u1, y: u1) -> u1 {\n        self & y\n    }\n}\n\nimpl WrappingMul for u8 {\n    fn wrapping_mul(self: u8, y: u8) -> u8 {\n        wrapping_mul_hlp(self, y)\n    }\n}\n\nimpl WrappingMul for u16 {\n    fn wrapping_mul(self: u16, y: u16) -> u16 {\n        wrapping_mul_hlp(self, y)\n    }\n}\n\nimpl WrappingMul for u32 {\n    fn wrapping_mul(self: u32, y: u32) -> u32 {\n        wrapping_mul_hlp(self, y)\n    }\n}\nimpl WrappingMul for u64 {\n    fn wrapping_mul(self: u64, y: u64) -> u64 {\n        wrapping_mul_hlp(self, y)\n    }\n}\n\nimpl WrappingMul for i8 {\n    fn wrapping_mul(self: i8, y: i8) -> i8 {\n        wrapping_mul_hlp(self, y)\n    }\n}\n\nimpl WrappingMul for i16 {\n    fn wrapping_mul(self: i16, y: i16) -> i16 {\n        wrapping_mul_hlp(self, y)\n    }\n}\n\nimpl WrappingMul for i32 {\n    fn wrapping_mul(self: i32, y: i32) -> i32 {\n        wrapping_mul_hlp(self, y)\n    }\n}\n\nimpl WrappingMul for i64 {\n    fn wrapping_mul(self: i64, y: i64) -> i64 {\n        wrapping_mul_hlp(self, y)\n    }\n}\n\nimpl WrappingMul for u128 {\n    fn wrapping_mul(self: u128, y: u128) -> u128 {\n        wrapping_mul128_hlp(self, y)\n    }\n}\nimpl WrappingMul for Field {\n    fn wrapping_mul(self: Field, y: Field) -> Field {\n        self * y\n    }\n}\n\nfn wrapping_add_hlp<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n\nfn wrapping_sub_hlp<T>(x: T, y: T) -> Field\nwhere\n    T: AsPrimitive<Field>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    x.as_() + 340282366920938463463374607431768211456 - y.as_()\n}\n\nfn wrapping_mul_hlp<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\nglobal two_pow_64: u128 = 0x10000000000000000;\n/// Splits a 128 bits number into two 64 bits limbs\nunconstrained fn split64(x: u128) -> (u64, u64) {\n    let lo = x as u64;\n    let hi = (x / two_pow_64) as u64;\n    (lo, hi)\n}\n\n/// Split a 128 bits number into two 64 bits limbs\n/// It will fail if the number is more than 128 bits\nfn split_into_64_bit_limbs(x: u128) -> (u64, u64) {\n    // Safety: the limbs are constrained below\n    let (x_lo, x_hi) = unsafe { split64(x) };\n    assert(x as Field == x_lo as Field + x_hi as Field * two_pow_64 as Field);\n    (x_lo, x_hi)\n}\n\n#[field(bn254)]\nfn wrapping_mul128_hlp(x: u128, y: u128) -> u128 {\n    let (x_lo, x_hi) = split_into_64_bit_limbs(x);\n    let (y_lo, y_hi) = split_into_64_bit_limbs(y);\n    // Multiplication using the limbs:(x_lo + 2**64*x_hi)*(y_lo + 2**64*y_hi)=x_lo*y_lo+...\n    // and skipping the terms over 2**128\n    // Working with u64 limbs ensures that we cannot overflow the field modulus.\n    let low = x_lo as Field * y_lo as Field;\n    let lo = low as u64 as Field;\n    let carry = (low - lo) / two_pow_64 as Field;\n    let high = x_lo as Field * y_hi as Field + x_hi as Field * y_lo as Field + carry;\n    let hi = high as u64 as Field;\n    (lo + two_pow_64 as Field * hi) as u128\n}\n","path":"std/ops/arith.nr"},"50":{"source":"use airdrop::constants::{\n    MAX_CONTRIBUTIONS_JSON_LEN, MAX_CONTRIBUTIONS_RECORD_LEN, MAX_REPO_NAME_LEN, MAX_REPO_OWNER_LEN,\n};\nuse airdrop::utils::{\n    check_encrypted_json_contributions, decrypt_record, encrypt_substring, get_proxy_pubkeys,\n    JsonSlice, verify_proxy_sig,\n};\nuse json_parser::{JSON, JSON512b};\n\npub struct SignaturePayload {\n    pub encrypted_record: BoundedVec<u8, MAX_CONTRIBUTIONS_RECORD_LEN>,\n    pub encrypted_record_signed: [u8; 64],\n    pub proxy_pubkey_x: [u8; 32],\n    pub proxy_pubkey_y: [u8; 32],\n}\n\npub struct AirdropPayload {\n    pub repo_name: BoundedVec<u8, MAX_REPO_NAME_LEN>,\n    pub repo_owner: BoundedVec<u8, MAX_REPO_OWNER_LEN>,\n    pub n_contributions: u64,\n    pub graphql_response: JsonSlice<MAX_CONTRIBUTIONS_JSON_LEN>,\n}\n\nimpl SignaturePayload {\n    pub fn verify_proxy_sig(self) {\n        verify_proxy_sig(\n            self.encrypted_record,\n            self.proxy_pubkey_x,\n            self.proxy_pubkey_y,\n            self.encrypted_record_signed,\n        );\n    }\n}\n\nimpl AirdropPayload {\n    pub fn check_contributions(self) {\n        check_contributions(\n            self.graphql_response.json,\n            self.repo_name,\n            self.repo_owner,\n            self.n_contributions,\n        );\n    }\n}\n\nfn main(\n    mut key: [u32; 8],\n    ctr: u32,\n    mut nonce: [u32; 3],\n    signature_payload: pub SignaturePayload,\n    airdrop_payload: pub AirdropPayload,\n) {\n    // 1. Verify encrypted_record comes from the trusted proxy.\n    signature_payload.verify_proxy_sig();\n\n    // 2. Encrypt the substring of the GraphQL response on the specific keystream offset (start of the JSON in the full encrypted record).\n    let encrypted_subtring: BoundedVec<u8, MAX_CONTRIBUTIONS_JSON_LEN> = encrypt_substring(\n        key,\n        ctr,\n        nonce,\n        airdrop_payload.graphql_response.json,\n        airdrop_payload.graphql_response.start,\n    );\n\n    // 3. Check whether the encrypted substring (JSON) is present in the full encrypted record.\n    check_encrypted_json_contributions(\n        signature_payload.encrypted_record,\n        encrypted_subtring,\n        airdrop_payload.graphql_response.start,\n        airdrop_payload.graphql_response.end,\n    );\n\n    // 4. Check for the number of contributions in the GraphQL response.\n    airdrop_payload.check_contributions();\n}\n\nfn check_contributions(\n    json_str: str<MAX_CONTRIBUTIONS_JSON_LEN>,\n    expected_repo_name: BoundedVec<u8, MAX_REPO_NAME_LEN>,\n    expected_repo_owner: BoundedVec<u8, MAX_REPO_OWNER_LEN>,\n    n_contributions: u64,\n) {\n    /*\n    Expected JSON schema:\n    {\n        \"repository\":{\n            \"name\":<repository_name>,\n            \"owner\":{\n                \"login\":<repository_owner>,\n            },\n            \"defaultBranchRef\":{\n                \"target\":{\n                    \"history\":{\n                        \"totalCount\":<n>\n                    }\n                }\n            }\n        }\n    }\n\n    Where <n> is the number commits in the repo's default branch.\n    */\n\n    let json: JSON512b = JSON::parse_json_from_string(json_str);\n    let repo: JSON512b = json.get_object_unchecked(\"repository\".as_bytes());\n\n    // Parse decrypted API response to get `repo_name` and `repo_owner`.\n    let repo_name: BoundedVec<u8, MAX_REPO_NAME_LEN> = repo.get_string_unchecked(\"name\".as_bytes());\n    let owner: JSON512b = repo.get_object_unchecked(\"owner\".as_bytes());\n    let repo_owner: BoundedVec<u8, MAX_REPO_OWNER_LEN> =\n        owner.get_string_unchecked(\"login\".as_bytes());\n\n    // Assert we're on the correct repo, identified by the name and owner.\n    assert(repo_name == expected_repo_name, \"Unexpected repo name!\");\n    assert(repo_owner == expected_repo_owner, \"Unexpected repo owner!\");\n\n    // Parse decrypted API response to get `n_contributions`.\n    let default_branch_ref: JSON512b = repo.get_object_unchecked(\"defaultBranchRef\".as_bytes());\n    let target: JSON512b = default_branch_ref.get_object_unchecked(\"target\".as_bytes());\n    let history: JSON512b = target.get_object_unchecked(\"history\".as_bytes());\n    let total_count: u64 = history.get_number_unchecked(\"totalCount\".as_bytes());\n\n    // Assert `totalCount` is the expected value.\n    assert(total_count == n_contributions, \"Unexpected number of contributions!\");\n}\n\n#[test]\nfn test_main() {\n    let (mut key, ctr, mut nonce) = get_test_key_ctr_nonce();\n    let plaintext: str<128> = r#\"xxxx{\"repository\":{\"name\":\"mono\",\"owner\":{\"login\":\"tisura-labs\"},\"defaultBranchRef\":{\"target\":{\"history\":{\"totalCount\":50}}}}}xx\"#;\n    let (repo_name, repo_owner, n_contributions) = get_test_repo_name_owner_n_contributions();\n\n    // Calculate ciphertext.\n    let mut plaintext_vec: BoundedVec<u8, MAX_CONTRIBUTIONS_RECORD_LEN> = BoundedVec::new();\n    plaintext_vec.extend_from_array(plaintext.as_bytes());\n    let encrypted_record = decrypt_record(key, ctr, nonce, plaintext_vec); // decrypt_record encrypts plaintext.\n    let encrypted_record_signed: [u8; 64] = get_test_encrypted_record_signed();\n    let (proxy_pubkey_x, proxy_pubkey_y) = get_proxy_pubkeys();\n\n    // DEV: we pad `json` with empty spaces because any other character will make JSON parsing [l. 84] fail.\n    let json: str<MAX_CONTRIBUTIONS_JSON_LEN> = r#\"{\"repository\":{\"name\":\"mono\",\"owner\":{\"login\":\"tisura-labs\"},\"defaultBranchRef\":{\"target\":{\"history\":{\"totalCount\":50}}}}}                                                                      \"#;\n    let start: u32 = 4; // Start index of the JSON in the decrypted response.\n    let end: u32 = 126; // End index of the JSON in the decrypted response. 126 = 4 + 122 (length of the JSON).\n    let json_slice = JsonSlice { json, start, end };\n\n    let signature_payload = SignaturePayload {\n        encrypted_record,\n        encrypted_record_signed,\n        proxy_pubkey_x,\n        proxy_pubkey_y,\n    };\n\n    let airdrop_payload =\n        AirdropPayload { graphql_response: json_slice, repo_name, repo_owner, n_contributions };\n\n    main(key, ctr, nonce, signature_payload, airdrop_payload);\n}\n\n/*\n    Test helpers.\n*/\n\nfn get_test_key_ctr_nonce() -> ([u32; 8], u32, [u32; 3]) {\n    let key: [u32; 8] = [1, 2, 3, 4, 5, 6, 7, 8];\n    let ctr: u32 = 1;\n    let mut nonce: [u32; 3] = [1, 2, 3];\n    (key, ctr, nonce)\n}\n\nfn get_test_repo_name_owner_n_contributions() -> (BoundedVec<u8, MAX_REPO_NAME_LEN>, BoundedVec<u8, MAX_REPO_OWNER_LEN>, u64) {\n    let repo_name = \"mono\".as_bytes();\n    let repo_name_vec: BoundedVec<u8, MAX_REPO_NAME_LEN> = BoundedVec::from_array(repo_name);\n\n    let repo_owner = \"tisura-labs\".as_bytes();\n    let repo_owner_vec: BoundedVec<u8, MAX_REPO_OWNER_LEN> = BoundedVec::from_array(repo_owner);\n\n    let n_contributions: u64 = 50;\n\n    (repo_name_vec, repo_owner_vec, n_contributions)\n}\n\nfn get_test_encrypted_record_signed() -> [u8; 64] {\n    [\n        97, 76, 162, 31, 207, 253, 154, 0, 249, 96, 15, 82, 126, 243, 107, 189, 249, 58, 154, 185,\n        198, 9, 158, 0, 141, 76, 223, 192, 248, 170, 246, 75, 23, 202, 245, 196, 175, 112, 15, 48,\n        130, 221, 98, 182, 40, 221, 135, 120, 234, 230, 50, 183, 84, 82, 126, 76, 169, 230, 111,\n        106, 206, 137, 46, 236,\n    ] // Removed the last byte which is the recovery id.\n}\n","path":"/home/runner/work/mono/mono/sentinel_sdk/src/prove/circuits/airdrop/contributions/src/main.nr"},"53":{"source":"use crate::constants::{\n    MAX_CONTRIBUTIONS_JSON_LEN, MAX_OWNERSHIP_JSON_LEN, OWNERSHIP_JSON_LEN, PROXY_PUBKEY_X,\n    PROXY_PUBKEY_Y,\n};\nuse chacha20::ChaCha20;\nuse keccak256::keccak256;\nuse std::ecdsa_secp256k1::verify_signature;\n\npub struct JsonSlice<let MAX_JSON_LEN: u32> {\n    json: str<MAX_JSON_LEN>,\n    start: u32,\n    end: u32,\n}\n\nfn verify_proxy_sig<let MAX_RECORD_LEN: u32>(\n    encrypted_record: BoundedVec<u8, MAX_RECORD_LEN>,\n    proxy_pubkey_x: [u8; 32],\n    proxy_pubkey_y: [u8; 32],\n    encrypted_record_signature: [u8; 64],\n) {\n    // DEV: Is using ciphertext.storage() safe?\n    let encrypted_record_hash = keccak256(encrypted_record.storage(), encrypted_record.len());\n    let is_verified = verify_signature(\n        proxy_pubkey_x,\n        proxy_pubkey_y,\n        encrypted_record_signature,\n        encrypted_record_hash,\n    );\n    assert(proxy_pubkey_x == PROXY_PUBKEY_X, \"Unexpected proxy public key X!\");\n    assert(proxy_pubkey_y == PROXY_PUBKEY_Y, \"Unexpected proxy public key Y!\");\n    assert(is_verified, \"proxy did not sign encrypted_record_hash!\");\n}\n\nfn encrypt_substring<let max_substring_len: u32>(\n    mut key: [u32; 8],\n    ctr: u32,\n    mut nonce: [u32; 3],\n    subtring: str<max_substring_len>,\n    keystream_offset: u32,\n) -> BoundedVec<u8, max_substring_len> {\n    let substring_vec: BoundedVec<u8, max_substring_len> = str_to_bounded_vec(subtring);\n    let chacha20 = ChaCha20::new(&mut key, ctr, &mut nonce);\n    let encrypted_substring: BoundedVec<u8, max_substring_len> =\n        chacha20.encrypt_with_offset(substring_vec, keystream_offset);\n\n    encrypted_substring\n}\n\nfn check_encrypted_json_ownership<let MAX_RECORD_LEN: u32>(\n    encrypted_record: BoundedVec<u8, MAX_RECORD_LEN>,\n    encrypted_json: BoundedVec<u8, MAX_OWNERSHIP_JSON_LEN>,\n    start: u32,\n) {\n    for i in 0..OWNERSHIP_JSON_LEN {\n        assert(\n            encrypted_record.get(i + start) == encrypted_json.get(i),\n            \"Encrypted JSON does not match expected value.\",\n        );\n    }\n}\n\nfn check_encrypted_json_contributions<let MAX_RECORD_LEN: u32>(\n    encrypted_record: BoundedVec<u8, MAX_RECORD_LEN>,\n    encrypted_json: BoundedVec<u8, MAX_CONTRIBUTIONS_JSON_LEN>,\n    start: u32,\n    end: u32,\n) {\n    for i in 0..MAX_CONTRIBUTIONS_JSON_LEN {\n        // Use boolean arithmetic to conditionally check\n        let should_check = (i + start < end) as u32;\n        let record_byte = encrypted_record.get(i + start);\n        let json_byte = encrypted_json.get(i);\n\n        // This will be 0 if bytes match OR if we shouldn't check\n        // Will be 1 only if bytes don't match AND we should check\n        let mismatch = should_check * ((record_byte != json_byte) as u32);\n\n        assert(mismatch == 0, \"Encrypted JSON does not match expected value.\");\n    }\n}\n\nfn decrypt_record<let MAX_RECORD_LEN: u32>(\n    mut key: [u32; 8],\n    ctr: u32,\n    mut nonce: [u32; 3],\n    encrypted_record: BoundedVec<u8, MAX_RECORD_LEN>,\n) -> BoundedVec<u8, MAX_RECORD_LEN> {\n    let chacha20 = ChaCha20::new(&mut key, ctr, &mut nonce);\n    let decrypted_record: BoundedVec<u8, MAX_RECORD_LEN> = chacha20.decrypt(encrypted_record);\n\n    decrypted_record\n}\n\nfn encrypt_record<let max_record_len: u32>(\n    mut key: [u32; 8],\n    ctr: u32,\n    mut nonce: [u32; 3],\n    record: BoundedVec<u8, max_record_len>,\n) -> BoundedVec<u8, max_record_len> {\n    let encrypted_record: BoundedVec<u8, max_record_len> = decrypt_record(key, ctr, nonce, record);\n    encrypted_record\n}\n\nfn get_proxy_pubkeys() -> ([u8; 32], [u8; 32]) {\n    (PROXY_PUBKEY_X, PROXY_PUBKEY_Y)\n}\n\nfn str_to_bounded_vec<let MAX_LEN: u32>(s: str<MAX_LEN>) -> BoundedVec<u8, MAX_LEN> {\n    let vec: BoundedVec<u8, MAX_LEN> = BoundedVec::from_array(s.as_bytes());\n\n    vec\n}\n\n#[test]\nfn test_check_encrypted_json_ownership() {\n    // Full encrypted record sample\n    let full_record: BoundedVec<u8, MAX_OWNERSHIP_JSON_LEN> = BoundedVec::from_array([\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,\n        18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    ]);\n\n    // Sample sub-encrypted record\n    let sub_record: BoundedVec<u8, MAX_OWNERSHIP_JSON_LEN> = BoundedVec::from_array([\n        1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,\n        26, 27, 28, 29, 30, 31, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    ]);\n    let start: u32 = 11; // Start index of the JSON in the encrypted response.\n    check_encrypted_json_ownership(full_record, sub_record, start);\n}\n","path":"/home/runner/work/mono/mono/sentinel_sdk/src/prove/circuits/airdrop/lib/src/utils.nr"},"54":{"source":"// DEV: Should this be refactored to a seperate folder at the same level with \"substring\" and \"airdrop\" called \"chacha20\" ?\n\nmod utils;\nmod test_vectors;\n\nglobal BLOCK_SIZE: u32 = 64; // In bytes.\nglobal STATE_SIZE: u32 = 16; // Each word is 4 bytes long.\nglobal DOUBLE_ROUNDS: u8 = 10;\n\nglobal MAX: u32 = 160;\n\n// Constants for \"expand 32-byte k\".\nglobal SIGMA_0: u32 = 0x61707865;\nglobal SIGMA_1: u32 = 0x3320646e;\nglobal SIGMA_2: u32 = 0x79622d32;\nglobal SIGMA_3: u32 = 0x6b206574;\n\npub struct ChaCha20 {\n    state: [u32; 16],\n    key: &mut [u32; 8],\n    ctr: u32,\n    nonce: &mut [u32; 3],\n}\n\nimpl ChaCha20 {\n    pub fn new(key: &mut [u32; 8], ctr: u32, nonce: &mut [u32; 3]) -> Self {\n        let state = [\n            SIGMA_0, SIGMA_1, SIGMA_2, SIGMA_3, key[0], key[1], key[2], key[3], key[4], key[5],\n            key[6], key[7], ctr, nonce[0], nonce[1], nonce[2],\n        ];\n\n        ChaCha20 { state, key, ctr, nonce }\n    }\n\n    pub fn encrypt<let MAX_CIRCUIT_LEN: u32>(\n        self,\n        plaintext: BoundedVec<u8, MAX_CIRCUIT_LEN>,\n    ) -> BoundedVec<u8, MAX_CIRCUIT_LEN> {\n        // plaintext should not be padded because the code below\n        // assumes that plaintext.len() != plaintext.max_len()\n\n        let mut out: BoundedVec<u8, MAX_CIRCUIT_LEN> = BoundedVec::new();\n\n        let full_blocks_max = MAX_CIRCUIT_LEN / BLOCK_SIZE;\n\n        for i in 0..full_blocks_max {\n            let key_stream = self.block(self.ctr + i);\n            let block_start = i * BLOCK_SIZE;\n\n            for j in 0..BLOCK_SIZE {\n                let indice_plain = block_start + j;\n                out.push(plaintext.get_unchecked(indice_plain) ^ key_stream[j]);\n            }\n        }\n\n        out\n    }\n\n    pub fn encrypt_with_offset<let MAX_SUBSTRING_LENGTH: u32>(\n        self,\n        plaintext: BoundedVec<u8, MAX_SUBSTRING_LENGTH>,\n        keystream_offset: u32,\n    ) -> BoundedVec<u8, MAX_SUBSTRING_LENGTH> {\n        let mut out: BoundedVec<u8, MAX_SUBSTRING_LENGTH> =\n            BoundedVec::from_array([0; MAX_SUBSTRING_LENGTH]);\n        // let initial_block_idx = keystream_offset / 64\n        let initial_block_idx = keystream_offset >> 6; // 2^6 = 64\n\n        // let initial_byte_idx = keystream_offset % 64;\n        let initial_byte_idx = keystream_offset & 63;\n\n        // let full_blocks_max = MAX_SUBSTRING_LENGTH / 64;\n        let full_blocks_max = MAX_SUBSTRING_LENGTH >> 6;\n\n        // This loop contains (full_blocks_max - 1) * BLOCK_SIZE = MAX_SUBSTRING_LENGTH - BLOCK_SIZE elements.\n        for block_idx_plaintext in 1..full_blocks_max {\n            let block_idx = block_idx_plaintext + initial_block_idx;\n            let keystream = self.block(self.ctr + block_idx);\n            let block_start = block_idx * BLOCK_SIZE;\n\n            for byte_idx in 0..BLOCK_SIZE {\n                let indice_plain = block_start + byte_idx - keystream_offset;\n                out.set_unchecked(indice_plain, plaintext.get(indice_plain) ^ keystream[byte_idx]);\n            }\n        }\n\n        let first_block_idx = initial_block_idx;\n        let first_keystream = self.block(self.ctr + first_block_idx);\n\n        let last_block_idx = full_blocks_max + initial_block_idx;\n        let last_keystream = self.block(self.ctr + last_block_idx);\n        let block_start = full_blocks_max * BLOCK_SIZE;\n\n        for byte_idx in 0..BLOCK_SIZE {\n            let indice_plain = block_start + byte_idx - initial_byte_idx;\n            let indice = indice_plain % MAX_SUBSTRING_LENGTH;\n\n            // let is_first_block = min(indice_plain / block_start, 1);\n            let is_first_block = (indice_plain >= block_start) as u8;\n            let keystream_byte_idx = is_first_block * first_keystream[byte_idx]\n                + (1 - is_first_block) * last_keystream[byte_idx];\n\n            out.set_unchecked(indice, plaintext.get(indice) ^ keystream_byte_idx);\n        }\n\n        out\n    }\n\n    pub fn decrypt<let MAX_CIRCUIT_LEN: u32>(\n        self,\n        ciphertext: BoundedVec<u8, MAX_CIRCUIT_LEN>,\n    ) -> BoundedVec<u8, MAX_CIRCUIT_LEN> {\n        self.encrypt(ciphertext)\n    }\n\n    fn block(self, ctr: u32) -> [u8; 64] {\n        let mut state = self.state;\n        state[12] = ctr;\n        let mut working_state = state;\n\n        for _ in 0..DOUBLE_ROUNDS {\n            inner_block(&mut working_state);\n        }\n        for i in 0..STATE_SIZE {\n            state[i] = utils::wrapping_add_32(state[i], working_state[i]);\n        }\n\n        serialize_state(&mut state)\n    }\n}\n\nfn inner_block(state: &mut [u32; 16]) {\n    // Column round.\n    quarter_round(state, 0, 4, 8, 12);\n    quarter_round(state, 1, 5, 9, 13);\n    quarter_round(state, 2, 6, 10, 14);\n    quarter_round(state, 3, 7, 11, 15);\n\n    // Diagonal round.\n    quarter_round(state, 0, 5, 10, 15);\n    quarter_round(state, 1, 6, 11, 12);\n    quarter_round(state, 2, 7, 8, 13);\n    quarter_round(state, 3, 4, 9, 14);\n}\n\nfn quarter_round(state: &mut [u32; 16], a: u32, b: u32, c: u32, d: u32) {\n    state[a] = utils::wrapping_add_32(state[a], state[b]);\n    state[d] ^= state[a];\n    state[d] = utils::rotl32(state[d], 16);\n\n    state[c] = utils::wrapping_add_32(state[c], state[d]);\n    state[b] ^= state[c];\n    state[b] = utils::rotl32(state[b], 12);\n\n    state[a] = utils::wrapping_add_32(state[a], state[b]);\n    state[d] ^= state[a];\n    state[d] = utils::rotl32(state[d], 8);\n\n    state[c] = utils::wrapping_add_32(state[c], state[d]);\n    state[b] ^= state[c];\n    state[b] = utils::rotl32(state[b], 7);\n}\n\nfn serialize_state(state: &mut [u32; 16]) -> [u8; 64] {\n    let mut serialized_state: [u8; 64] = [0; 64];\n\n    for i in 0..16 {\n        let bytes: [u8; 4] = (state[i] as Field).to_le_bytes();\n        serialized_state[i * 4] = bytes[0];\n        serialized_state[i * 4 + 1] = bytes[1];\n        serialized_state[i * 4 + 2] = bytes[2];\n        serialized_state[i * 4 + 3] = bytes[3];\n    }\n\n    serialized_state\n}\n\n/*\n    Tests.\n*/\n\n#[test]\nfn test_quarter_round() {\n    let test_cases = get_quarter_round_test_cases();\n\n    for case in test_cases {\n        let mut state = case.initial_state;\n        quarter_round(&mut state, case.a, case.b, case.c, case.d);\n        assert_arrays_eq(state, case.expected_state);\n    }\n}\n\n#[test]\nfn test_block() {\n    let test_cases = get_block_test_cases();\n\n    for case in test_cases {\n        run_block_test(case.key, case.counter, case.nonce, case.expected);\n    }\n}\n\n/*\nCommenting out this test since MAX has been\ndecreased from 512 to 160\n#[test]\nfn test_encrypt() {\n    let (case1, case2, case3, case4) = get_encrypt_test_cases();\n\n    run_encrypt_test(\n        case1.key,\n        case1.counter,\n        case1.nonce,\n        case1.plaintext,\n        case1.expected_ciphertext,\n    );\n\n    run_encrypt_test(\n        case2.key,\n        case2.counter,\n        case2.nonce,\n        case2.plaintext,\n        case2.expected_ciphertext,\n    );\n\n    run_encrypt_test(\n        case3.key,\n        case3.counter,\n        case3.nonce,\n        case3.plaintext,\n        case3.expected_ciphertext,\n    );\n\n    run_encrypt_test(\n        case4.key,\n        case4.counter,\n        case4.nonce,\n        case4.plaintext,\n        case4.expected_ciphertext,\n    );\n}\n*/\n\n/*\n    Test helpers.\n*/\n\nfn assert_vectors_eq(actual: BoundedVec<u8, MAX>, expected: BoundedVec<u8, MAX>) {\n    assert_eq(actual.len(), expected.len());\n\n    for i in 0..actual.len() {\n        assert_eq(actual.get(i), expected.get(i));\n    }\n}\n\nfn assert_arrays_eq<T, let MAX_CIRCUIT_LEN: u32>(\n    actual: [T; MAX_CIRCUIT_LEN],\n    expected: [T; MAX_CIRCUIT_LEN],\n)\nwhere\n    T: Eq,\n{\n    assert_eq(actual.len(), expected.len());\n\n    for i in 0..actual.len() {\n        assert_eq(actual[i], expected[i]);\n    }\n}\n\nfn run_block_test(key: [u32; 8], counter: u32, nonce: [u32; 3], expected: [u8; 64]) {\n    let mut key = key;\n    let mut nonce = nonce;\n    let chacha = ChaCha20::new(&mut key, counter, &mut nonce);\n\n    let actual = chacha.block(counter);\n    assert_arrays_eq(actual, expected);\n}\n\nfn run_encrypt_test(\n    key: [u32; 8],\n    counter: u32,\n    nonce: [u32; 3],\n    plaintext: BoundedVec<u8, MAX>,\n    expected: BoundedVec<u8, MAX>,\n) {\n    let mut key = key;\n    let mut nonce = nonce;\n    let chacha = ChaCha20::new(&mut key, counter, &mut nonce);\n\n    let encrypted = chacha.encrypt(plaintext);\n    assert_vectors_eq(encrypted, expected);\n    let decrypted = chacha.decrypt(encrypted);\n    assert_vectors_eq(decrypted, plaintext);\n}\n\npub struct QuarterRoundTest {\n    pub initial_state: [u32; 16],\n    pub a: u32,\n    pub b: u32,\n    pub c: u32,\n    pub d: u32,\n    pub expected_state: [u32; 16],\n}\n\npub struct BlockTest {\n    pub key: [u32; 8],\n    pub counter: u32,\n    pub nonce: [u32; 3],\n    pub expected: [u8; 64],\n}\n\npub struct EncryptTest {\n    pub key: [u32; 8],\n    pub counter: u32,\n    pub nonce: [u32; 3],\n    pub plaintext: BoundedVec<u8, MAX>,\n    pub expected_ciphertext: BoundedVec<u8, MAX>,\n}\n\npub fn get_quarter_round_test_cases() -> [QuarterRoundTest; 2] {\n    [\n        // Test Vector 2.1.1\n        QuarterRoundTest {\n            initial_state: test_vectors::get_quarter_round_test_state_0(),\n            a: 0,\n            b: 1,\n            c: 2,\n            d: 3,\n            expected_state: test_vectors::get_quarter_round_test_expected_0(),\n        },\n        // Test Vector 2.2.1\n        QuarterRoundTest {\n            initial_state: test_vectors::get_quarter_round_test_state_1(),\n            a: 2,\n            b: 7,\n            c: 8,\n            d: 13,\n            expected_state: test_vectors::get_quarter_round_test_expected_1(),\n        },\n    ]\n}\n\npub fn get_block_test_cases() -> [BlockTest; 6] {\n    [\n        // 2.3.2 Test Vector\n        BlockTest {\n            key: test_vectors::get_block_test_key_0(),\n            counter: 1,\n            nonce: test_vectors::get_block_test_nonce_0(),\n            expected: test_vectors::get_block_test_expected_state_0(),\n        },\n        // A.1 Test Vectors\n        BlockTest {\n            key: test_vectors::get_block_test_key_1(),\n            counter: 0,\n            nonce: test_vectors::get_block_test_nonce_1(),\n            expected: test_vectors::get_block_test_expected_state_1(),\n        },\n        BlockTest {\n            key: test_vectors::get_block_test_key_2(),\n            counter: 1,\n            nonce: test_vectors::get_block_test_nonce_2(),\n            expected: test_vectors::get_block_test_expected_state_2(),\n        },\n        BlockTest {\n            key: test_vectors::get_block_test_key_3(),\n            counter: 1,\n            nonce: test_vectors::get_block_test_nonce_3(),\n            expected: test_vectors::get_block_test_expected_state_3(),\n        },\n        BlockTest {\n            key: test_vectors::get_block_test_key_4(),\n            counter: 2,\n            nonce: test_vectors::get_block_test_nonce_4(),\n            expected: test_vectors::get_block_test_expected_state_4(),\n        },\n        BlockTest {\n            key: test_vectors::get_block_test_key_5(),\n            counter: 0,\n            nonce: test_vectors::get_block_test_nonce_5(),\n            expected: test_vectors::get_block_test_expected_state_5(),\n        },\n    ]\n}\n\npub fn get_encrypt_test_cases() -> (EncryptTest, EncryptTest, EncryptTest, EncryptTest) {\n    (\n        // Test Vector from Section 2.4.2 (114 bytes)\n        EncryptTest {\n            key: test_vectors::get_encrypt_test_key_0(),\n            counter: 1,\n            nonce: test_vectors::get_encrypt_test_nonce_0(),\n            plaintext: test_vectors::get_encrypt_test_plaintext_0(),\n            expected_ciphertext: test_vectors::get_encrypt_test_expected_ciphertext_0(),\n        },\n        // Test Vector #1 from A.2 (64 bytes)\n        EncryptTest {\n            key: test_vectors::get_encrypt_test_key_1(),\n            counter: 0,\n            nonce: test_vectors::get_block_test_nonce_1(),\n            plaintext: test_vectors::get_encrypt_test_plaintext_1(),\n            expected_ciphertext: test_vectors::get_encrypt_test_expected_ciphertext_1(),\n        },\n        // Test Vector #2 from A.2 (375 bytes)\n        EncryptTest {\n            key: test_vectors::get_encrypt_test_key_2(),\n            counter: 1,\n            nonce: test_vectors::get_encrypt_test_nonce_2(),\n            plaintext: test_vectors::get_encrypt_test_plaintext_2(),\n            expected_ciphertext: test_vectors::get_encrypt_test_expected_ciphertext_2(),\n        },\n        // Test Vector #3 from A.2 (127 bytes)\n        EncryptTest {\n            key: test_vectors::get_encrypt_test_key_3(),\n            counter: 42,\n            nonce: test_vectors::get_encrypt_test_nonce_3(),\n            plaintext: test_vectors::get_encrypt_test_plaintext_3(),\n            expected_ciphertext: test_vectors::get_encrypt_test_expected_ciphertext_3(),\n        },\n    )\n}\n\nfn generate_ciphertext<let MAX_LEN: u32>(\n    mut key: [u32; 8],\n    ctr: u32,\n    mut nonce: [u32; 3],\n    plaintext: BoundedVec<u8, MAX_LEN>,\n) -> BoundedVec<u8, MAX_LEN> {\n    let chacha = ChaCha20::new(&mut key, ctr, &mut nonce);\n    let plaintext = chacha.encrypt(plaintext);\n    plaintext\n}\n\nfn generate_ciphertext_with_offset<let MAX_LEN: u32>(\n    mut key: [u32; 8],\n    ctr: u32,\n    mut nonce: [u32; 3],\n    plaintext: BoundedVec<u8, MAX_LEN>,\n    keystream_offset: u32,\n) -> BoundedVec<u8, MAX_LEN> {\n    let chacha = ChaCha20::new(&mut key, ctr, &mut nonce);\n\n    let plaintext = chacha.encrypt_with_offset(plaintext, keystream_offset);\n    plaintext\n}\n\n#[cfg(test)]\nglobal OWNERSHIP_LEN: u32 = 64;\nglobal CONTRIBUTIONS_LEN: u32 = 192;\n\nglobal MAX_SUBSTRING_LENGTH: u32 = 64;\nglobal SUBSTRING_OFFSET: u32 = 35;\n\n#[test]\nfn test_generate_input() {\n    let (key, ctr, nonce) = get_test_key_ctr_nonce();\n\n    let plaintext_ownership_padded: str<OWNERSHIP_LEN> = get_ownership_plaintext();\n    let mut plaintext_ownership_vec: BoundedVec<u8, OWNERSHIP_LEN> = BoundedVec::new();\n    plaintext_ownership_vec.extend_from_array(plaintext_ownership_padded.as_bytes());\n\n    let ciphertext_ownership = generate_ciphertext(key, ctr, nonce, plaintext_ownership_vec);\n    println(\"\\n\\tEncrypted plaintext ownership:\");\n    println(ciphertext_ownership);\n\n    let plaintext_contributions: str<CONTRIBUTIONS_LEN> = get_contributions_plaintext();\n    let mut plaintext_contributions_vec: BoundedVec<u8, CONTRIBUTIONS_LEN> = BoundedVec::new();\n    plaintext_contributions_vec.extend_from_array(plaintext_contributions.as_bytes());\n\n    let ciphertext_contributions =\n        generate_ciphertext(key, ctr, nonce, plaintext_contributions_vec);\n    println(\"\\n\\tEncrypted plaintext contributions:\");\n    println(ciphertext_contributions);\n}\n\n#[test]\nfn test_encrypt_with_offset() {\n    let (key, ctr, nonce) = get_test_key_ctr_nonce();\n\n    let plaintext_contributions: str<CONTRIBUTIONS_LEN> = get_contributions_plaintext();\n    let mut plaintext_contributions_vec: BoundedVec<u8, CONTRIBUTIONS_LEN> = BoundedVec::new();\n    plaintext_contributions_vec.extend_from_array(plaintext_contributions.as_bytes());\n\n    let substring_contributions: str<MAX_SUBSTRING_LENGTH> = get_contributions_substring();\n    let mut substring_contributions_vec: BoundedVec<u8, MAX_SUBSTRING_LENGTH> = BoundedVec::new();\n    substring_contributions_vec.extend_from_array(substring_contributions.as_bytes());\n\n    let ciphertext_substring_contributions = generate_ciphertext_with_offset(\n        key,\n        ctr,\n        nonce,\n        substring_contributions_vec,\n        SUBSTRING_OFFSET,\n    );\n}\n\nfn get_test_key_ctr_nonce() -> ([u32; 8], u32, [u32; 3]) {\n    let key: [u32; 8] = [1, 2, 3, 4, 5, 6, 7, 8];\n    let ctr: u32 = 1;\n    let nonce: [u32; 3] = [1, 2, 3];\n    (key, ctr, nonce)\n}\n\nfn get_ownership_plaintext() -> str<OWNERSHIP_LEN> {\n    r#\"{\"data\":{\"viewer\":{\"id\":\"U_xxxxxxxxxx\"}}}xxxxxxxxxxxxxxxxxxxxxxx\"#\n}\n\nfn get_contributions_plaintext() -> str<CONTRIBUTIONS_LEN> {\n    r#\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx{\"data\":{\"repository\":{\"name\":\"xxx\",\"owner\":{\"login\":\"xxx\"},\"defaultBranchRef\":{\"target\":{\"history\":{\"totalCount\":xxx}}}}}}xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"#\n}\n\nfn get_contributions_substring() -> str<MAX_SUBSTRING_LENGTH> {\n    r#\"{\"data\":{\"repository\":{\"name\":\"xxx\",\"owner\":{\"login\":\"xxx\"},\"def\"#\n}\n","path":"/home/runner/work/mono/mono/sentinel_sdk/src/prove/circuits/substring/lib/src/lib.nr"},"56":{"source":"global MAX_U32: u32 = 0xFFFFFFFF;\nglobal WORD_SIZE: u8 = 32;\n\npub fn wrapping_add_32(x: u32, y: u32) -> u32 {\n    std::ops::WrappingAdd::wrapping_add(x, y)\n}\n\npub fn rotl32(x: u32, n_bits: u8) -> u32 {\n    // In Noir, the bit count in a bit-shift operation must fit in a `u8`, hence `n_bits: u8`.\n    let l = x << n_bits & MAX_U32;\n    let r = x >> (WORD_SIZE - n_bits);\n    l | r\n}\n\n#[test(should_fail_with = \"Failed constraint\")]\nfn test_add() {\n    assert_eq(0xFFFFFFFF + 1, 0);\n}\n\n#[test]\nfn test_add_modulo_2_32() {\n    assert_eq(wrapping_add_32(0xFFFFFFFF, 1), 0);\n}\n\n#[test]\nfn test_rotl32_lt_32() {\n    assert_eq(rotl32(0x1000, 4), 0x10000);\n    /*\n        The test was initially asserting: assert_eq(rotl32(0x1000, 4), 0x0001); and was expected to fail.\n        However:\n            - 0x1000 is treated as a 32-bit value: 0x00001000.\n            - Rotating left by 4 bits gives: 0x00010000 (0x10000).\n            This is the correct behavior for 32-bit rotation, unlike the previous incorrect expectation of 0x0001.\n    */\n}\n\n#[test]\nfn test_rotl32() {\n    assert_eq(rotl32(0x00000001, 0), 0x00000001);\n\n    assert_eq(rotl32(0x00000000, 4), 0x00000000);\n    assert_eq(rotl32(0xFFFFFFFF, 4), 0xFFFFFFFF);\n\n    assert_eq(rotl32(0x10000000, 4), 0x00000001);\n    assert_eq(rotl32(0x00000001, 4), 0x00000010);\n}\n","path":"/home/runner/work/mono/mono/sentinel_sdk/src/prove/circuits/substring/lib/src/utils.nr"},"58":{"source":"mod tests;\n\nuse std::runtime::is_unconstrained;\nuse std::hash::keccak::keccakf1600;\n\nglobal BLOCK_SIZE_IN_BYTES: u32 = 136; //(1600 - BITS * 2) / WORD_SIZE;\nglobal WORD_SIZE: u32 = 8; // Limbs are made up of u64s so 8 bytes each.\nglobal LIMBS_PER_BLOCK: u32 = BLOCK_SIZE_IN_BYTES / WORD_SIZE;\nglobal NUM_KECCAK_LANES: u32 = 25;\n\n#[no_predicates]\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32] {\n    assert(N >= message_size);\n\n    // Copy input to block bytes. For that we'll need at least input bytes (N)\n    // but we want it to be padded to a multiple of BLOCK_SIZE_IN_BYTES.\n    let mut block_bytes = [0; ((N / BLOCK_SIZE_IN_BYTES) + 1) * BLOCK_SIZE_IN_BYTES];\n    if is_unconstrained() {\n        for i in 0..message_size {\n            block_bytes[i] = input[i];\n        }\n    } else {\n        for i in 0..N {\n            if i < message_size {\n                block_bytes[i] = input[i];\n            }\n        }\n    }\n\n    //1. format_input_lanes\n    let max_blocks = (N + BLOCK_SIZE_IN_BYTES) / BLOCK_SIZE_IN_BYTES;\n    //maximum number of bytes to hash\n    let real_max_blocks = (message_size + BLOCK_SIZE_IN_BYTES) / BLOCK_SIZE_IN_BYTES;\n    let real_blocks_bytes = real_max_blocks * BLOCK_SIZE_IN_BYTES;\n\n    block_bytes[message_size] = 1;\n    block_bytes[real_blocks_bytes - 1] = 0x80;\n\n    // populate a vector of 64-bit limbs from our byte array\n    let mut sliced_buffer =\n        [0; (((N / BLOCK_SIZE_IN_BYTES) + 1) * BLOCK_SIZE_IN_BYTES) / WORD_SIZE];\n    for i in 0..sliced_buffer.len() {\n        let limb_start = WORD_SIZE * i;\n\n        let mut sliced = 0;\n        let mut v = 1;\n        for k in 0..WORD_SIZE {\n            sliced += v * (block_bytes[limb_start + k] as Field);\n            v *= 256;\n        }\n\n        sliced_buffer[i] = sliced as u64;\n    }\n\n    //2. sponge_absorb\n    let mut state: [u64; NUM_KECCAK_LANES] = [0; NUM_KECCAK_LANES];\n    // When in an unconstrained runtime we can take advantage of runtime loop bounds,\n    // thus allowing us to simplify the loop body.\n    if is_unconstrained() {\n        for i in 0..real_max_blocks {\n            if (i == 0) {\n                for j in 0..LIMBS_PER_BLOCK {\n                    state[j] = sliced_buffer[j];\n                }\n            } else {\n                for j in 0..LIMBS_PER_BLOCK {\n                    state[j] = state[j] ^ sliced_buffer[i * LIMBS_PER_BLOCK + j];\n                }\n            }\n            state = keccakf1600(state);\n        }\n    } else {\n        // `real_max_blocks` is guaranteed to at least be `1`\n        // We peel out the first block as to avoid a conditional inside of the loop.\n        // Otherwise, a dynamic predicate can cause a blowup in a constrained runtime.\n        for j in 0..LIMBS_PER_BLOCK {\n            state[j] = sliced_buffer[j];\n        }\n        state = keccakf1600(state);\n        for i in 1..max_blocks {\n            if i < real_max_blocks {\n                for j in 0..LIMBS_PER_BLOCK {\n                    state[j] = state[j] ^ sliced_buffer[i * LIMBS_PER_BLOCK + j];\n                }\n                state = keccakf1600(state);\n            }\n        }\n    }\n\n    //3. sponge_squeeze\n    let mut result = [0; 32];\n    for i in 0..4 {\n        let lane = state[i] as Field;\n        let lane_le: [u8; 8] = lane.to_le_bytes();\n        for j in 0..8 {\n            result[8 * i + j] = lane_le[j];\n        }\n    }\n    result\n}\n","path":"/home/runner/nargo/github.com/noir-lang/keccak256/v0.1.0/src/keccak256.nr"},"60":{"source":"/*\n\nwhen iterating from 0 to N, validate i < M efficiently\nwe have an array of flags that describe whether entry is valid\nflags start at 1 and at 0 more or less\n\nwe check:\n1. flag starts at 0 or 1\n2. flag transition cannot be 0 -> 1 i.e. new_flag * (1 - old_flag) == 0\n3. flag ends at 0 or 1\n\nthe above validates that only one transition point occurs\nwe still need to test the transition point\n\ntransition happens when we get 1 -> 0 i.e. tx = i * (old_flag * (1 - new_flag))\nin this case, i == M\n\n// o * (1 - n) = o - on\n// n * (1 - o) = n - on\n// i*(o - on) * (1/i) - o + n\n*/\n\n/**\n * @brief helper method that provides an array of Field elements `flags`, where `flags[i] = i < boundary`\n * @description this method is cheaper than querying `i < boundary` for `u16` and `u32` types\n *              cost = 3 gates + 2 gates per iteration \n **/\npub fn get_validity_flags<let N: u32>(boundary: u32) -> [Field; N] {\n    //@Safety: The constraining is happening inside get_validity_flags_inner\n    let flags: [Field; N] = unsafe { __get_validity_flags(boundary) };\n    get_validity_flags_inner(boundary, flags)\n}\n\nunconstrained fn __get_validity_flags<let N: u32>(boundary: u32) -> [Field; N] {\n    let mut result: [Field; N] = [0; N];\n    for i in 0..N {\n        if i < boundary {\n            result[i] = 1;\n        }\n    }\n    result\n}\n\n/**\n * @brief implementation of `get_validity_flags`\n * @description Given an array of `flags`, we apply the following checks to build an inductive proof about the validity of the flags array:\n *              1. the first element `flags[0]` is in the range [0,1]\n *              2. the last element `flags[N-1]` is in the range [0,1]\n *              3. for any two flags `old, new` where `old = flags[i-1], new = flags[i]` and `i>0, i <N`, we validate the following:\n *                  a. if `old` is 0, `new` *cannot* equal 1\n *                  b. if `old` is 1 and `new` is 0, set `transition_index = i`\n *  The value of `transition_index` will equal the value `i` where `i = boundary` (or `N` if `boundary > N`)\n *              4. we finally validate `transition_index == boundary` to prove the location where `flags[i-1] = 1` and `flags[i] = 0`\n *                 aligns with what is expected from testing `i < boundary`\n *  N.B. this method will revert if `boundary > N`\n **/\nfn get_validity_flags_inner<let N: u32>(boundary: u32, flags: [Field; N]) -> [Field; N] {\n    let initial_flag = flags[0];\n    let final_flag = flags[N - 1];\n\n    // check first and last flags are in the range [0, 1]\n    assert(initial_flag * initial_flag == initial_flag);\n    assert(final_flag * final_flag == final_flag);\n\n    let mut transition_index = 0;\n\n    for i in 1..N {\n        let old_flag = flags[i - 1];\n        let new_flag = flags[i];\n        assert(new_flag == old_flag * new_flag);\n\n        // old = a, new = b\n        let idx = (old_flag * (1 - new_flag)) * (i as Field);\n        transition_index = transition_index + idx;\n        std::as_witness(transition_index);\n    }\n\n    assert(transition_index == boundary as Field);\n    flags\n}\n\n#[test]\nfn test_get_validity_flags() {\n    for i in 0..32 {\n        let flags: [Field; 32] = get_validity_flags(i);\n        for j in 0..32 {\n            assert(flags[j] == (j < i) as Field);\n        }\n    }\n}\n\n#[test(should_fail)]\nfn test_get_validity_flags_fail() {\n    let _ = get_validity_flags(33);\n}\n\n#[test(should_fail)]\nfn test_get_validity_flags_bad_index_fail_a() {\n    let bad_flags: [Field; 10] = [1, 1, 1, 0, 0, 0, 1, 0, 0, 0];\n    let _ = get_validity_flags_inner(3, bad_flags);\n}\n#[test(should_fail)]\nfn test_get_validity_flags_bad_index_fail_b() {\n    let bad_flags: [Field; 10] = [1, 1, 1, 1, 0, 0, 0, 0, 0, 0];\n    let _ = get_validity_flags_inner(3, bad_flags);\n}\n\n#[test(should_fail)]\nfn test_get_validity_flags_bad_index_fail_c() {\n    let bad_flags: [Field; 10] = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0];\n    let _ = get_validity_flags_inner(3, bad_flags);\n}\n\n#[test]\nfn test_get_validity_flags_good_index_d() {\n    let bad_flags: [Field; 10] = [1, 1, 1, 0, 0, 0, 0, 0, 0, 0];\n    let _ = get_validity_flags_inner(3, bad_flags);\n}\n\n#[test(should_fail)]\nfn test_get_validity_flags_bad_index_fail_e() {\n    let bad_flags: [Field; 10] = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1];\n    let _ = get_validity_flags_inner(11, bad_flags);\n}\n\n// this test uses bad flags but manipulates transition_index to be satisfiable\n// nevertheless test will fail because our transition test (old * new = new) will fail\n#[test(should_fail)]\nfn test_get_validity_flags_bad_index_fail_f() {\n    let mut bad_flags: [Field; 10] = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n\n    let fake_index_a = 2;\n    let fake_value_a = 100;\n\n    let fake_index_b = 4;\n    // 4 * Y = -2 * X\n    let fake_value_b = (-fake_value_a * fake_index_a) / fake_index_b;\n\n    bad_flags[fake_index_a] = fake_value_a;\n    bad_flags[fake_index_b] = fake_value_b;\n    let _ = get_validity_flags_inner(0, bad_flags);\n}\n","path":"/home/runner/nargo/github.com/noir-lang/noir_json_parser/v0.4.0/src/_comparison_tools/bounds_checker.nr"},"61":{"source":"/**\n * @file helper methods that evaluate comparison operations on Field elements that are known to be of a fixed size (e.g. <2^16)\n **/\npub unconstrained fn get_lt_predicate_f(x: Field, y: Field) -> bool {\n    let a = x as u32;\n    let b = y as u32;\n    let r = a < b;\n    r\n}\n\npub unconstrained fn get_lte_predicate_large(x: Field, y: Field) -> bool {\n    let r = x.lt(y) | (x == y);\n    r\n}\n\npub fn lte_field_240_bit(x: Field, y: Field) -> bool {\n    //@Safety: check the comments below\n    let predicate = unsafe { get_lte_predicate_large(x, y) };\n    let delta = y as Field - x as Field;\n\n    // (x - y) * predicate\n    // if true, y - x >= 0\n    // if false, x <= y is wrong therefore x > y => x - y > 0 => x - y + 1 >= 0\n    // (y - x) * p + (1 - p) * (x - y + 1)\n    // (y - x) * p + x - y + 1 + p * (y - x)\n    let lt_parameter = 2 * (predicate as Field) * delta - predicate as Field - delta + 1;\n    // checks that the bit length of lt_parameter is 240\n    // i.e. checks the sign of lt_parameter\n    lt_parameter.assert_max_bit_size::<240>();\n\n    predicate\n}\n\npub fn assert_lte_240_bit(x: Field, y: Field) {\n    let delta = y as Field - x as Field;\n\n    // (x - y) * predicate\n    // if true, y - x >= 0\n    // if false, x <= y is wrong therefore x > y => x - y > 0 => x - y + 1 >= 0\n    // (y - x) * p + (1 - p) * (x - y + 1)\n    // (y - x) * p + x - y + 1 + p * (y - x)\n    delta.assert_max_bit_size::<240>();\n}\n\npub fn lt_field_16_bit(x: Field, y: Field) -> bool {\n    //@Safety: check the comments below\n    let predicate = unsafe { get_lt_predicate_f(x, y) };\n    let delta = y as Field - x as Field;\n    let lt_parameter = 2 * (predicate as Field) * delta - predicate as Field - delta;\n    // checks that the bit length of lt_parameter is 16\n    // i.e. checks the sign of lt_parameter\n    lt_parameter.assert_max_bit_size::<16>();\n\n    predicate\n}\n\npub fn lt_field_8_bit(x: Field, y: Field) -> bool {\n    //@Safety: check the comments below\n    let predicate = unsafe { get_lt_predicate_f(x, y) };\n    let delta = y as Field - x as Field;\n    let lt_parameter = 2 * (predicate as Field) * delta - predicate as Field - delta;\n    // checks that the bit length of lt_parameter is 8\n    // i.e. checks the sign of lt_parameter\n    lt_parameter.assert_max_bit_size::<8>();\n\n    predicate\n}\n\npub fn assert_gt_240_bit(lhs: Field, rhs: Field) {\n    // lhs > rhs\n    // -> lhs - rhs > 0\n    // -> lhs - rhs - 1 >= 0\n    let diff = lhs - rhs - 1;\n    diff.assert_max_bit_size::<240>();\n}\n\npub fn assert_lt_240_bit(lhs: Field, rhs: Field) {\n    // lhs < rhs\n    // -> rhs - lhs > 0\n    // -> rhs - lhs - 1 >= 0\n    let diff = rhs - lhs - 1;\n    diff.assert_max_bit_size::<240>();\n}\n","path":"/home/runner/nargo/github.com/noir-lang/noir_json_parser/v0.4.0/src/_comparison_tools/lt.nr"},"64":{"source":"global PLO: Field = 0x2833E84879B9709143E1F593F0000001;\nglobal PHI: Field = 0x30644E72E131A029B85045B68181585D;\n\nglobal PLO_200_felt: Field = 0x29B85045B68181585D2833E84879B9709143E1F593F0000001;\nglobal PHI_54_felt: Field = 0x30644E72E131A0;\nglobal TWO_POW_200: Field = 0x100000000000000000000000000000000000000000000000000;\nstruct Slice200 {\n    hihi: u64, // 7 bytes\n    hilo: u64, // 7 bytes\n    lohi: u64, // 7 bytes\n    lolo: u32, // 4 bytes\n}\nglobal PHI_54: u64 = 0x30644E72E131A0;\nglobal PLO_200: Slice200 = Slice200 {\n    hihi: 0x29B85045B68181,\n    hilo: 0x585D2833E84879,\n    lohi: 0xB9709143E1F593,\n    lolo: 0xF0000001,\n};\n\nunconstrained fn __slice_200_bits_from_field(f: Field) -> (Field, Field, bool) {\n    let b: [u8; 32] = f.to_be_bytes();\n\n    let mut res200: Slice200 = Slice200 { hihi: 0, hilo: 0, lohi: 0, lolo: 0 };\n    let mut res54: u64 = 0;\n    for i in 0..7 {\n        res200.hihi <<= 8;\n        res200.hilo <<= 8;\n        res200.lohi <<= 8;\n        res200.hihi += b[i + 7] as u64;\n        res200.hilo += b[i + 14] as u64;\n        res200.lohi += b[i + 21] as u64;\n    }\n    for i in 0..4 {\n        res200.lolo <<= 8;\n        res200.lolo += b[28 + i] as u32;\n    }\n    for i in 0..7 {\n        res54 <<= 8;\n        res54 += b[i] as u64;\n    }\n\n    let mut lo: Field = res200.hihi as Field; // 56 bits\n    lo *= 0x100000000000000; // 56 + 56 bits\n    lo += res200.hilo as Field; // 56 + 56 bits\n    lo *= 0x100000000000000; // 56 + 56 + 56 bits\n    lo += res200.lohi as Field; // 56 + 56 + 56 bits = 168 bits\n    lo *= 0x100000000; // 56 + 56 + 56 + 32 bits = 200 bits?\n    lo += res200.lolo as Field;\n\n    let mut hi = res54 as Field;\n\n    let mut PLO = PLO_200;\n    let mut borrow: bool = false;\n    // p - x\n    borrow = PLO.lolo < res200.lolo;\n    PLO.lohi -= borrow as u64;\n    borrow = PLO.lohi < res200.lohi;\n    PLO.hilo -= borrow as u64;\n    borrow = PLO.hilo < res200.hilo;\n    PLO.hihi -= borrow as u64;\n    borrow = PLO.hihi < res200.hihi;\n    (lo, hi, borrow)\n}\n\npub fn slice_200_bits_from_field(f: Field) -> Field {\n    //@Safety: check the comments below\n    let (lo, hi, borrow) = unsafe { __slice_200_bits_from_field(f) };\n    // checks that lo and hi are the correct slices of f\n    assert(hi * TWO_POW_200 + lo == f);\n    // checks that lo and hi are the correct bit sizes\n    lo.assert_max_bit_size::<200>();\n    hi.assert_max_bit_size::<56>();\n    let lo_diff = PLO_200_felt - lo + (borrow as Field * TWO_POW_200);\n    let hi_diff = PHI_54_felt - hi - borrow as Field;\n    lo_diff.assert_max_bit_size::<200>();\n    hi_diff.assert_max_bit_size::<56>();\n    lo\n}\n","path":"/home/runner/nargo/github.com/noir-lang/noir_json_parser/v0.4.0/src/_string_tools/slice_field.nr"},"65":{"source":"/**\n * @file methods to extract data efficiently from Field elements that represent 31 bytes of packed data\n **/\n\n// #############################################################\n// ### GLOBAL VARIABLES AND LOOKUP TABLES\n// #############################################################\nglobal two_pow_128: Field = 0x100000000000000000000000000000000;\nglobal two_pow_64: Field = 0x10000000000000000;\nglobal two_pow_32: Field = 0x100000000;\nglobal two_pow_16: Field = 0x10000;\n\nglobal path_multipliers_chunk4: [Field; 32] = [\n    /* 0  (00000) */ 0,\n    /* 1  (00001) */ 0,\n    /* 2  (00010) */ 0,\n    /* 3  (00011) */ 0,\n    /* 4  (00100) */ 0,\n    /* 5  (00101) */ 0,\n    /* 6  (00110) */ 0,\n    /* 7  (00111) */ 0,\n    /* 8  (01000) */ 0,\n    /* 9  (01001) */ 0,\n    /* 10 (01010) */ 0,\n    /* 11 (01011) */ 0,\n    /* 12 (01100) */ 0,\n    /* 13 (01101) */ 0,\n    /* 14 (01110) */ 0,\n    /* 15 (01111) */ 0,\n    /* 16 (10000) */ 1,\n    /* 17 (10001) */ 1,\n    /* 18 (10010) */ 1,\n    /* 19 (10011) */ 1,\n    /* 20 (10100) */ 1,\n    /* 21 (10101) */ 1,\n    /* 22 (10110) */ 1,\n    /* 23 (10111) */ 1,\n    /* 24 (11000) */ 1,\n    /* 25 (11001) */ 1,\n    /* 26 (11010) */ 1,\n    /* 27 (11011) */ 1,\n    /* 28 (11100) */ 1,\n    /* 29 (11101) */ 1,\n    /* 30 (11110) */ 1,\n    /* 31 (11111) */ 1,\n];\n\n// this represents an 8 byte chunk. what do we multiply by?\nglobal path_multipliers_chunk3: [Field; 32] = [\n    /* 0  (00000) */ 0,\n    /* 1  (00001) */ 0,\n    /* 2  (00010) */ 0,\n    /* 3  (00011) */ 0,\n    /* 4  (00100) */ 0,\n    /* 5  (00101) */ 0,\n    /* 6  (00110) */ 0,\n    /* 7  (00111) */ 0,\n    /* 8  (01000) */ 1,\n    /* 9  (01001) */ 1,\n    /* 10 (01010) */ 1,\n    /* 11 (01011) */ 1,\n    /* 12 (01100) */ 1,\n    /* 13 (01101) */ 1,\n    /* 14 (01110) */ 1,\n    /* 15 (01111) */ 1,\n    /* 16 (10000) */ 0,\n    /* 17 (10001) */ 0,\n    /* 18 (10010) */ 0,\n    /* 19 (10011) */ 0,\n    /* 20 (10100) */ 0,\n    /* 21 (10101) */ 0,\n    /* 22 (10110) */ 0,\n    /* 23 (10111) */ 0,\n    /* 24 (11000) */ two_pow_128,\n    /* 25 (11001) */ two_pow_128,\n    /* 26 (11010) */ two_pow_128,\n    /* 27 (11011) */ two_pow_128,\n    /* 28 (11100) */ two_pow_128,\n    /* 29 (11101) */ two_pow_128,\n    /* 30 (11110) */ two_pow_128,\n    /* 31 (11111) */ two_pow_128,\n];\n\n// what do we multiply 4 byte chunk by\nglobal path_multipliers_chunk2: [Field; 32] = [\n    /* 0  (00000) */ 0,\n    /* 1  (00001) */ 0,\n    /* 2  (00010) */ 0,\n    /* 3  (00011) */ 0,\n    /* 4  (00100) */ 1,\n    /* 5  (00101) */ 1,\n    /* 6  (00110) */ 1,\n    /* 7  (00111) */ 1,\n    /* 8  (01000) */ 0,\n    /* 9  (01001) */ 0,\n    /* 10 (01010) */ 0,\n    /* 11 (01011) */ 0,\n    /* 12 (01100) */ two_pow_64,\n    /* 13 (01101) */ two_pow_64,\n    /* 14 (01110) */ two_pow_64,\n    /* 15 (01111) */ two_pow_64,\n    /* 16 (10000) */ 0,\n    /* 17 (10001) */ 0,\n    /* 18 (10010) */ 0,\n    /* 19 (10011) */ 0,\n    /* 20 (10100) */ two_pow_128,\n    /* 21 (10101) */ two_pow_128,\n    /* 22 (10110) */ two_pow_128,\n    /* 23 (10111) */ two_pow_128,\n    /* 24 (11000) */ 0,\n    /* 25 (11001) */ 0,\n    /* 26 (11010) */ 0,\n    /* 27 (11011) */ 0,\n    /* 28 (11100) */ two_pow_128 * two_pow_64,\n    /* 29 (11101) */ two_pow_128 * two_pow_64,\n    /* 30 (11110) */ two_pow_128 * two_pow_64,\n    /* 31 (11111) */ two_pow_128 * two_pow_64,\n];\n\n// what do we multiply 2 byte chunk by\nglobal path_multipliers_chunk1: [Field; 32] = [\n    /* 0  (00000) */ 0,\n    /* 1  (00001) */ 0,\n    /* 2  (00010) */ 1,\n    /* 3  (00011) */ 1,\n    /* 4  (00100) */ 0,\n    /* 5  (00101) */ 0,\n    /* 6  (00110) */ two_pow_32,\n    /* 7  (00111) */ two_pow_32,\n    /* 8  (01000) */ 0,\n    /* 9  (01001) */ 0,\n    /* 10 (01010) */ two_pow_64,\n    /* 11 (01011) */ two_pow_64,\n    /* 12 (01100) */ 0,\n    /* 13 (01101) */ 0,\n    /* 14 (01110) */ two_pow_64 * two_pow_32,\n    /* 15 (01111) */ two_pow_64 * two_pow_32,\n    /* 16 (10000) */ 0,\n    /* 17 (10001) */ 0,\n    /* 18 (10010) */ two_pow_128,\n    /* 19 (10011) */ two_pow_128,\n    /* 20 (10100) */ 0,\n    /* 21 (10101) */ 0,\n    /* 22 (10110) */ two_pow_128 * two_pow_32,\n    /* 23 (10111) */ two_pow_128 * two_pow_32,\n    /* 24 (11000) */ 0,\n    /* 25 (11001) */ 0,\n    /* 26 (11010) */ two_pow_128 * two_pow_64,\n    /* 27 (11011) */ two_pow_128 * two_pow_64,\n    /* 28 (11100) */ 0,\n    /* 29 (11101) */ 0,\n    /* 30 (11110) */ two_pow_128 * two_pow_64 * two_pow_32,\n    /* 31 (11111) */ two_pow_128 * two_pow_64 * two_pow_32,\n];\n\n// what do we multiply 1 byte chunk by\nglobal path_multipliers_chunk0: [Field; 32] = [\n    /* 0  (00000) */ 0,\n    /* 1  (00001) */ 1,\n    /* 2  (00010) */ 0,\n    /* 3  (00011) */ two_pow_16,\n    /* 4  (00100) */ 0,\n    /* 5  (00101) */ two_pow_32,\n    /* 6  (00110) */ 0,\n    /* 7  (00111) */ two_pow_16 * two_pow_32,\n    /* 8  (01000) */ 0,\n    /* 9  (01001) */ two_pow_64,\n    /* 10 (01010) */ 0,\n    /* 11 (01011) */ two_pow_64 * two_pow_16,\n    /* 12 (01100) */ 0,\n    /* 13 (01101) */ two_pow_64 * two_pow_32,\n    /* 14 (01110) */ 0,\n    /* 15 (01111) */ two_pow_64 * two_pow_32 * two_pow_16,\n    /* 16 (10000) */ 0,\n    /* 17 (10001) */ two_pow_128,\n    /* 18 (10010) */ 0,\n    /* 19 (10011) */ two_pow_128 * two_pow_16,\n    /* 20 (10100) */ 0,\n    /* 21 (10101) */ two_pow_128 * two_pow_32,\n    /* 22 (10110) */ 0,\n    /* 23 (10111) */ two_pow_128 * two_pow_32 * two_pow_16,\n    /* 24 (11000) */ 0,\n    /* 25 (11001) */ two_pow_128 * two_pow_64,\n    /* 26 (11010) */ 0,\n    /* 27 (11011) */ two_pow_128 * two_pow_64 * two_pow_16,\n    /* 28 (11100) */ 0,\n    /* 29 (11101) */ two_pow_128 * two_pow_64 * two_pow_32,\n    /* 30 (11110) */ 0,\n    /* 31 (11111) */ two_pow_128 * two_pow_64 * two_pow_32 * two_pow_16,\n];\n\n// these are `head_path_multipliers` but in reverse order\nglobal tail_path_multipliers_chunk3: [Field; 32] = [\n    0x0100000000000000000000000000000000,\n    0x0100000000000000000000000000000000,\n    0x0100000000000000000000000000000000,\n    0x0100000000000000000000000000000000,\n    0x0100000000000000000000000000000000,\n    0x0100000000000000000000000000000000,\n    0x0100000000000000000000000000000000,\n    0x0100000000000000000000000000000000,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x01,\n    0x01,\n    0x01,\n    0x01,\n    0x01,\n    0x01,\n    0x01,\n    0x01,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n];\nglobal tail_path_multipliers_chunk2: [Field; 32] = [\n    0x01000000000000000000000000000000000000000000000000,\n    0x01000000000000000000000000000000000000000000000000,\n    0x01000000000000000000000000000000000000000000000000,\n    0x01000000000000000000000000000000000000000000000000,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x0100000000000000000000000000000000,\n    0x0100000000000000000000000000000000,\n    0x0100000000000000000000000000000000,\n    0x0100000000000000000000000000000000,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x010000000000000000,\n    0x010000000000000000,\n    0x010000000000000000,\n    0x010000000000000000,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x01,\n    0x01,\n    0x01,\n    0x01,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n];\nglobal tail_path_multipliers_chunk1: [Field; 32] = [\n    0x0100000000000000000000000000000000000000000000000000000000,\n    0x0100000000000000000000000000000000000000000000000000000000,\n    0x00,\n    0x00,\n    0x01000000000000000000000000000000000000000000000000,\n    0x01000000000000000000000000000000000000000000000000,\n    0x00,\n    0x00,\n    0x010000000000000000000000000000000000000000,\n    0x010000000000000000000000000000000000000000,\n    0x00,\n    0x00,\n    0x0100000000000000000000000000000000,\n    0x0100000000000000000000000000000000,\n    0x00,\n    0x00,\n    0x01000000000000000000000000,\n    0x01000000000000000000000000,\n    0x00,\n    0x00,\n    0x010000000000000000,\n    0x010000000000000000,\n    0x00,\n    0x00,\n    0x0100000000,\n    0x0100000000,\n    0x00,\n    0x00,\n    0x01,\n    0x01,\n    0x00,\n    0x00,\n];\nglobal tail_path_multipliers_chunk0: [Field; 32] = [\n    0x01000000000000000000000000000000000000000000000000000000000000,\n    0x00,\n    0x0100000000000000000000000000000000000000000000000000000000,\n    0x00,\n    0x010000000000000000000000000000000000000000000000000000,\n    0x00,\n    0x01000000000000000000000000000000000000000000000000,\n    0x00,\n    0x0100000000000000000000000000000000000000000000,\n    0x00,\n    0x010000000000000000000000000000000000000000,\n    0x00,\n    0x01000000000000000000000000000000000000,\n    0x00,\n    0x0100000000000000000000000000000000,\n    0x00,\n    0x010000000000000000000000000000,\n    0x00,\n    0x01000000000000000000000000,\n    0x00,\n    0x0100000000000000000000,\n    0x00,\n    0x010000000000000000,\n    0x00,\n    0x01000000000000,\n    0x00,\n    0x0100000000,\n    0x00,\n    0x010000,\n    0x00,\n    0x01,\n    0x00,\n];\n\nglobal LIMB_VALID_PATH: [Field; 35] = [\n    0x000000000, // 0 0 0 0 0 0 0 0 0\n    0x000000001, // 0 0 0 0 0 0 0 0 1\n    0x000000003, // 0 0 0 0 0 0 0 1 1\n    0x000000007, // 0 0 0 0 0 0 1 1 1\n    0x000000008, // 0 0 0 0 0 1 1 1 1\n    0x000000010, // 0 0 0 0 1 0 0 0 0\n    0x000000020, // 0 0 0 1 0 0 0 0 0\n    0x000000040, // 0 0 1 0 0 0 0 0 0\n    0x000000080, // 0 1 0 0 0 0 0 0 0\n    0x000000100, // 1 0 0 0 0 0 0 0 0\n    0x000000200, // 0 0 0 0 0 0 0 1 0\n    0x000000400, // 0 0 0 0 0 0 1 0 0\n    0x000000800, // 0 0 0 0 0 1 0 0 0\n    0x000001000, // 0 0 0 0 1 0 0 0 0\n    0x000002000, // 0 0 0 1 0 0 0 0 0\n    0x000004000, // 0 0 1 0 0 0 0 0 0\n    0x000008000, // 0 1 0 0 0 0 0 0 0\n    0x000010000, // 0 0 0 0 0 0 0 0 1\n    0x000020000, // 0 0 0 0 0 0 0 1 0\n    0x000040000, // 0 0 0 0 0 0 1 0 0\n    0x000080000, // 0 0 0 0 0 1 0 0 0\n    0x000100000, // 0 0 0 0 1 0 0 0 0\n    0x000200000, // 0 0 0 1 0 0 0 0 0\n    0x000400000, // 0 0 1 0 0 0 0 0 0\n    0x000800000, // 0 1 0 0 0 0 0 0 0\n    0x001000000, // 0 0 0 0 0 0 0 0 1\n    0x002000000, // 0 0 0 0 0 0 0 1 0\n    0x004000000, // 0 0 0 0 0 0 1 0 0\n    0x008000000, // 0 0 0 0 0 1 0 0 0\n    0x010000000, // 0 0 0 0 1 0 0 0 0\n    0x020000000, // 0 0 0 1 0 0 0 0 0\n    0x040000000, // 0 0 1 0 0 0 0 0 0\n    0x080000000, // 0 1 0 0 0 0 0 0 0\n    0x100000000,\n    0x200000000,\n];\n\n// these path variables describe the location of a limb in an array\n// e.g. LAST_LIMB_PATH[5] produces 2^{5-1},\n// which is decomposed into 1 0 0 0 0, and the decompositions turned into an array M\n// M[4] = 1 i.e. the limbs[4] should contain the last limb\n// array extends to 0x200000000 which is 2^33 => 33 31 byte limbs = 1,023 bytes\n// this puts a hard limit on the max size of a key that this program supports.\nglobal LAST_LIMB_PATH: [Field; 36] = [\n    0x000000000, // 0 0 0 0 0 0 0 0 0 <-- edge case because sometimes array index is -1, so we offset by 1 TODO explain better\n    0x000000000, // 0 0 0 0 0 0 0 0 1\n    0x000000001, // 0 0 0 0 0 0 0 1 0\n    0x000000003, // 0 0 0 0 0 0 1 0 0\n    0x000000007, // 0 0 0 0 0 1 0 0 0\n    0x00000000f, // 0 0 0 0 1 0 0 0 0\n    0x00000001f, // 0 0 0 1 0 0 0 0 0\n    0x00000003f, // 0 0 1 0 0 0 0 0 0\n    0x00000007f, // 0 1 0 0 0 0 0 0 0\n    0x0000000ff, // 1 0 0 0 0 0 0 0 0\n    0x0000001ff, // 0 0 0 0 0 0 0 1 0\n    0x0000003ff, // 0 0 0 0 0 0 1 0 0\n    0x0000007ff, // 0 0 0 0 0 1 0 0 0\n    0x000000fff, // 0 0 0 0 1 0 0 0 0\n    0x000001fff, // 0 0 0 1 0 0 0 0 0\n    0x000003fff, // 0 0 1 0 0 0 0 0 0\n    0x000007fff, // 0 1 0 0 0 0 0 0 0\n    0x00000ffff, // 0 0 0 0 0 0 0 0 1\n    0x00001ffff, // 0 0 0 0 0 0 0 1 0\n    0x00003ffff, // 0 0 0 0 0 0 1 0 0\n    0x00007ffff, // 0 0 0 0 0 1 0 0 0\n    0x0000fffff, // 0 0 0 0 1 0 0 0 0\n    0x0001fffff, // 0 0 0 1 0 0 0 0 0\n    0x0003fffff, // 0 0 1 0 0 0 0 0 0\n    0x0007fffff, // 0 1 0 0 0 0 0 0 0\n    0x000ffffff, // 0 0 0 0 0 0 0 0 1\n    0x001ffffff, // 0 0 0 0 0 0 0 1 0\n    0x003ffffff, // 0 0 0 0 0 0 1 0 0\n    0x007ffffff, // 0 0 0 0 0 1 0 0 0\n    0x00fffffff, // 0 0 0 0 1 0 0 0 0\n    0x01fffffff, // 0 0 0 1 0 0 0 0 0\n    0x03fffffff, // 0 0 1 0 0 0 0 0 0\n    0x07fffffff, // 0 1 0 0 0 0 0 0 0\n    0x0ffffffff,\n    0x1ffffffff,\n    0x3ffffffff,\n];\n\nglobal INTEGER_UP_TO_62_IS_GREATER_THAN_31: [Field; 63] = [\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n];\nglobal NUM_BYTES_MOD_31_IS_ZERO: [Field; 31] =\n    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\nglobal BYTE_SHIFT: [Field; 32] = [\n    1,\n    0x1000000000000000000000000000000000000000000000000000000000000,\n    0x10000000000000000000000000000000000000000000000000000000000,\n    0x100000000000000000000000000000000000000000000000000000000,\n    0x1000000000000000000000000000000000000000000000000000000,\n    0x10000000000000000000000000000000000000000000000000000,\n    0x100000000000000000000000000000000000000000000000000,\n    0x1000000000000000000000000000000000000000000000000,\n    0x10000000000000000000000000000000000000000000000,\n    0x100000000000000000000000000000000000000000000,\n    0x1000000000000000000000000000000000000000000,\n    0x10000000000000000000000000000000000000000,\n    0x100000000000000000000000000000000000000,\n    0x1000000000000000000000000000000000000,\n    0x10000000000000000000000000000000000,\n    0x100000000000000000000000000000000,\n    0x1000000000000000000000000000000,\n    0x10000000000000000000000000000,\n    0x100000000000000000000000000,\n    0x1000000000000000000000000,\n    0x10000000000000000000000,\n    0x100000000000000000000,\n    0x1000000000000000000,\n    0x10000000000000000,\n    0x100000000000000,\n    0x1000000000000,\n    0x10000000000,\n    0x100000000,\n    0x1000000,\n    0x10000,\n    0x100,\n    1,\n];\n\nglobal PATH_LOOKUP: [[bool; 5]; 32] = [\n    [false, false, false, false, false],\n    [true, false, false, false, false],\n    [false, true, false, false, false],\n    [true, true, false, false, false],\n    [false, false, true, false, false],\n    [true, false, true, false, false],\n    [false, true, true, false, false],\n    [true, true, true, false, false],\n    [false, false, false, true, false],\n    [true, false, false, true, false],\n    [false, true, false, true, false],\n    [true, true, false, true, false],\n    [false, false, true, true, false],\n    [true, false, true, true, false],\n    [false, true, true, true, false],\n    [true, true, true, true, false],\n    [false, false, false, false, true],\n    [true, false, false, false, true],\n    [false, true, false, false, true],\n    [true, true, false, false, true],\n    [false, false, true, false, true],\n    [true, false, true, false, true],\n    [false, true, true, false, true],\n    [true, true, true, false, true],\n    [false, false, false, true, true],\n    [true, false, false, true, true],\n    [false, true, false, true, true],\n    [true, true, false, true, true],\n    [false, false, true, true, true],\n    [true, false, true, true, true],\n    [false, true, true, true, true],\n    [true, true, true, true, true],\n];\n\n// #############################################################\n// ### METHODS\n// #############################################################\n\n/**\n * slice a field that represents bytes [0, ..., 31] into 5 chunks where:\n * chunk[0] = 1 byte\n * chunk[1] = 2 bytes\n * chunk[2] = 4 bytes\n * chunk[3] = 8 bytes\n * chunk[4] = 16 bytes\n *\n * some of the chunks will describe the bytes [0, ..., num_bytes - 1]\n * some of the chunks will describe the bytes [num_bytes, ..., 31]\n **/\nunconstrained fn __slice_field(f: Field, num_bytes: Field) -> [Field; 5] {\n    let head_path = PATH_LOOKUP[num_bytes];\n    let bytes: [u8; 32] = f.to_be_bytes();\n    let bytes = bytes.map(|b: u8| b as Field);\n\n    let mut chunks: [Field; 5] = [0; 5];\n    let mut head_ptr = 1;\n    let mut tail_ptr = num_bytes + 1;\n    if head_path[0] {\n        chunks[0] = bytes[head_ptr] as Field;\n        head_ptr += 1;\n    } else {\n        chunks[0] = bytes[tail_ptr] as Field;\n        tail_ptr += 1;\n    }\n    if head_path[1] {\n        chunks[1] = bytes[head_ptr] * 0x100 + bytes[head_ptr + 1];\n        head_ptr += 2;\n    } else {\n        chunks[1] = bytes[tail_ptr] * 0x100 + bytes[tail_ptr + 1];\n        tail_ptr += 2;\n    }\n    if head_path[2] {\n        chunks[2] = bytes[head_ptr] * 0x1000000\n            + bytes[head_ptr + 1] * 0x10000\n            + bytes[head_ptr + 2] * 0x100\n            + bytes[head_ptr + 3];\n        head_ptr += 4;\n    } else {\n        chunks[2] = bytes[tail_ptr] * 0x1000000\n            + bytes[tail_ptr + 1] * 0x10000\n            + bytes[tail_ptr + 2] * 0x100\n            + bytes[tail_ptr + 3];\n        tail_ptr += 4;\n    }\n    if head_path[3] {\n        chunks[3] = bytes[head_ptr] * 0x100000000000000\n            + bytes[head_ptr + 1] * 0x1000000000000\n            + bytes[head_ptr + 2] * 0x10000000000\n            + bytes[head_ptr + 3] * 0x100000000\n            + bytes[head_ptr + 4] * 0x1000000\n            + bytes[head_ptr + 5] * 0x10000\n            + bytes[head_ptr + 6] * 0x100\n            + bytes[head_ptr + 7];\n        head_ptr += 8;\n    } else {\n        chunks[3] = bytes[tail_ptr] * 0x100000000000000\n            + bytes[tail_ptr + 1] * 0x1000000000000\n            + bytes[tail_ptr + 2] * 0x10000000000\n            + bytes[tail_ptr + 3] * 0x100000000\n            + bytes[tail_ptr + 4] * 0x1000000\n            + bytes[tail_ptr + 5] * 0x10000\n            + bytes[tail_ptr + 6] * 0x100\n            + bytes[tail_ptr + 7];\n        tail_ptr += 8;\n    }\n    if head_path[4] {\n        chunks[4] = bytes[head_ptr] * 0x1000000000000000000000000000000\n            + bytes[head_ptr + 1] * 0x10000000000000000000000000000\n            + bytes[head_ptr + 2] * 0x100000000000000000000000000\n            + bytes[head_ptr + 3] * 0x1000000000000000000000000\n            + bytes[head_ptr + 4] * 0x10000000000000000000000\n            + bytes[head_ptr + 5] * 0x100000000000000000000\n            + bytes[head_ptr + 6] * 0x1000000000000000000\n            + bytes[head_ptr + 7] * 0x10000000000000000\n            + bytes[head_ptr + 8] * 0x100000000000000\n            + bytes[head_ptr + 9] * 0x1000000000000\n            + bytes[head_ptr + 10] * 0x10000000000\n            + bytes[head_ptr + 11] * 0x100000000\n            + bytes[head_ptr + 12] * 0x1000000\n            + bytes[head_ptr + 13] * 0x10000\n            + bytes[head_ptr + 14] * 0x100\n            + bytes[head_ptr + 15];\n    } else {\n        chunks[4] = bytes[tail_ptr] * 0x1000000000000000000000000000000\n            + bytes[tail_ptr + 1] * 0x10000000000000000000000000000\n            + bytes[tail_ptr + 2] * 0x100000000000000000000000000\n            + bytes[tail_ptr + 3] * 0x1000000000000000000000000\n            + bytes[tail_ptr + 4] * 0x10000000000000000000000\n            + bytes[tail_ptr + 5] * 0x100000000000000000000\n            + bytes[tail_ptr + 6] * 0x1000000000000000000\n            + bytes[tail_ptr + 7] * 0x10000000000000000\n            + bytes[tail_ptr + 8] * 0x100000000000000\n            + bytes[tail_ptr + 9] * 0x1000000000000\n            + bytes[tail_ptr + 10] * 0x10000000000\n            + bytes[tail_ptr + 11] * 0x100000000\n            + bytes[tail_ptr + 12] * 0x1000000\n            + bytes[tail_ptr + 13] * 0x10000\n            + bytes[tail_ptr + 14] * 0x100\n            + bytes[tail_ptr + 15];\n    }\n\n    chunks\n}\n\nunconstrained fn __divmod(numerator: Field, denominator: Field) -> (Field, Field) {\n    let quotient = numerator as u32 / denominator as u32;\n    let remainder = numerator as u32 % denominator as u32;\n    (quotient as Field, remainder as Field)\n}\n\n/**\n * @brief cheeky divmod method for dividing a u16 by 31\n *        we know the quotient will fit into a 14 bit range check which will save us some fractional gates\n **/\nfn divmod_31(numerator: Field) -> (Field, Field) {\n    //@Safety: we check the bit lengths of qf and rf and their relation to the numerator with assertions later\n    let (quotient, remainder) = unsafe { __divmod(numerator, 31) };\n\n    let qf = quotient as Field;\n    let rf = remainder as Field;\n\n    // note: these range checks are because we know the denominator is 31\n    // TODO: need more checks, atm remainder could equal 31\n    qf.assert_max_bit_size::<14>();\n    rf.assert_max_bit_size::<5>();\n\n    // n / d = q\n    // d * q + r = n\n    assert(qf * 31 as Field + rf == numerator as Field);\n    (quotient, remainder)\n}\n\n/**\n * @brief converts a 16 bit value into 16 fake bools (Field elements that are 0 or 1)\n **/\nunconstrained fn decompose(val: Field) -> [Field; 16] {\n    let mut r: [Field; 16] = [0; 16];\n\n    let mut it = val as u32;\n    for i in 0..16 {\n        r[i] = (it & 1) as Field;\n        it >>= 1;\n    }\n    r\n}\n\n// 5 gates?\npub fn get_last_limb_path<let OutputFields: u32>(last_limb_index: Field) -> [Field; OutputFields] {\n    // TODO we offset by 1 explain why (0 byte length produces 0 - 1 which = invalid array index. we just add 1 and increase array length by 1 to compensate)\n    let path = LAST_LIMB_PATH[last_limb_index + 1]; // 2\n    //@Safety: check the comments below\n    let path_valid_bits = unsafe { decompose(path) };\n    let mut path_valid_sum: Field = 0;\n    let mut path_valid_output: [Field; OutputFields] = [0; OutputFields];\n    for i in 0..OutputFields {\n        // we check that the path valid bits are binary\n        assert(path_valid_bits[i] * path_valid_bits[i] - path_valid_bits[i] == 0);\n        path_valid_sum += (path_valid_bits[i] * (1 << i as u8) as Field);\n        path_valid_output[i] = path_valid_bits[i];\n    }\n    // we check that the path valid bits sum to the path\n    assert(path_valid_sum == path);\n    path_valid_output\n}\n\n/**\n * @brief slice a Field `f`, that represents 31-bytes, into two outputs `head, tail`\n *        where `head = f.slice(0, num_bytes)`, `tail = f.slice(num_bytes, 31)`\n * @details cost 46 gates\n **/\npub fn slice_field(f: Field, num_bytes: Field) -> (Field, Field) {\n    //@Safety: we check the bit lengths of the chunks with assertions later\n    let chunks = unsafe { __slice_field(f, num_bytes) };\n    chunks[0].assert_max_bit_size::<8>(); // 1.25 gates\n    chunks[1].assert_max_bit_size::<16>(); // 1.5 gates\n    chunks[2].assert_max_bit_size::<32>(); // 1.75 gates\n    chunks[3].assert_max_bit_size::<64>(); // 3.25 gates\n    chunks[4].assert_max_bit_size::<128>(); // 7.5 gates\n    let mut head: Field = 0;\n    let mut tail: Field = 0;\n\n    // 15 gates\n    let temp = path_multipliers_chunk4[num_bytes];\n    head = chunks[4] * temp;\n    std::as_witness(head);\n    head += chunks[3] * path_multipliers_chunk3[num_bytes];\n    std::as_witness(head);\n    head += chunks[2] * path_multipliers_chunk2[num_bytes];\n    std::as_witness(head);\n    head += chunks[1] * path_multipliers_chunk1[num_bytes];\n    std::as_witness(head);\n    head += chunks[0] * path_multipliers_chunk0[num_bytes];\n\n    // 13 gates\n    tail = chunks[4] * (1 - temp);\n    std::as_witness(tail);\n    tail += chunks[3] * tail_path_multipliers_chunk3[num_bytes];\n    std::as_witness(tail);\n    tail += chunks[2] * tail_path_multipliers_chunk2[num_bytes];\n    std::as_witness(tail);\n    tail += chunks[1] * tail_path_multipliers_chunk1[num_bytes];\n    std::as_witness(tail);\n    tail += chunks[0] * tail_path_multipliers_chunk0[num_bytes];\n    std::as_witness(tail);\n\n    // 3 gates\n    let total = tail + head * BYTE_SHIFT[num_bytes];\n    assert(total == f);\n\n    // total 46.25 gates\n    (head, tail)\n}\n\n/**\n * @brief Given an array of fields that pack 31 bytes, return an array that slices the packed byte array at a given index for a given number of bytes\n * @description Some serious dark black magic nonsense going on here. TODO: document\n **/\npub fn slice_fields<let InputFields: u32, let OutputFields: u32>(\n    data: [Field; InputFields],\n    start_byte: Field,\n    num_bytes: Field,\n) -> [Field; OutputFields] {\n    // 3.5\n    let (start_index, start_mod_31) = divmod_31(start_byte);\n    let num_underflow_bytes = start_mod_31;\n    // 3.5, 7\n    let (num_bytes_div_31, num_bytes_mod_31) = divmod_31(num_bytes);\n\n    // 2, 9\n    let num_bytes_mod_31_is_0 = NUM_BYTES_MOD_31_IS_ZERO[num_bytes_mod_31];\n    // 2, 11\n    let num_bytes_div_31_is_0 = NUM_BYTES_MOD_31_IS_ZERO[num_bytes_div_31];\n\n    // 1, 12\n    let lookup = (-num_bytes_div_31_is_0 * num_bytes) - start_mod_31 + 62;\n    std::as_witness(lookup);\n    // 3, 15\n    let bytes_fit_into_limb = INTEGER_UP_TO_62_IS_GREATER_THAN_31[lookup] * num_bytes_div_31_is_0;\n    std::as_witness(bytes_fit_into_limb);\n\n    // 2, 17\n    let num_unused_bytes_in_start_limb =\n        (num_bytes + start_mod_31 - 31) * bytes_fit_into_limb + (31 - start_mod_31);\n    std::as_witness(num_unused_bytes_in_start_limb);\n    let num_remaining_bytes = num_bytes - num_unused_bytes_in_start_limb;\n\n    // 4.5, 21.5\n    let mut (num_whole_limbs, num_overflow_bytes) = divmod_31(num_remaining_bytes);\n    // 44, 65.5\n    let (_, tail) = slice_field(data[start_index], num_underflow_bytes);\n\n    let mut previous = tail;\n\n    let mut result = [0; OutputFields];\n\n    // 4, 69.5\n    let extra_head_section = INTEGER_UP_TO_62_IS_GREATER_THAN_31[num_overflow_bytes - start_mod_31\n        + 31]\n        * (1 - bytes_fit_into_limb);\n\n    // 1, 70.5\n    let index_of_output_limb: Field = (num_bytes_div_31 - num_bytes_mod_31_is_0);\n    // 5, 75.5\n    let path_valid_output: [Field; OutputFields] = get_last_limb_path(index_of_output_limb);\n\n    // 2, 77.5\n    let tail_shift = BYTE_SHIFT[num_unused_bytes_in_start_limb];\n\n    // 51, 128.5\n    for i in 0..(OutputFields - 1) {\n        // 0\n        let slice_valid = path_valid_output[i];\n        // 1\n        let data_index = (start_index + 1 + i as Field);\n        // 2, 3\n        let input_slice = data[data_index];\n        // 44, 47\n        let (head, tail) = slice_field(input_slice, num_underflow_bytes);\n        // 1, 48\n        let combined = previous * tail_shift + head;\n        // 1, 49\n        result[i] = combined * slice_valid;\n        // 2, 51\n        previous = (tail - previous) * slice_valid + previous;\n    }\n\n    // 2, 130.5\n    let slice_size = (num_bytes + start_mod_31) * bytes_fit_into_limb + num_overflow_bytes;\n\n    // 1, 131.5\n    let use_previous_for_last_limb: Field = extra_head_section + bytes_fit_into_limb;\n\n    // 1, 132.5\n    let mut index_of_overflow_limb = start_index + num_whole_limbs + 1;\n    // 2, 134.5\n    let last_limb_from_data = data[index_of_overflow_limb];\n    // 2, 136.5\n    let slice_source =\n        (previous - last_limb_from_data) * use_previous_for_last_limb + last_limb_from_data;\n\n    // 44, 180.5\n    let (head, _) = slice_field(slice_source, slice_size);\n\n    // 3, 183.5\n    let previous_shift = BYTE_SHIFT[31 - num_overflow_bytes]; // could save 1 gate by making different shift table\n    // 2, 185.5\n    let last_limb_shift = BYTE_SHIFT[num_bytes_mod_31];\n    // 1, 186.5\n    let mut last_limb = (previous * previous_shift);\n    std::as_witness(last_limb);\n    // 1, 187.5\n    last_limb = last_limb * (-use_previous_for_last_limb) + last_limb + head;\n    std::as_witness(last_limb);\n    // 1, 188.5\n    last_limb = last_limb * last_limb_shift;\n    std::as_witness(last_limb);\n\n    let mut path: [Field; OutputFields] = [0; OutputFields];\n    // 2, 190.5\n    for i in 1..OutputFields {\n        path[i] = path_valid_output[i] * -path_valid_output[i - 1] + path_valid_output[i - 1];\n    }\n    // 1, 191.5\n    path[0] = (1 - path_valid_output[0]);\n\n    // 4, 195.5\n    // actual valud = 182, missing gates?\n    for i in 0..OutputFields {\n        // 2\n        result[i] = (last_limb - result[i]) * path[i] + result[i];\n        // std::as_witness(result[i]);\n    }\n    // actual value = 182?\n    result\n}\n\nmod test {\n    use crate::_string_tools::slice_packed_field::slice_field;\n    use crate::_string_tools::slice_packed_field::slice_fields;\n\n    unconstrained fn build_slices_for_test<let N: u32>(\n        bytes: [u8; N],\n        start: u32,\n        num_bytes: u32,\n    ) -> [Field; 3] {\n        let mut slices: [Field; 3] = [0; 3];\n        for i in 0..3 {\n            for k in 0..31 {\n                let mut idx = i * 31 + k;\n                slices[i] *= 0x100;\n                if (idx < num_bytes) {\n                    slices[i] += bytes[idx + start] as Field;\n                }\n            }\n        }\n        slices\n    }\n\n    #[test]\n    fn test_slice_fields_nolength() {\n        let text: [u8; 1405] = \"Charlie is genius, right. He's made from a million pieces of old bubble gum. Imagine that! In the summer of 1976, on his way home from an Alice Cooper concert, Charlie started to melt onto the pavement. It was too hot in L.A., and he melted like a pink bitch. Luckily though, there was Eric Phillips, a local crocodile who dabbled in black magic. He took pity on Charlie and scraped him off the floor with a pair of fish slicers. He poured him into an antique soup ladle, and boarded his magic carpet. Destination: Alaska! Eric Phillips decided to refreeze Charlie, but in his cold-blooded reptilian haste, he refroze him into to the shape of a Hoover. Charlie wasn't fazed though, he just zoomed about the place, sucking up Inuits. Ha ha! Oh. The Inuits didn't mind; they loved it in Charlie's pink, tight warm belly pouch, and they refused to come out. Charlie said, \\\"I'm cool with that,\\\" and set fire to a posh hammer to make it official. he downside was that the Inuits suffocated immediately. It was air-tight in there. Charlie panicked and fired the tiny Inuit bullets into Eric's crocodile peepers. The green shape was frozen. After a quick drink, Charlie stole Eric Phillips's magic carpet and left for Seattle. Charlie was racked with guilt: he'd killed 50 Inuits, noone needs that. He decided to spend the rest of his life putting small hairstyles onto boots, monkey nuts, trumpets and spanners.\"\n            .as_bytes();\n        println(f\"text = {text}\");\n        let mut slices: [Field; 46 + 3] = [0; 46 + 3];\n        for i in 0..46 {\n            for j in 0..31 {\n                let mut idx = i * 31 + j;\n                slices[i] *= 0x100;\n                if (idx < 1405) {\n                    slices[i] += text[idx] as Field;\n                }\n            }\n        }\n        // let start_byte = 26;\n        let num_bytes = 0;\n        let start_byte: u32 = 0;\n        //@Safety: this is a test\n        let mut expected_slices: [Field; 3] =\n            unsafe { build_slices_for_test(text, start_byte, num_bytes) };\n        let result_slices: [Field; 3] =\n            slice_fields(slices, start_byte as Field, num_bytes as Field);\n        assert(result_slices == expected_slices);\n    }\n\n    #[test]\n    fn test_slice_fields() {\n        let text: [u8; 1405] = \"Charlie is genius, right. He's made from a million pieces of old bubble gum. Imagine that! In the summer of 1976, on his way home from an Alice Cooper concert, Charlie started to melt onto the pavement. It was too hot in L.A., and he melted like a pink bitch. Luckily though, there was Eric Phillips, a local crocodile who dabbled in black magic. He took pity on Charlie and scraped him off the floor with a pair of fish slicers. He poured him into an antique soup ladle, and boarded his magic carpet. Destination: Alaska! Eric Phillips decided to refreeze Charlie, but in his cold-blooded reptilian haste, he refroze him into to the shape of a Hoover. Charlie wasn't fazed though, he just zoomed about the place, sucking up Inuits. Ha ha! Oh. The Inuits didn't mind; they loved it in Charlie's pink, tight warm belly pouch, and they refused to come out. Charlie said, \\\"I'm cool with that,\\\" and set fire to a posh hammer to make it official. he downside was that the Inuits suffocated immediately. It was air-tight in there. Charlie panicked and fired the tiny Inuit bullets into Eric's crocodile peepers. The green shape was frozen. After a quick drink, Charlie stole Eric Phillips's magic carpet and left for Seattle. Charlie was racked with guilt: he'd killed 50 Inuits, noone needs that. He decided to spend the rest of his life putting small hairstyles onto boots, monkey nuts, trumpets and spanners.\"\n            .as_bytes();\n        println(f\"text = {text}\");\n        let mut slices: [Field; 46 + 3] = [0; 46 + 3];\n        for i in 0..46 {\n            for j in 0..31 {\n                let mut idx = i * 31 + j;\n                slices[i] *= 0x100;\n                if (idx < 1405) {\n                    slices[i] += text[idx] as Field;\n                }\n            }\n        }\n        // let start_byte = 26;\n        let byte_sizes: [u32; 10] = [0, 1, 5, 30, 31, 32, 47, 61, 62, 90];\n\n        let byte_positions: [u32; 18] =\n            [0, 1, 14, 15, 16, 20, 28, 29, 30, 31, 32, 33, 38, 40, 55, 60, 61, 62];\n\n        for i in 0..10 {\n            let num_bytes = byte_sizes[i];\n            for j in 0..18 {\n                let start_byte: u32 = byte_positions[j];\n                let mut expected_slices: [Field; 3] =\n                //@Safety: this is a test\n                    unsafe { build_slices_for_test(text, start_byte, num_bytes) };\n                let result_slices: [Field; 3] =\n                //@Safety: this is a test\n                    unsafe { slice_fields(slices, start_byte as Field, num_bytes as Field) };\n                assert(result_slices == expected_slices);\n            }\n\n            for j in 0..18 {\n                let start_byte: u32 = text.len() - num_bytes - byte_positions[j];\n                let mut expected_slices: [Field; 3] =\n                //@Safety: this is a test\n                    unsafe { build_slices_for_test(text, start_byte, num_bytes) };\n                let result_slices: [Field; 3] =\n                    slice_fields(slices, start_byte as Field, num_bytes as Field);\n                assert(result_slices == expected_slices);\n            }\n        }\n    }\n\n    #[test]\n    fn test_slice_field() {\n        let input = 0xffeebbccbbaa99887766554433221100112233445566778899aabbccddeeff;\n\n        let input_bytes: [u8; 32] = input.to_be_bytes();\n\n        for i in 0..32 {\n            println(f\"i = {i}\");\n            let num_bytes = i as Field;\n            let (head, tail) = slice_field(input, num_bytes);\n            let mut expected_head: Field = 0;\n            let mut expected_tail: Field = 0;\n            for j in 0..num_bytes as u32 {\n                expected_head *= 0x100;\n                expected_head += input_bytes[j + 1] as Field;\n            }\n            for j in 0..(31 - num_bytes as u32) {\n                expected_tail *= 0x100;\n                expected_tail += input_bytes[j as Field + num_bytes + 1] as Field;\n            }\n            assert(expected_head == head);\n            assert(expected_tail == tail);\n        }\n        let (head, tail) = slice_field(input, 11);\n        let head_expected = 0xffeebbccbbaa9988776655;\n        let tail_expected = 0x4433221100112233445566778899aabbccddeeff;\n        assert(head_expected == head);\n        assert(tail_expected == tail);\n    }\n}\n","path":"/home/runner/nargo/github.com/noir-lang/noir_json_parser/v0.4.0/src/_string_tools/slice_packed_field.nr"},"66":{"source":"use crate::_string_tools::slice_packed_field::slice_fields;\n\nstruct StringChopper<let NeedlePackedFields: u32> {}\n\nimpl<let NeedlePackedFields: u32> StringChopper<NeedlePackedFields> {\n    fn slice_string<let StringBytes: u32, let HaystackPackedFields: u32>(\n        _: Self,\n        haystack: [Field; HaystackPackedFields],\n        start_bytes: Field,\n        num_bytes: Field,\n    ) -> [u8; StringBytes] {\n        let mut parsed_string: [u8; StringBytes] = [0; StringBytes];\n\n        let sliced: [Field; NeedlePackedFields] = slice_fields(haystack, start_bytes, num_bytes);\n\n        let sliced_bytes = sliced.map(|x: Field| {\n            let r: [u8; 31] = x.to_be_bytes();\n            r\n        });\n\n        let num_slices = StringBytes / 31;\n        let overflow = StringBytes % 31;\n        for i in 0..num_slices {\n            for j in 0..31 {\n                parsed_string[i * 31 + j] = sliced_bytes[i][j];\n            }\n        }\n        for j in 0..overflow {\n            parsed_string[num_slices * 31 + j] = sliced_bytes[num_slices][j];\n        }\n        parsed_string\n    }\n}\n","path":"/home/runner/nargo/github.com/noir-lang/noir_json_parser/v0.4.0/src/_string_tools/string_chopper.nr"},"74":{"source":"use crate::_comparison_tools::lt::lt_field_16_bit;\nuse crate::enums::Layer::{ARRAY_LAYER, OBJECT_LAYER};\nuse crate::enums::Token::NUMERIC_TOKEN;\nuse crate::getters::JSONValue;\nuse crate::json::JSON;\nuse crate::json_entry::JSONEntry;\nuse crate::json_tables::ASCII_TO_NUMBER;\n\nglobal U64_LENGTH_AS_BASE10_STRING: u32 = 20;\nglobal NUMBER_OFFSET_SHIFT: [Field; 21] = [\n    100000000000000000000,\n    10000000000000000000,\n    1000000000000000000,\n    100000000000000000,\n    10000000000000000,\n    1000000000000000,\n    100000000000000,\n    10000000000000,\n    1000000000000,\n    100000000000,\n    10000000000,\n    1000000000,\n    100000000,\n    10000000,\n    1000000,\n    100000,\n    10000,\n    1000,\n    100,\n    10,\n    1,\n];\n\nfn extract_number_from_array(arr: [u8; U64_LENGTH_AS_BASE10_STRING], json_length: Field) -> u64 {\n    let mut parsed_number: Field = 0;\n    for i in 0..U64_LENGTH_AS_BASE10_STRING {\n        parsed_number *= 10;\n\n        let value = ASCII_TO_NUMBER[arr[i]] as Field;\n        parsed_number += value;\n    }\n    parsed_number /= NUMBER_OFFSET_SHIFT[json_length];\n    parsed_number as u64\n}\n\n/**\n * @brief getter methods for extracting numeric values out of a JSON struct\n * @note numeric values must fit into a `u64` type.\n *       decimal values and scientific notation are not yet supported\n **/\nimpl<let NumBytes: u32, let NumPackedFields: u32, let MaxNumTokens: u32, let MaxNumValues: u32, let MaxKeyFields: u32> JSON<NumBytes, NumPackedFields, MaxNumTokens, MaxNumValues, MaxKeyFields> {\n\n    /**\n     * @brief if the root JSON is an object, extract a numeric value given by `key`\n     * @description returns an Option<u64> which will be null if the key does not exist\n     **/\n    fn get_number<let KeyBytes: u32>(self, key: [u8; KeyBytes]) -> Option<u64> {\n        let (exists, entry) = self.get_json_entry(key);\n        assert(\n            (entry.entry_type - NUMERIC_TOKEN) * exists as Field == 0,\n            \"get_number: entry exists but is not a number!\",\n        );\n        let mut parsed_string: [u8; U64_LENGTH_AS_BASE10_STRING] = self.extract_string_entry(entry);\n\n        Option {\n            _is_some: exists,\n            _value: extract_number_from_array(parsed_string, entry.json_length),\n        }\n    }\n\n    /**\n     * @brief if the root JSON is an object, extract a u64 value given by `key`\n     * @description will revert if the number does not exist\n     **/\n    fn get_number_unchecked<let KeyBytes: u32>(self, key: [u8; KeyBytes]) -> u64 {\n        let entry = self.get_json_entry_unchecked(key);\n        assert(\n            entry.entry_type == NUMERIC_TOKEN,\n            \"get_number_unchecked: entry exists but is not a number!\",\n        );\n        let mut parsed_string: [u8; U64_LENGTH_AS_BASE10_STRING] = self.extract_string_entry(entry);\n\n        extract_number_from_array(parsed_string, entry.json_length)\n    }\n\n    /**\n     * @brief same as `get_number` for where the key length may be less than KeyBytes\n     **/\n    fn get_number_var<let KeyBytes: u32>(self, key: BoundedVec<u8, KeyBytes>) -> Option<u64> {\n        let (exists, entry) = self.get_json_entry_var(key);\n        assert(\n            (entry.entry_type - NUMERIC_TOKEN) * exists as Field == 0,\n            \"get_number: entry exists but is not a number!\",\n        );\n        let mut parsed_string: [u8; U64_LENGTH_AS_BASE10_STRING] = self.extract_string_entry(entry);\n\n        Option {\n            _is_some: exists,\n            _value: extract_number_from_array(parsed_string, entry.json_length),\n        }\n    }\n\n    /**\n     * @brief same as `get_number_unchecked` for where the key length may be less than KeyBytes\n     **/\n    fn get_number_unchecked_var<let KeyBytes: u32>(self, key: BoundedVec<u8, KeyBytes>) -> u64 {\n        let entry = self.get_json_entry_unchecked_var(key);\n        assert(\n            entry.entry_type == NUMERIC_TOKEN,\n            \"get_number_unchecked: entry exists but is not a number!\",\n        );\n        let mut parsed_string: [u8; U64_LENGTH_AS_BASE10_STRING] = self.extract_string_entry(entry);\n\n        extract_number_from_array(parsed_string, entry.json_length)\n    }\n\n    /**\n     * @brief if the root JSON is an array, extract a numeric value given by the position of the target in the source array\n     * @description returns an Option<u64> which will be null if the number does not exist\n     **/\n    fn get_number_from_array(self, array_index: Field) -> Option<u64> {\n        assert(\n            self.layer_type_of_root == ARRAY_LAYER,\n            \"can only acceess array elements from array\",\n        );\n\n        let parent_entry: JSONEntry =\n            self.json_entries_packed[self.root_index_in_transcript].into();\n\n        let valid = lt_field_16_bit(array_index, parent_entry.num_children);\n        let entry_index = (parent_entry.child_pointer + array_index) * valid as Field;\n\n        let entry: JSONEntry = self.json_entries_packed[entry_index].into();\n\n        assert(\n            (entry.entry_type - NUMERIC_TOKEN) * valid as Field == 0,\n            \"get_number: entry exists but is not a number!\",\n        );\n\n        let mut parsed_string: [u8; U64_LENGTH_AS_BASE10_STRING] = self.extract_string_entry(entry);\n        let result = extract_number_from_array(parsed_string, entry.json_length);\n\n        Option { _is_some: valid, _value: result }\n    }\n\n    /**\n     * @brief if the root JSON is an array, extract a numeric value given by the position of the target in the source array\n     * @description will revert if the number does not exist\n     **/\n    fn get_number_from_array_unchecked(self, array_index: Field) -> u64 {\n        assert(\n            self.layer_type_of_root == ARRAY_LAYER,\n            \"can only acceess array elements from array\",\n        );\n\n        let parent_entry: JSONEntry =\n            self.json_entries_packed[self.root_index_in_transcript].into();\n\n        let valid = lt_field_16_bit(array_index, parent_entry.num_children);\n        assert(valid, \"array overflow\");\n        let entry_index = (parent_entry.child_pointer + array_index);\n\n        let entry: JSONEntry = self.json_entries_packed[entry_index].into();\n\n        assert(entry.entry_type == NUMERIC_TOKEN, \"get_number: entry exists but is not a number!\");\n\n        let mut parsed_string: [u8; U64_LENGTH_AS_BASE10_STRING] = self.extract_string_entry(entry);\n        extract_number_from_array(parsed_string, entry.json_length)\n    }\n}\n","path":"/home/runner/nargo/github.com/noir-lang/noir_json_parser/v0.4.0/src/get_number.nr"},"75":{"source":"use crate::_comparison_tools::lt::lt_field_16_bit;\nuse crate::enums::Layer::{ARRAY_LAYER, OBJECT_LAYER};\nuse crate::enums::Token::END_OBJECT_TOKEN;\nuse crate::getters::JSONValue;\nuse crate::json::JSON;\nuse crate::json_entry::JSONEntry;\n\n/**\n * @brief getter methods for extracting object types out of a JSON struct\n **/\nimpl<let NumBytes: u32, let NumPackedFields: u32, let MaxNumTokens: u32, let MaxNumValues: u32, let MaxKeyFields: u32> JSON<NumBytes, NumPackedFields, MaxNumTokens, MaxNumValues, MaxKeyFields> {\n\n    /**\n     * @brief if the root JSON is an object, extract a child object given by `key`\n     * @description returns an Option<JSON> where, if the object exists, the JSON object will have the requested object as its root value  \n     **/\n    fn get_object<let KeyBytes: u32>(self, key: [u8; KeyBytes]) -> Option<Self> {\n        assert(self.layer_type_of_root != ARRAY_LAYER, \"cannot extract array elements via a key\");\n\n        let (exists, key_index) = self.key_exists_impl(key);\n        let entry: JSONEntry = self.json_entries_packed[key_index].into();\n        assert(\n            (entry.entry_type - END_OBJECT_TOKEN) * exists as Field == 0,\n            \"get_object: entry exists but is not an object!\",\n        );\n\n        let mut r = self;\n        r.layer_type_of_root = entry.parent_index;\n        r.root_id = entry.id;\n        r.layer_type_of_root = OBJECT_LAYER;\n        r.root_index_in_transcript = key_index;\n        Option { _is_some: exists, _value: r }\n    }\n\n    /**\n     * @brief if the root JSON is an object, extract a child object given by `key`\n     * @description will revert if the requested object does not exist\n     **/\n    fn get_object_unchecked<let KeyBytes: u32>(self, key: [u8; KeyBytes]) -> Self {\n        assert(self.layer_type_of_root != ARRAY_LAYER, \"cannot extract array elements via a key\");\n        let (entry, key_index) = self.get_json_entry_unchecked_with_key_index(key);\n        let entry: JSONEntry = self.json_entries_packed[key_index].into();\n        assert(\n            entry.entry_type == END_OBJECT_TOKEN,\n            \"get_object: entry exists but is not an object!\",\n        );\n\n        let mut r = self;\n        r.layer_type_of_root = entry.parent_index;\n        r.root_id = entry.id;\n        r.layer_type_of_root = OBJECT_LAYER;\n        r.root_index_in_transcript = key_index;\n        r\n    }\n\n    /**\n     * @brief same as `get_object` for where the key length may be less than KeyBytes\n     **/\n    fn get_object_var<let KeyBytes: u32>(self, key: BoundedVec<u8, KeyBytes>) -> Option<Self> {\n        assert(self.layer_type_of_root != ARRAY_LAYER, \"cannot extract array elements via a key\");\n\n        let (exists, key_index) = self.key_exists_impl_var(key);\n        let entry: JSONEntry = self.json_entries_packed[key_index].into();\n        assert(\n            (entry.entry_type - END_OBJECT_TOKEN) * exists as Field == 0,\n            \"get_object: entry exists but is not an object!\",\n        );\n\n        let mut r = self;\n        r.layer_type_of_root = entry.parent_index;\n        r.root_id = entry.id;\n        r.layer_type_of_root = OBJECT_LAYER;\n        r.root_index_in_transcript = key_index;\n        Option { _is_some: exists, _value: r }\n    }\n\n    /**\n     * @brief same as `get_object_unchecked` for where the key length may be less than KeyBytes\n     **/\n    fn get_object_unchecked_var<let KeyBytes: u32>(self, key: BoundedVec<u8, KeyBytes>) -> Self {\n        assert(self.layer_type_of_root != ARRAY_LAYER, \"cannot extract array elements via a key\");\n        let (entry, key_index) = self.get_json_entry_unchecked_with_key_index_var(key);\n        let entry: JSONEntry = self.json_entries_packed[key_index].into();\n        assert(\n            entry.entry_type == END_OBJECT_TOKEN,\n            \"get_object: entry exists but is not an object!\",\n        );\n\n        let mut r = self;\n        r.layer_type_of_root = entry.parent_index;\n        r.root_id = entry.id;\n        r.layer_type_of_root = OBJECT_LAYER;\n        r.root_index_in_transcript = key_index;\n        r\n    }\n\n    /**\n     * @brief if the root JSON is an array, extract an object given by the position of the target in the source array\n     * @description returns an Option<JSON> where, if the object exists, the JSON object will have the requested object as its root value  \n     **/\n    fn get_object_from_array(self, array_index: Field) -> Option<Self> {\n        assert(\n            self.layer_type_of_root == ARRAY_LAYER,\n            \"can only acceess array elements from array\",\n        );\n\n        let parent_entry: JSONEntry =\n            self.json_entries_packed[self.root_index_in_transcript].into();\n\n        let valid = lt_field_16_bit(array_index, parent_entry.num_children);\n        let entry_index = (parent_entry.child_pointer + array_index) * valid as Field;\n\n        let entry: JSONEntry = self.json_entries_packed[entry_index].into();\n\n        assert(\n            (entry.entry_type - END_OBJECT_TOKEN) * valid as Field == 0,\n            \"get_object_from_array: entry exists but is not an object!\",\n        );\n\n        let mut r = self;\n        r.layer_type_of_root = entry.parent_index;\n        r.root_id = entry.id;\n        r.layer_type_of_root = OBJECT_LAYER;\n        r.root_index_in_transcript = entry_index;\n\n        Option { _is_some: valid, _value: r }\n    }\n\n    /**\n     * @brief if the root JSON is an array, extract an object given by the position of the target in the source array\n     * @description will revert if the object does not exist\n     **/\n    fn get_object_from_array_unchecked(self, array_index: Field) -> Self {\n        assert(\n            self.layer_type_of_root == ARRAY_LAYER,\n            \"can only acceess array elements from array\",\n        );\n\n        let parent_entry: JSONEntry =\n            self.json_entries_packed[self.root_index_in_transcript].into();\n\n        let valid = lt_field_16_bit(array_index, parent_entry.num_children);\n        assert(valid, \"array overflow\");\n        let entry_index = (parent_entry.child_pointer + array_index);\n\n        let entry: JSONEntry = self.json_entries_packed[entry_index].into();\n        assert(\n            entry.entry_type == END_OBJECT_TOKEN,\n            \"get_object_from_array_unchecked: entry exists but is not an object!\",\n        );\n\n        let mut r = self;\n        r.layer_type_of_root = entry.parent_index;\n        r.root_id = entry.id;\n        r.layer_type_of_root = OBJECT_LAYER;\n        r.root_index_in_transcript = entry_index;\n        r\n    }\n}\n\n#[test]\nfn test_object() {\n    let text = \"{ \\\"foo\\\": [ [1,{ \\\"bartholomew tony Harrison III\\\": { \\\"hello\\\": \\\"world\\\" }},3], [[3,4]], [[]], [], { \\\"bar\\\": [\\\"b\\\", \\\"a\\\", \\\"z\\\" ]} ]}\";\n\n    let mut json: JSON<123, 7, 60, 60, 2> = JSON::parse_json_from_string(text);\n\n    let first = json.get_array_unchecked(\"foo\".as_bytes());\n    assert(first.get_length() == 5);\n\n    let A = first.get_array_from_array_unchecked(0);\n    assert(A.get_length() == 3);\n\n    let B = A.get_object_from_array_unchecked(1);\n    let B_alt = A.get_object_from_array(1);\n    assert(B == B_alt.unwrap());\n\n    let C = B.get_object_unchecked(\"bartholomew tony Harrison III\".as_bytes());\n    assert(JSONEntry::from(C.json_entries_packed[C.root_index_in_transcript]).num_children == 1);\n\n    let not_real = B.get_object(\"bartholomew tony Harrison IV\".as_bytes());\n    assert(not_real.is_some() == false);\n\n    let C = B.get_object_unchecked_var(\n        BoundedVec { storage: \"bartholomew tony Harrison III\".as_bytes(), len: 29 },\n    );\n    assert(JSONEntry::from(C.json_entries_packed[C.root_index_in_transcript]).num_children == 1);\n\n    let C = B.get_object_var(\n        BoundedVec { storage: \"bartholomew tony Harrison III\".as_bytes(), len: 28 },\n    );\n    assert(C.is_some() == false);\n\n    let C = B.get_object_var(\n        BoundedVec { storage: \"bartholomew tony Harrison IIIekurfgaeoiurh\".as_bytes(), len: 29 },\n    );\n    assert(C.is_some() == true);\n\n    let second = first.get_object_from_array_unchecked(4);\n\n    let third = second.get_array_unchecked(\"bar\".as_bytes());\n\n    let E: BoundedVec<u8, 1> = third.get_string_from_array_unchecked(0);\n    let F: BoundedVec<u8, 1> = third.get_string_from_array_unchecked(1);\n    let G: BoundedVec<u8, 1> = third.get_string_from_array_unchecked(2);\n    assert(E.storage == \"b\".as_bytes());\n    assert(F.storage == \"a\".as_bytes());\n    assert(G.storage == \"z\".as_bytes());\n}\n","path":"/home/runner/nargo/github.com/noir-lang/noir_json_parser/v0.4.0/src/get_object.nr"},"76":{"source":"use crate::_comparison_tools::lt::lt_field_16_bit;\nuse crate::enums::Layer::{ARRAY_LAYER, OBJECT_LAYER};\nuse crate::enums::Token::STRING_TOKEN;\nuse crate::getters::JSONValue;\nuse crate::json::JSON;\nuse crate::json_entry::JSONEntry;\nuse crate::json_tables::{\n    ESCAPE_SEQUENCE_END_CHARS, ESCAPE_SEQUENCE_REPLACEMENT, ESCAPE_SEQUENCE_START_CHARS,\n};\n\nunconstrained fn to_u8(f: Field) -> u8 {\n    f as u8\n}\nfn process_escape_sequences<let N: u32>(input: BoundedVec<u8, N>) -> BoundedVec<u8, N> {\n    let string = input.storage;\n    let mut result: [u8; N] = [0; N];\n    let mut result_ptr = 0;\n    let mut character = string[0];\n    let mut skip = 0;\n    let mut cached_byte: Field = 0;\n    for i in 1..N {\n        let next_character = string[i];\n        let escape_sequence_start_candidate = ESCAPE_SEQUENCE_START_CHARS[character];\n        let escape_sequence_end_candidate = ESCAPE_SEQUENCE_END_CHARS[next_character];\n        let escape_sequence_replacement_candidate = ESCAPE_SEQUENCE_REPLACEMENT[next_character];\n        let mut is_escape_sequence =\n            (escape_sequence_start_candidate & escape_sequence_end_candidate) as Field;\n        is_escape_sequence = is_escape_sequence * (1 - skip);\n        let mut written_byte = is_escape_sequence * escape_sequence_replacement_candidate as Field\n            + (1 - is_escape_sequence) * character as Field;\n\n        written_byte = written_byte * (1 - skip) + cached_byte * skip;\n        //@Safety: we assert that the casting is done correctly\n        let written_byte_u8 = unsafe { to_u8(written_byte) };\n        assert(written_byte_u8 as Field == written_byte);\n\n        result[result_ptr] = written_byte_u8;\n        result_ptr += (1 - is_escape_sequence);\n        cached_byte = written_byte;\n        skip = is_escape_sequence;\n        character = next_character;\n    }\n\n    let written_byte: Field = character as Field * (1 - skip) + cached_byte * skip;\n    //@Safety: we assert that the casting is done correctly\n    let written_byte_u8 = unsafe { to_u8(written_byte) };\n    assert(written_byte_u8 as Field == written_byte);\n    result[result_ptr] = written_byte_u8;\n    result_ptr += 1;\n\n    let num_removed_chars = N as Field - result_ptr;\n    let new_length = input.len as Field - num_removed_chars;\n    BoundedVec { storage: result, len: new_length as u32 }\n}\n\n#[test]\nfn test_process_escape_sequence_2() {\n    let text = BoundedVec::from_array(\"\\\\\\\"Ade\\\\nel Solangi\\\\\\\"\".as_bytes());\n    let mut expected = text;\n    expected = BoundedVec::from_array(\"\\\"Ade\\nel Solangi\\\"\".as_bytes());\n    let result: BoundedVec<u8, 19> = process_escape_sequences(text);\n    assert(result == expected);\n}\n#[test]\nfn test_process_escape_sequence() {\n    // end with escape sequence\n    {\n        let text = BoundedVec::from_array(\"the qulick brown fox said \\\\\\\"why hello there\\\\\\\"  \\\\\\\\\"\n            .as_bytes());\n\n        let expected: BoundedVec<u8, 49> = BoundedVec::from_array(\n            \"the qulick brown fox said \\\"why hello there\\\"  \\\\\".as_bytes(),\n        );\n\n        let result: BoundedVec<u8, 49> = process_escape_sequences(text);\n\n        assert(result == expected);\n    }\n    // end without escape sequence\n    {\n        let text = BoundedVec::from_array(\n            \"\\\\\\\"he qulick brown fox said \\\\n \\\\r \\\\\\\"why hello there\\\\\\\"  \\\\\\\\\".as_bytes(),\n        );\n\n        let expected: BoundedVec<u8, 56> = BoundedVec::from_array(\n            \"\\\"he qulick brown fox said \\n \\r \\\"why hello there\\\"  \\\\\".as_bytes(),\n        );\n\n        let result = process_escape_sequences(text);\n\n        assert(result == expected);\n    }\n}\n\n/**\n * @brief getter methods for extracting string values out of a JSON struct\n * @note returned strings will have escape sequences converted into the relevant ASCII characters.\n *       If you want to avoid this, use `get_value` instead of `get_string`\n **/\nimpl<let NumBytes: u32, let NumPackedFields: u32, let MaxNumTokens: u32, let MaxNumValues: u32, let MaxKeyFields: u32> JSON<NumBytes, NumPackedFields, MaxNumTokens, MaxNumValues, MaxKeyFields> {\n\n    /**\n     * @brief if the root JSON is an object, extract a string given by `key`\n     * @description returns an Option<BoundedVec> which will be null if the key does not exist\n     * @note the `StringBytes` parameter defines the maximum allowable length of the returned string\n     **/\n    fn get_string<let KeyBytes: u32, let StringBytes: u32>(\n        self,\n        key: [u8; KeyBytes],\n    ) -> Option<BoundedVec<u8, StringBytes>> {\n        let (exists, entry) = self.get_json_entry(key);\n        assert(\n            (entry.entry_type - STRING_TOKEN) * exists as Field == 0,\n            \"get_string: entry exists but is not a string!\",\n        );\n        let mut parsed_string: [u8; StringBytes] = self.extract_string_entry(entry);\n\n        let parsed_string: BoundedVec<u8, StringBytes> = process_escape_sequences(\n            BoundedVec { storage: parsed_string, len: entry.json_length as u32 },\n        );\n        Option { _is_some: exists, _value: parsed_string }\n    }\n\n    /**\n     * @brief if the root JSON is an object, extract a string given by `key`\n     * @description will revert if the string does not exist\n     * @note the `StringBytes` parameter defines the maximum allowable length of the returned string\n     **/\n    fn get_string_unchecked<let KeyBytes: u32, let StringBytes: u32>(\n        self,\n        key: [u8; KeyBytes],\n    ) -> BoundedVec<u8, StringBytes> {\n        let entry = self.get_json_entry_unchecked(key);\n        assert(\n            entry.entry_type == STRING_TOKEN,\n            \"get_string_unchecked: entry exists but is not a string!\",\n        );\n        let parsed_string =\n            BoundedVec { storage: self.extract_string_entry(entry), len: entry.json_length as u32 };\n        process_escape_sequences(parsed_string)\n    }\n\n    /**\n     * @brief same as `get_string` for where the key length may be less than KeyBytes\n     **/\n    fn get_string_var<let KeyBytes: u32, let StringBytes: u32>(\n        self,\n        key: BoundedVec<u8, KeyBytes>,\n    ) -> Option<BoundedVec<u8, StringBytes>> {\n        let (exists, entry) = self.get_json_entry_var(key);\n        assert(\n            (entry.entry_type - STRING_TOKEN) * exists as Field == 0,\n            \"get_string: entry exists but is not a string!\",\n        );\n        let mut parsed_string: [u8; StringBytes] = self.extract_string_entry(entry);\n        let parsed_string: BoundedVec<u8, StringBytes> = process_escape_sequences(\n            BoundedVec { storage: parsed_string, len: entry.json_length as u32 },\n        );\n        Option { _is_some: exists, _value: parsed_string }\n    }\n\n    /**\n     * @brief same as `get_string_unchecked` for where the key length may be less than KeyBytes\n     **/\n    fn get_string_unchecked_var<let KeyBytes: u32, let StringBytes: u32>(\n        self,\n        key: BoundedVec<u8, KeyBytes>,\n    ) -> BoundedVec<u8, StringBytes> {\n        let entry = self.get_json_entry_unchecked_var(key);\n        assert(\n            entry.entry_type == STRING_TOKEN,\n            \"get_string_unchecked: entry exists but is not a string!\",\n        );\n        let parsed_string =\n            BoundedVec { storage: self.extract_string_entry(entry), len: entry.json_length as u32 };\n        process_escape_sequences(parsed_string)\n    }\n\n    /**\n     * @brief if the root JSON is an array, extract a string given by the position of the target in the source array\n     * @description returns an Option<BoundedVec> which will be null if the string does not exist\n     **/\n    fn get_string_from_array<let StringBytes: u32>(\n        self,\n        array_index: Field,\n    ) -> Option<BoundedVec<u8, StringBytes>> {\n        assert(\n            self.layer_type_of_root == ARRAY_LAYER,\n            \"can only acceess array elements from array\",\n        );\n\n        let parent_entry: JSONEntry =\n            self.json_entries_packed[self.root_index_in_transcript].into();\n\n        let valid = lt_field_16_bit(array_index, parent_entry.num_children);\n        let entry_index = (parent_entry.child_pointer + array_index) * valid as Field;\n\n        let entry: JSONEntry = self.json_entries_packed[entry_index].into();\n\n        assert(\n            (entry.entry_type - STRING_TOKEN) * valid as Field == 0,\n            \"get_array_element_as_string: entry exists but is not a string!\",\n        );\n\n        let mut parsed_string: [u8; StringBytes] = self.extract_string_entry(entry);\n        let parsed_string: BoundedVec<u8, StringBytes> = process_escape_sequences(\n            BoundedVec { storage: parsed_string, len: entry.json_length as u32 },\n        );\n        Option { _is_some: valid, _value: parsed_string }\n    }\n\n    /**\n     * @brief if the root JSON is an array, extract a string given by the position of the target in the source array\n     * @description will revert if the string does not exist\n     **/\n    fn get_string_from_array_unchecked<let StringBytes: u32>(\n        self,\n        array_index: Field,\n    ) -> BoundedVec<u8, StringBytes> {\n        assert(\n            self.layer_type_of_root == ARRAY_LAYER,\n            \"can only acceess array elements from array\",\n        );\n\n        let parent_entry: JSONEntry =\n            self.json_entries_packed[self.root_index_in_transcript].into();\n\n        let valid = lt_field_16_bit(array_index, parent_entry.num_children);\n        assert(valid, \"array overflow\");\n        let entry_index = (parent_entry.child_pointer + array_index);\n\n        let entry: JSONEntry = self.json_entries_packed[entry_index].into();\n\n        assert(\n            entry.entry_type == STRING_TOKEN,\n            \"get_string_from_array_unchecked: entry exists but is not a string!\",\n        );\n\n        let mut parsed_string: [u8; StringBytes] = self.extract_string_entry(entry);\n        process_escape_sequences(\n            BoundedVec { storage: parsed_string, len: entry.json_length as u32 },\n        )\n    }\n\n    /**\n     * @brief if the root JSON is an object, get a nested string out of the JSON, which may be several keys deep\n     **/\n    fn get_string_from_path<let KeyBytes: u32, let StringBytes: u32, let PathDepth: u32>(\n        self,\n        keys: [BoundedVec<u8, KeyBytes>; PathDepth],\n    ) -> Option<BoundedVec<u8, StringBytes>> {\n        let mut target = self;\n        let mut valid = true;\n        for i in 0..PathDepth - 1 {\n            let child = self.get_object_var(keys[i]);\n\n            target = child._value;\n            valid = valid & child._is_some;\n        }\n\n        let mut final = target.get_string_var(keys[PathDepth - 1]);\n        final._is_some = final._is_some & valid;\n        final\n    }\n\n    /**\n     * @brief if the root JSON is an object, extract a JSONValue given by `key`\n     * @description returns an Option<JSONValue> which will be null if the key does not exist\n     * @note the `StringBytes` parameter defines the maximum allowable length of the returned value\n     **/\n    fn get_value<let KeyBytes: u32, let StringBytes: u32>(\n        self,\n        key: [u8; KeyBytes],\n    ) -> Option<JSONValue<StringBytes>> {\n        let (exists, entry) = self.get_json_entry(key);\n        let mut parsed_string: [u8; StringBytes] = self.extract_string_entry(entry);\n\n        let parsed_string: BoundedVec<u8, StringBytes> =\n            BoundedVec { storage: parsed_string, len: entry.json_length as u32 };\n        Option {\n            _is_some: exists,\n            _value: JSONValue { value: parsed_string, value_type: entry.entry_type },\n        }\n    }\n\n    /**\n     * @brief if the root JSON is an object, extract a JSONValue given by `key`\n     * @description will revert if the string does not exist\n     * @note the `StringBytes` parameter defines the maximum allowable length of the returned value\n     **/\n    fn get_value_unchecked<let KeyBytes: u32, let StringBytes: u32>(\n        self,\n        key: [u8; KeyBytes],\n    ) -> JSONValue<StringBytes> {\n        let entry = self.get_json_entry_unchecked(key);\n        JSONValue {\n            value: BoundedVec {\n                len: entry.json_length as u32,\n                storage: self.extract_string_entry(entry),\n            },\n            value_type: entry.entry_type,\n        }\n    }\n\n    /**\n     * @brief same as `get_value` for where the key length may be less than KeyBytes\n     **/\n    fn get_value_var<let KeyBytes: u32, let StringBytes: u32>(\n        self,\n        key: BoundedVec<u8, KeyBytes>,\n    ) -> Option<JSONValue<StringBytes>> {\n        let (exists, entry) = self.get_json_entry_var(key);\n        let mut parsed_string: [u8; StringBytes] = self.extract_string_entry(entry);\n\n        let parsed_string: BoundedVec<u8, StringBytes> =\n            BoundedVec { storage: parsed_string, len: entry.json_length as u32 };\n        Option {\n            _is_some: exists,\n            _value: JSONValue { value: parsed_string, value_type: entry.entry_type },\n        }\n    }\n\n    /**\n     * @brief same as `get_value_unchecked` for where the key length may be less than KeyBytes\n     **/\n    fn get_value_unchecked_var<let KeyBytes: u32, let StringBytes: u32>(\n        self,\n        key: BoundedVec<u8, KeyBytes>,\n    ) -> JSONValue<StringBytes> {\n        let entry = self.get_json_entry_unchecked_var(key);\n        JSONValue {\n            value: BoundedVec {\n                len: entry.json_length as u32,\n                storage: self.extract_string_entry(entry),\n            },\n            value_type: entry.entry_type,\n        }\n    }\n\n    /**\n     * @brief if the root JSON is an array, extract a value given by the position of the target in the source array\n     * @description returns an Option<BoundedVec> which will be null if the value does not exist\n     **/\n    fn get_value_from_array<let StringBytes: u32>(\n        self,\n        array_index: Field,\n    ) -> Option<JSONValue<StringBytes>> {\n        assert(\n            self.layer_type_of_root == ARRAY_LAYER,\n            \"can only acceess array elements from array\",\n        );\n\n        let parent_entry: JSONEntry =\n            self.json_entries_packed[self.root_index_in_transcript].into();\n\n        let valid = lt_field_16_bit(array_index, parent_entry.num_children);\n        let entry_index = (parent_entry.child_pointer + array_index) * valid as Field;\n\n        let entry: JSONEntry = self.json_entries_packed[entry_index].into();\n\n        assert(\n            (entry.entry_type - STRING_TOKEN) * valid as Field == 0,\n            \"get_array_element_as_string: entry exists but is not a string!\",\n        );\n\n        let mut parsed_string: [u8; StringBytes] = self.extract_string_entry(entry);\n        Option {\n            _is_some: valid,\n            _value: JSONValue {\n                value: BoundedVec { len: entry.json_length as u32, storage: parsed_string },\n                value_type: entry.entry_type,\n            },\n        }\n    }\n\n    /**\n     * @brief if the root JSON is an array, extract a value given by the position of the target in the source array\n     * @description will revert if the value does not exist\n     **/\n    fn get_value_from_array_unchecked<let StringBytes: u32>(\n        self,\n        array_index: Field,\n    ) -> JSONValue<StringBytes> {\n        assert(\n            self.layer_type_of_root == ARRAY_LAYER,\n            \"can only acceess array elements from array\",\n        );\n\n        let parent_entry: JSONEntry =\n            self.json_entries_packed[self.root_index_in_transcript].into();\n\n        let valid = lt_field_16_bit(array_index, parent_entry.num_children);\n        assert(valid, \"array overflow\");\n        let entry_index = (parent_entry.child_pointer + array_index);\n\n        let entry: JSONEntry = self.json_entries_packed[entry_index].into();\n\n        assert(\n            entry.entry_type == STRING_TOKEN,\n            \"get_string_from_array_unchecked: entry exists but is not a string!\",\n        );\n\n        let mut parsed_string: [u8; StringBytes] = self.extract_string_entry(entry);\n        JSONValue {\n            value: BoundedVec { len: entry.json_length as u32, storage: parsed_string },\n            value_type: entry.entry_type,\n        }\n    }\n\n    /**\n     * @brief if the root JSON is an object, get a nested value out of the JSON, which may be several keys deep\n     **/\n    fn get_value_from_path<let KeyBytes: u32, let StringBytes: u32, let PathDepth: u32>(\n        self,\n        keys: [BoundedVec<u8, KeyBytes>; PathDepth],\n    ) -> Option<JSONValue<StringBytes>> {\n        let mut target = self;\n        let mut valid = true;\n        for i in 0..PathDepth - 1 {\n            let child = self.get_object_var(keys[i]);\n\n            target = child._value;\n            valid = valid & child._is_some;\n        }\n\n        let mut final = target.get_value_var(keys[PathDepth - 1]);\n        final._is_some = final._is_some & valid;\n\n        final\n    }\n}\n","path":"/home/runner/nargo/github.com/noir-lang/noir_json_parser/v0.4.0/src/get_string.nr"},"77":{"source":"use crate::_comparison_tools::lt::{assert_gt_240_bit, assert_lt_240_bit, lt_field_16_bit};\nuse crate::_string_tools::slice_packed_field::slice_fields;\nuse crate::_string_tools::string_chopper::StringChopper;\nuse crate::enums::Layer::{ARRAY_LAYER, OBJECT_LAYER};\nuse crate::enums::Token::{LITERAL_TOKEN, NUMERIC_TOKEN, STRING_TOKEN};\nuse crate::json::JSON;\nuse crate::json::JSONValue;\nuse crate::json_entry::JSONEntry;\nuse crate::keyhash::ByteHasher;\nuse crate::keymap::KeyIndexData;\nuse crate::transcript_entry::TranscriptEntry;\n/**\n * @brief records data used to reason about whether a key exists in a json blob\n **/\npub struct KeySearchResult {\n    found: bool, // does the key exist?\n    target_lt_smallest_entry: bool, // is the target keyhash smaller than the smallest keyhash in self.key_hashes?\n    target_gt_largest_entry: bool, // is the target keyhash larger than the largest keyhash in self.key_hashes?\n    lhs_index: Field, // either the index of the key being searched for, or the index of the keyhash in self.key_hashes that is closest to keyhash (hash > lhs_index_hash)\n    rhs_index: Field, // either the index of the key being searched for, or the index of the keyhash in self.key_hashes that is closest to keyhash (hash < rhs_index_hash)\n}\n\n/**\n * @brief helper methods for extracting data out of a processed JSON object\n **/\nimpl<let NumBytes: u32, let NumPackedFields: u32, let MaxNumTokens: u32, let MaxNumValues: u32, let MaxKeyFields: u32> JSON<NumBytes, NumPackedFields, MaxNumTokens, MaxNumValues, MaxKeyFields> {\n\n    /**\n     * @brief If the root JSON is an object, extract a JSONEntry that describes an array, object or value that maps to a given key\n     * @description returns an Option<JSONEntry> which will be null if the entry does not exist\n     **/\n    fn get_json_entry<let KeyBytes: u32>(self, key: [u8; KeyBytes]) -> (bool, JSONEntry) {\n        // let key_index = self.find_key_in_map(keyhash);\n        // assert(self.key_hashes[key_index] == keyhash);\n        assert(self.layer_type_of_root != ARRAY_LAYER, \"cannot extract array elements via a key\");\n\n        let (exists, key_index) = self.key_exists_impl(key);\n        let entry: JSONEntry = self.json_entries_packed[key_index].into();\n        (exists, entry)\n    }\n\n    /**\n     * @brief If the root JSON is an object, extract a JSONEntry that describes an array, object or value that maps to a given key\n     * @note will revert if the key does not exist\n     **/\n    fn get_json_entry_unchecked<let KeyBytes: u32>(self, key: [u8; KeyBytes]) -> JSONEntry {\n        assert(self.layer_type_of_root != ARRAY_LAYER, \"cannot extract array elements via a key\");\n\n        let hasher: ByteHasher<MaxKeyFields> = ByteHasher {};\n        let keyhash = hasher.get_keyhash_var(key, 0, KeyBytes);\n        let two_pow_216 = 0x100000000000000000000000000000000000000000000000000000000;\n\n        let keyhash = keyhash + self.root_id * two_pow_216;\n\n        //@Safety: The assertion below checks that the keyhash is stored in the the index returned by the unconstrained function\n        let key_index = unsafe { self.find_key_in_map(keyhash) };\n\n        assert(self.key_hashes[key_index] == keyhash, \"get_json_entry_unchecked: key not found\");\n        let entry: JSONEntry = self.json_entries_packed[key_index].into();\n\n        entry\n    }\n\n    /**\n     * @brief same as `get_json_entry` but the key length may be less than KeyBytes\n     **/\n    fn get_json_entry_var<let KeyBytes: u32>(\n        self,\n        key: BoundedVec<u8, KeyBytes>,\n    ) -> (bool, JSONEntry) {\n        // let key_index = self.find_key_in_map(keyhash);\n        // assert(self.key_hashes[key_index] == keyhash);\n        assert(self.layer_type_of_root != ARRAY_LAYER, \"cannot extract array elements via a key\");\n\n        let (exists, key_index) = self.key_exists_impl_var(key);\n        let entry: JSONEntry = self.json_entries_packed[key_index].into();\n        (exists, entry)\n    }\n\n    /**\n     * @brief same as `get_json_entry_unchecked` but the key length may be less than KeyBytes\n     **/\n    fn get_json_entry_unchecked_var<let KeyBytes: u32>(\n        self,\n        key: BoundedVec<u8, KeyBytes>,\n    ) -> JSONEntry {\n        assert(self.layer_type_of_root != ARRAY_LAYER, \"cannot extract array elements via a key\");\n\n        let hasher: ByteHasher<MaxKeyFields> = ByteHasher {};\n        let keyhash = hasher.get_keyhash_var(key.storage, 0, key.len as u32);\n        let two_pow_216 = 0x100000000000000000000000000000000000000000000000000000000;\n\n        let keyhash = keyhash + self.root_id * two_pow_216;\n\n        //@Safety: The assertion below checks that the keyhash is stored in the the index returned by the unconstrained function\n        let key_index = unsafe { self.find_key_in_map(keyhash) };\n\n        assert(self.key_hashes[key_index] == keyhash, \"get_json_entry_unchecked: key not found\");\n        let entry: JSONEntry = self.json_entries_packed[key_index].into();\n\n        entry\n    }\n\n    /**\n     * @brief same as `get_json_entry_unchecked_var` but also returns the position of the JSONEntry in `self.json_entries_packed`\n     **/\n    fn get_json_entry_unchecked_with_key_index<let KeyBytes: u32>(\n        self,\n        key: [u8; KeyBytes],\n    ) -> (JSONEntry, Field) {\n        assert(self.layer_type_of_root != ARRAY_LAYER, \"cannot extract array elements via a key\");\n\n        let hasher: ByteHasher<MaxKeyFields> = ByteHasher {};\n        let keyhash = hasher.get_keyhash_var(key, 0, KeyBytes);\n        let two_pow_216 = 0x100000000000000000000000000000000000000000000000000000000;\n\n        let keyhash = keyhash + self.root_id * two_pow_216;\n\n        //@Safety: The assertion below checks that the keyhash is stored in the the index returned by the unconstrained function\n        let key_index = unsafe { self.find_key_in_map(keyhash) };\n\n        assert(self.key_hashes[key_index] == keyhash, \"get_json_entry_unchecked: key not found\");\n        let entry: JSONEntry = self.json_entries_packed[key_index].into();\n\n        (entry, key_index)\n    }\n    /**\n     * @brief same as `get_json_entry_unchecked_var` but also returns the position of the JSONEntry in `self.json_entries_packed`\n     **/\n    fn get_json_entry_unchecked_with_key_index_var<let KeyBytes: u32>(\n        self,\n        key: BoundedVec<u8, KeyBytes>,\n    ) -> (JSONEntry, Field) {\n        assert(self.layer_type_of_root != ARRAY_LAYER, \"cannot extract array elements via a key\");\n\n        let hasher: ByteHasher<MaxKeyFields> = ByteHasher {};\n        let keyhash = hasher.get_keyhash_var(key.storage, 0, key.len as u32);\n        let two_pow_216 = 0x100000000000000000000000000000000000000000000000000000000;\n\n        let keyhash = keyhash + self.root_id * two_pow_216;\n\n        //@Safety: The assertion below checks that the keyhash is stored in the the index returned by the unconstrained function\n        let key_index = unsafe { self.find_key_in_map(keyhash) };\n\n        assert(self.key_hashes[key_index] == keyhash, \"get_json_entry_unchecked: key not found\");\n        let entry: JSONEntry = self.json_entries_packed[key_index].into();\n\n        (entry, key_index)\n    }\n\n    /**\n     * @brief helper method that will extract an array of bytes that describes the value associated with a JSONEntry object\n     * @description e.g. if the JSONEntry describes \"foo\" : \"bar\" in the JSON, `extract_string_entry` will return \"foo\"\n     **/\n    fn extract_string_entry<let StringBytes: u32>(self, entry: JSONEntry) -> [u8; StringBytes] {\n        // todo can we make this faster? witness gen for this method is slow\n        // TODO: document that StringBytes parameter includes non-escaped characters\n        assert(\n            lt_field_16_bit(entry.json_length, StringBytes as Field + 1),\n            \"get_string, string size is larger than StringBytes\",\n        );\n\n        let mut result: [u8; StringBytes] = [0; StringBytes];\n        if (StringBytes <= 31) {\n            let s: StringChopper<1> = StringChopper {};\n            result = s.slice_string(self.json_packed, entry.json_pointer, entry.json_length);\n        } else if (StringBytes <= 62) {\n            let s: StringChopper<2> = StringChopper {};\n            result = s.slice_string(self.json_packed, entry.json_pointer, entry.json_length);\n        } else if (StringBytes <= 93) {\n            let s: StringChopper<3> = StringChopper {};\n            result = s.slice_string(self.json_packed, entry.json_pointer, entry.json_length);\n        } else if (StringBytes <= 124) {\n            let s: StringChopper<4> = StringChopper {};\n            result = s.slice_string(self.json_packed, entry.json_pointer, entry.json_length);\n        } else if (StringBytes <= 155) {\n            let s: StringChopper<5> = StringChopper {};\n            result = s.slice_string(self.json_packed, entry.json_pointer, entry.json_length);\n        } else if (StringBytes <= 186) {\n            let s: StringChopper<6> = StringChopper {};\n            result = s.slice_string(self.json_packed, entry.json_pointer, entry.json_length);\n        } else if (StringBytes <= 217) {\n            let s: StringChopper<7> = StringChopper {};\n            result = s.slice_string(self.json_packed, entry.json_pointer, entry.json_length);\n        } else if (StringBytes <= 248) // 8\n        {\n            let s: StringChopper<8> = StringChopper {};\n            result = s.slice_string(self.json_packed, entry.json_pointer, entry.json_length);\n        } else if (StringBytes <= 496) // 16\n        {\n            let s: StringChopper<16> = StringChopper {};\n            result = s.slice_string(self.json_packed, entry.json_pointer, entry.json_length);\n        } else if (StringBytes <= 992) // 32\n        {\n            let s: StringChopper<32> = StringChopper {};\n            result = s.slice_string(self.json_packed, entry.json_pointer, entry.json_length);\n        } else if (StringBytes <= 1984) {\n            let s: StringChopper<64> = StringChopper {};\n            result = s.slice_string(self.json_packed, entry.json_pointer, entry.json_length);\n        } else if (StringBytes <= 3968) {\n            let s: StringChopper<128> = StringChopper {};\n            result = s.slice_string(self.json_packed, entry.json_pointer, entry.json_length);\n        } else if (StringBytes <= 7936) {\n            let s: StringChopper<256> = StringChopper {};\n            result = s.slice_string(self.json_packed, entry.json_pointer, entry.json_length);\n        } else if (StringBytes <= 15872) {\n            let s: StringChopper<512> = StringChopper {};\n            result = s.slice_string(self.json_packed, entry.json_pointer, entry.json_length);\n        } else if (StringBytes <= 31774) {\n            let s: StringChopper<1024> = StringChopper {};\n            result = s.slice_string(self.json_packed, entry.json_pointer, entry.json_length);\n        } else {\n            // max 16 bits = 65535 = 2115 31-byte slices\n            let s: StringChopper<2115> = StringChopper {};\n            result = s.slice_string(self.json_packed, entry.json_pointer, entry.json_length);\n        }\n        result\n    }\n\n    unconstrained fn find_key_in_map(self, target: Field) -> Field {\n        let mut found_index: Field = 0;\n        let mut found: bool = false;\n        for i in 0..MaxNumValues {\n            let key_hash = self.key_hashes[i];\n            if (key_hash == target) {\n                found_index = i as Field;\n                found = true;\n                break;\n            }\n        }\n        assert(found, \"find_key_in_map, key not found\");\n        found_index\n    }\n\n    /**\n     * @brief figures out if `target` exists as a key in `self.key_hashes`\n     * @details if `target` does not exist, we return the two indicies of adjacent\n     *          entries in `self.key_hashes`, lhs_index, rhs_index, where\n     *          lhs_index < key_hash < rhs_index\n     **/\n    unconstrained fn search_for_key_in_map(self, target: Field) -> KeySearchResult {\n        let mut found_index: Field = 0;\n        let mut found: bool = false;\n\n        let mut lhs_maximum: Field = 0;\n        let mut rhs_minimum: Field = -1;\n        let mut lhs_maximum_index: Field = 0;\n        let mut rhs_minimum_index: Field = 0;\n        for i in 0..MaxNumValues {\n            let key_hash = self.key_hashes[i];\n            if (key_hash == target) {\n                found_index = i as Field;\n                found = true;\n                break;\n            } else {\n                if key_hash.lt(target) & (lhs_maximum.lt(key_hash)) {\n                    lhs_maximum = key_hash;\n                    lhs_maximum_index = i as Field;\n                }\n                if (target.lt(key_hash)) & (key_hash.lt(rhs_minimum)) {\n                    rhs_minimum = key_hash;\n                    rhs_minimum_index = i as Field;\n                }\n            }\n        }\n        let target_lt_smallest_entry = target.lt(self.key_hashes[0]);\n        let target_gt_largest_entry = self.key_hashes[MaxNumValues - 1].lt(target);\n\n        let result_not_first_or_last =\n            !target_lt_smallest_entry & !target_gt_largest_entry & !found;\n\n        let mut lhs_index = result_not_first_or_last as Field * lhs_maximum_index;\n        let mut rhs_index = result_not_first_or_last as Field * rhs_minimum_index;\n\n        // if target_lt_smallest_entry, rhs_index = 0\n        // if target_gt_largest_entry, lhs_index = TranscriptEntries - 1\n        rhs_index = rhs_index * (1 - target_lt_smallest_entry as Field);\n\n        // we rely here on the fact that target_gt_largest_entry and result_not_first_or_last are mutually exclusive\n        lhs_index = lhs_index + target_gt_largest_entry as Field * (MaxNumValues as Field - 1);\n\n        // If target is FOUND, we want the following:\n        // keyhash[target_index] - 1 < hash < keyhash[target_index] + 1\n        lhs_index = lhs_index + found as Field * found_index;\n        rhs_index = rhs_index + found as Field * found_index;\n\n        KeySearchResult {\n            found,\n            target_lt_smallest_entry,\n            target_gt_largest_entry,\n            lhs_index,\n            rhs_index,\n        }\n    }\n\n    /**\n     * @brief returns a bool that describes whether a given key exists at the root of the JSON\n     **/\n    fn key_exists<let KeyBytes: u32>(self, key: BoundedVec<u8, KeyBytes>) -> bool {\n        self.key_exists_impl_var(key).0\n    }\n\n    /**\n     * @brief implementation of `key_exists`. returns both a boolean and also the position in `self.json_entries_packed` of the key\n     * @description algorithm is O(1) because of the preprocessing we have done\n     *              Method computes a key hash and checks whether key hash exists in the list of sorted preprocessed key hashes\n     *              If it does *not* exist, we can find two adjacent entries in `key_hashes` where `key_hashes[i]` < target_key_hash < `key_hashes[i+1]`\n     **/\n    fn key_exists_impl<let KeyBytes: u32>(self, key: [u8; KeyBytes]) -> (bool, Field) {\n        /*\n            Option A: key exists\n            Option B: key does NOT exist\n        If key does NOT exist. 3 cases\n            case 1: keyhash < first entry\n            case 2: keyhash > last entry\n            case 3: entry A > keyhash > entryB\n        */\n        let hasher: ByteHasher<MaxKeyFields> = ByteHasher {};\n        let keyhash = hasher.get_keyhash_var(key, 0, KeyBytes);\n\n        let HASH_MAXIMUM = 0x1000000000000000000000000000000000000000000000000000000000000 - 1;\n        let two_pow_216 = 0x100000000000000000000000000000000000000000000000000000000;\n\n        let keyhash = keyhash + self.root_id * two_pow_216;\n\n        //@Safety: The assertion below checks that the keyhash is stored in the the index returned by the unconstrained function\n        let search_result = unsafe { self.search_for_key_in_map(keyhash) };\n        let found = search_result.found as Field;\n\n        let target_lt_smallest_entry = search_result.target_lt_smallest_entry as Field;\n        let target_gt_largest_entry = search_result.target_gt_largest_entry as Field;\n\n        assert(((search_result.lhs_index - search_result.rhs_index) * found) == 0);\n\n        // only one of \"found\", \"target_lt_smallest_entry\", \"target_gt_largest_entry\" can be true\n        let exclusion_test = found + target_gt_largest_entry + target_lt_smallest_entry;\n        assert(exclusion_test * exclusion_test == exclusion_test);\n\n        let mut lhs = self.key_hashes[search_result.lhs_index];\n        let mut rhs = self.key_hashes[search_result.rhs_index];\n\n        // case where hash < self.key_hashes[0]\n        // 0 < hash < hashes[0]\n        lhs = lhs * (1 - target_lt_smallest_entry);\n\n        // case where hash > self.key_hashes[last]\n        // largest < x < -1\n        rhs = rhs * (1 - target_gt_largest_entry) + target_gt_largest_entry * HASH_MAXIMUM;\n\n        // case where hash == self.key_hashes[found_index]\n        lhs = lhs - found;\n        rhs = rhs + found;\n\n        assert_gt_240_bit(keyhash, lhs);\n        assert_lt_240_bit(keyhash, rhs);\n\n        (search_result.found, search_result.lhs_index)\n    }\n\n    /**\n     * @brief implementation of `key_exists`. returns both a boolean and also the position in `self.json_entries_packed` of the key\n     * @description algorithm is O(1) because of the preprocessing we have done\n     *              Method computes a key hash and checks whether key hash exists in the list of sorted preprocessed key hashes\n     *              If it does *not* exist, we can find two adjacent entries in `key_hashes` where `key_hashes[i]` < target_key_hash < `key_hashes[i+1]`\n     **/\n    fn key_exists_impl_var<let KeyBytes: u32>(\n        self,\n        key: BoundedVec<u8, KeyBytes>,\n    ) -> (bool, Field) {\n        /*\n            Option A: key exists\n            Option B: key does NOT exist\n        If key does NOT exist. 3 cases\n            case 1: keyhash < first entry\n            case 2: keyhash > last entry\n            case 3: entry A > keyhash > entryB\n        */\n        let hasher: ByteHasher<MaxKeyFields> = ByteHasher {};\n        let keyhash = hasher.get_keyhash_var(key.storage, 0, key.len as u32);\n\n        let HASH_MAXIMUM = 0x1000000000000000000000000000000000000000000000000000000000000 - 1;\n        let two_pow_216 = 0x100000000000000000000000000000000000000000000000000000000;\n\n        let keyhash = keyhash + self.root_id * two_pow_216;\n\n        //@Safety: the assertion (search_result.lhs_index - search_result.rhs_index) * found == 0 constraints this function\n        let search_result = unsafe { self.search_for_key_in_map(keyhash) };\n        let found = search_result.found as Field;\n\n        let target_lt_smallest_entry = search_result.target_lt_smallest_entry as Field;\n        let target_gt_largest_entry = search_result.target_gt_largest_entry as Field;\n\n        assert(((search_result.lhs_index - search_result.rhs_index) * found) == 0);\n\n        // only one of \"found\", \"target_lt_smallest_entry\", \"target_gt_largest_entry\" can be true\n        let exclusion_test = found + target_gt_largest_entry + target_lt_smallest_entry;\n        assert(exclusion_test * exclusion_test == exclusion_test);\n\n        let mut lhs = self.key_hashes[search_result.lhs_index];\n        let mut rhs = self.key_hashes[search_result.rhs_index];\n\n        // case where hash < self.key_hashes[0]\n        // 0 < hash < hashes[0]\n        lhs = lhs * (1 - target_lt_smallest_entry);\n\n        // case where hash > self.key_hashes[last]\n        // largest < x < -1\n        rhs = rhs * (1 - target_gt_largest_entry) + target_gt_largest_entry * HASH_MAXIMUM;\n\n        // case where hash == self.key_hashes[found_index]\n        lhs = lhs - found;\n        rhs = rhs + found;\n\n        assert_gt_240_bit(keyhash, lhs);\n        assert_lt_240_bit(keyhash, rhs);\n\n        (search_result.found, search_result.lhs_index)\n    }\n\n    unconstrained fn __get_keys_at_root<let MaxNumKeys: u32>(\n        self,\n    ) -> BoundedVec<Field, MaxNumKeys> {\n        let mut result: BoundedVec<Field, MaxNumKeys> =\n            BoundedVec { len: 0, storage: [0; MaxNumKeys] };\n\n        let root_object: JSONEntry =\n            JSONEntry::from(self.json_entries_packed[self.root_index_in_transcript]);\n\n        let mut result_ptr = 0;\n        for i in 0..MaxNumValues {\n            let target_entry: JSONEntry = JSONEntry::from(self.unsorted_json_entries_packed[i]);\n            if (target_entry.parent_index == self.root_id) {\n                result.storage[result_ptr] = i as Field;\n                result_ptr += 1;\n            }\n        }\n        assert(result_ptr == root_object.num_children);\n        result.len = result_ptr as u32;\n        result\n    }\n    fn get_keys_at_root<let MaxNumKeys: u32, let MaxKeyBytes: u32>(\n        self,\n    ) -> BoundedVec<BoundedVec<u8, MaxKeyBytes>, MaxNumKeys> {\n        let root_object: JSONEntry =\n            JSONEntry::from(self.json_entries_packed[self.root_index_in_transcript]);\n        //@Safety: the length of the index is constrained later.\n        let key_indices: BoundedVec<Field, MaxNumKeys> = unsafe { self.__get_keys_at_root() };\n\n        assert(key_indices.len as Field == root_object.num_children);\n\n        let mut result: BoundedVec<BoundedVec<u8, MaxKeyBytes>, MaxNumKeys> = BoundedVec {\n            len: 0,\n            storage: [BoundedVec { len: 0, storage: [0; MaxKeyBytes] }; MaxNumKeys],\n        };\n        for i in 0..MaxNumKeys {\n            let key = KeyIndexData::from_field(self.key_data[key_indices.storage[i]]);\n            // just a workaround to the interface for `extract_string_entry`\n            let mut fake_entry = JSONEntry::new();\n            fake_entry.json_pointer = key.json_index;\n            fake_entry.json_length = key.json_length;\n            result.storage[i].storage = self.extract_string_entry(fake_entry);\n            result.storage[i].len = key.json_length as u32;\n        }\n        result.len = key_indices.len;\n        result\n    }\n}\n\n#[test]\nfn test_get_keys_at_root() {\n    let s = \"{ \\\"A\\\": 1, \\\"foo\\\": false, \\\"bar\\\": { \\\"one\\\" : \\\"A\\\", \\\"two\\\" : \\\"B\\\"}, \\\"baz\\\": \\\"12345\\\"  }\";\n\n    let json: JSON<77, 6, 30, 30, 2> = JSON::parse_json_from_string(s);\n\n    let keys: BoundedVec<BoundedVec<u8, 5>, 5> = json.get_keys_at_root();\n\n    assert(keys.len == 4);\n    assert(keys.storage[0] == BoundedVec::from_array(\"A\".as_bytes()));\n    assert(keys.storage[1] == BoundedVec::from_array(\"foo\".as_bytes()));\n    assert(keys.storage[2] == BoundedVec::from_array(\"bar\".as_bytes()));\n    assert(keys.storage[3] == BoundedVec::from_array(\"baz\".as_bytes()));\n}\n","path":"/home/runner/nargo/github.com/noir-lang/noir_json_parser/v0.4.0/src/getters.nr"},"78":{"source":"use crate::_comparison_tools::bounds_checker;\nuse crate::_comparison_tools::bounds_checker::get_validity_flags;\nuse crate::enums::Layer::{ARRAY_LAYER, OBJECT_LAYER, SINGLE_VALUE_LAYER};\nuse crate::enums::ScanMode::{GRAMMAR_SCAN, LITERAL_SCAN, NUMERIC_SCAN, STRING_SCAN};\nuse crate::enums::Token::{\n    BEGIN_ARRAY_TOKEN, BEGIN_OBJECT_TOKEN, END_ARRAY_TOKEN, END_OBJECT_TOKEN, KEY_SEPARATOR_TOKEN,\n    KEY_TOKEN, LITERAL_TOKEN, NUM_TOKENS, NUMERIC_TOKEN, STRING_TOKEN, VALUE_SEPARATOR_TOKEN,\n};\nuse crate::get_literal::JSONLiteral;\nuse crate::json_entry::{JSONContextStackEntry, JSONEntry, JSONEntryPacked};\nuse crate::json_tables::{\n    JSON_CAPTURE_TABLE, PROCESS_RAW_TRANSCRIPT_TABLE, TOKEN_FLAGS_TABLE,\n    TOKEN_IS_ARRAY_OBJECT_OR_VALUE, TOKEN_IS_STRING, TOKEN_VALIDATION_TABLE,\n};\nuse crate::token_flags::TokenFlags;\nuse crate::transcript_entry::{\n    PostProcessScanData, RawTranscriptEntry, ScanData, TranscriptEntry, ValidationFlags,\n};\n\n/**\n * @brief records a value in a json blob\n **/\npub struct JSONValue<let MaxLength: u32> {\n    value: BoundedVec<u8, MaxLength>, // raw bytes that constitute the json value entry\n    value_type: Field, // either STRING_TOKEN, NUMERIC_TOKEN or LITERAL_TOKEN\n}\n\nimpl<let MaxLength: u32> JSONValue<MaxLength> {\n    fn is_string(self) -> bool {\n        self.value_type == STRING_TOKEN\n    }\n    fn is_number(self) -> bool {\n        self.value_type == NUMERIC_TOKEN\n    }\n    fn is_literal(self) -> bool {\n        self.value_type == LITERAL_TOKEN\n    }\n}\n\n/**\n * @brief It's a JSON struct! Contains the raw and processed information required to extract data from a json blob\n * @description The \"root\" of the JSON refers to the parent object or array (or a value if the json is just a single value e.g. text = \"\\\"foo\\\": \\\"bar\\\"\")\n * @note text that describes just a single JSON value is not yet fully supported. Only use this library for processing objects or arrays for now\n **/\npub struct JSON<let NumBytes: u32, let NumPackedFields: u32, let MaxNumTokens: u32, let MaxNumValues: u32, let MaxKeyFields: u32> {\n    json: [u8; NumBytes], // the raw json bytes\n    json_packed: [Field; NumPackedFields], // raw bytes, but packed into 31-byte Field elements\n    raw_transcript: [Field; MaxNumTokens], // transcript of json tokens after basic processing\n    transcript: [Field; MaxNumTokens], // complete transcript of json tokens\n    transcript_length: u32, // how big is the transcript?\n    key_data: [Field; MaxNumValues], // description of each key, packed into a Field element\n    key_hashes: [Field; MaxNumValues], // a sorted list of key hashes\n    unsorted_json_entries_packed: [JSONEntryPacked; MaxNumValues], // a list of all the processed json values (objects, arrays, numerics, literals, strings)\n    json_entries_packed: [JSONEntryPacked; MaxNumValues], // a sorted list of all the processed json values (objects, arrays, numerics, literals, strings)\n    layer_type_of_root: Field, // is the root an OBJECT_LAYER, ARRAY_LAYER or SINGLE_VALUE_LAYER?\n    root_id: Field, // the unique identifier of the root (if an object or array)\n    root_index_in_transcript: Field, // location in json_entries_packed of the root\n}\n\n/**\n * @brief are two JSON objects equal?\n * @note VERY EXPENSIVE! Currently only used in tests\n **/\nimpl<let NumBytes: u32, let NumPackedFields: u32, let MaxNumTokens: u32, let MaxNumValues: u32, let MaxKeyFields: u32> std::cmp::Eq for JSON<NumBytes, NumPackedFields, MaxNumTokens, MaxNumValues, MaxKeyFields> {\n    fn eq(self, other: Self) -> bool {\n        (self.json == other.json)\n            & (self.raw_transcript == other.raw_transcript)\n            & (self.transcript == other.transcript)\n            & (self.transcript_length == other.transcript_length)\n            & (self.key_data == other.key_data)\n            & (self.key_hashes == other.key_hashes)\n            & (self.layer_type_of_root == other.layer_type_of_root)\n            & (self.root_id == other.root_id)\n            & (self.root_index_in_transcript == other.root_index_in_transcript)\n            & (self.json_entries_packed == other.json_entries_packed)\n            & (self.json_packed == other.json_packed)\n    }\n}\n\n// TODO: casting entry_ptr to u16 is kind of expensive when generating witnesses, can we fix?\nunconstrained fn __check_entry_ptr_bounds(entry_ptr: Field, max: u32) {\n    // n.b. even though this assert is in an unconstrained function, an out of bounds error will be triggered when writing into self.key_data[entry_ptr]\n    assert(entry_ptr as u32 < max - 1, \"create_json_entries: MaxNumValues limit exceeded!\");\n}\n\nimpl<let NumBytes: u32, let NumPackedFields: u32, let MaxNumTokens: u32, let MaxNumValues: u32, let MaxKeyFields: u32> JSON<NumBytes, NumPackedFields, MaxNumTokens, MaxNumValues, MaxKeyFields> {\n\n    /**\n     * @brief pack the json bytes into Field elements, where each Field element represents 31 bytes\n     * @description we do this because we need to extract substrings from the json bytes, where the position and length of the substring are witness values.\n     *              Doing this on packed Field elements using `slice_string` is cheaper than the direct method of iterating byte-by-byte.\n     *              Also, by extracting data at unknown locations exclusively from the packed json, we do not need to represent the raw bytes `self.json` as a ROM table\n     *              (which would have an expensive initialization cost of 2*NumBytes gates)\n     **/\n    fn compute_json_packed(&mut self) {\n        let NumWholeLimbs = NumBytes / 31;\n        for i in 0..NumWholeLimbs {\n            let mut limb: Field = 0;\n            for j in 0..31 {\n                limb *= 0x100;\n                limb += self.json[i * 31 + j] as Field;\n            }\n            std::as_witness(limb);\n            self.json_packed[i] = limb;\n        }\n        let NumRemainingBytes = NumBytes - NumWholeLimbs * 31;\n        let mut limb: Field = 0;\n        for j in 0..NumRemainingBytes {\n            limb *= 0x100;\n            limb += self.json[NumWholeLimbs * 31 + j] as Field;\n        }\n        for _ in NumRemainingBytes..31 {\n            limb *= 0x100;\n        }\n        std::as_witness(limb);\n        self.json_packed[NumWholeLimbs + (NumRemainingBytes == 0) as u32] = limb;\n    }\n\n    // TODO: when impl is more mature, merge this into create_json_entries\n    fn keyswap(&mut self) {\n        // TODO: this won't work if 1st entry is a key!\n        let mut current = TranscriptEntry::from_field(self.transcript[0]);\n        let mut next: TranscriptEntry = TranscriptEntry::new();\n\n        for i in 0..MaxNumTokens - 1 {\n            next = TranscriptEntry::from_field(self.transcript[i + 1]);\n\n            let next_is_key = (next.token == KEY_SEPARATOR_TOKEN) as Field;\n\n            let valid_token = TOKEN_IS_STRING[current.token];\n            assert(\n                (valid_token * next_is_key) + (1 - next_is_key) == 1,\n                \"Cannot find key/value straddling KEY_DELIMITER_TOKEN\",\n            );\n\n            let old_transcript = self.transcript[i];\n            let new_transcript = TranscriptEntry::to_field(\n                TranscriptEntry { token: KEY_TOKEN, index: current.index, length: current.length },\n            );\n            let updated_transcript =\n                (new_transcript - old_transcript) * next_is_key + old_transcript;\n            self.transcript[i] = updated_transcript;\n\n            current = next;\n        }\n    }\n\n    /**\n     * @brief Once we have processed the json into a transcript of tokens, validate these tokens represent valid JSON!\n     * @description To avoid a lot of painful if/else statements, we construct a state transition function out of the lookup table TOKEN_VALIDATION_TABLE\n     *              The inputs to TOKEN_VALIDATION_TABLE are:\n     *                  1. The current token (at some position `i` i.e. `self.transcript[i])\n     *                  2. The previous token (`self.transcript[i-1]`)\n     *                  3. The context of the previous token (i.e. is it within an object or an array?)\n     *              The lookup table maps these inputs into the following outputs:\n     *                  1. Are we moving into a new context? i.e. is current token a `{` or `[` character?\n     *                  2. If so, what context are we moving into? (`OBJECT_LAYER` or `ARRAY_LAYER`)\n     *                  3. Are we exiting from the current context? i.e. is the current token a `}` or `]` character?\n     *                  4. Have we entered an error state? e.g. a `[` token followed by a `,` token would be invalid JSON\n     * \n     * @note To shave some gates, we represent the error state in a nonstandard way.\n     *       If we have entered an error state, the value of `push_layer` will be 0x1000000\n     *       This will then update `depth` to a value that exceeds the size of `parent_layer_stack` (32),\n     *       which will trigger an out-of-bounds array access, which creates unsatisfiable constraints\n     **/\n    fn validate_tokens(self, tokens: [Field; MaxNumTokens]) {\n        let mut current_layer = self.layer_type_of_root;\n        let mut parent_layer_stack: [Field; 32] = [0; 32];\n        let mut depth = 0;\n        let mut previous_token = tokens[0];\n        let NN = NUM_TOKENS * NUM_TOKENS;\n\n        let is_object = previous_token == BEGIN_OBJECT_TOKEN;\n        let is_array = previous_token == BEGIN_ARRAY_TOKEN;\n\n        depth = is_object as Field + is_array as Field;\n\n        // todo is this correct?\n        parent_layer_stack[0] = is_object as Field * OBJECT_LAYER + is_array as Field * ARRAY_LAYER;\n        assert(\n            TOKEN_IS_ARRAY_OBJECT_OR_VALUE[previous_token] == 1,\n            \"first json token does not describe an object, array or key\",\n        );\n\n        // 17 gates per iteration?\n        for i in 1..MaxNumTokens {\n            // 0 gates\n            let current_token = tokens[i];\n\n            // 1 gate\n            let index = current_layer * (NN as Field)\n                + previous_token * (NUM_TOKENS as Field)\n                + current_token;\n\n            // 5 gates\n            let ValidationFlags { push_layer, push_layer_type_of_root, pop_layer } =\n                ValidationFlags::from_field(TOKEN_VALIDATION_TABLE[index]);\n\n            // 3.5 gates\n            parent_layer_stack[depth] = current_layer;\n\n            // 1 gate\n            // we encode an error flag into `push_layer` by making its value such that `depth` will exceed the size of `parent_layer_stack`\n            depth = depth + push_layer - pop_layer;\n            std::as_witness(depth);\n\n            // 6.5 gates\n            let parent_layer = parent_layer_stack[depth];\n            let mut updated_layer = (1 - pop_layer - push_layer);\n            std::as_witness(updated_layer);\n            updated_layer = updated_layer * current_layer + push_layer_type_of_root;\n            std::as_witness(updated_layer);\n            updated_layer = updated_layer + parent_layer * pop_layer;\n            std::as_witness(updated_layer);\n            current_layer = updated_layer;\n\n            previous_token = current_token;\n        }\n        assert(depth == 0, \"validate_tokens: unclosed objects or arrays\");\n    }\n\n    /**\n     * @brief given a processed transcript of json tokens, compute a list of json entries that describes the values within the JSON blob\n     * @details a 'value' here is either an Object, Array, String, Numeric or Literal.\n     *          e.g. \"[ 1, 2, 3 ]\" contains 4 values (3 Numeric types and the Array that contains them)\n     *\n     *          To avoid branches and if statements, we construct a state transition function out of the lookup table TOKEN_FLAGS_TABLE\n     *          This table takes as an input the following:\n     *              1. The token value of an element in the transcript\n     *              2. The layer type the previous token is located in (i.e. are we in an array or an object?)\n     *          The table outputs the following data:\n     *              1. Should we create a new json entry? (i.e. is the token a STRING_TOKEN, LITERAL_TOKEN, NUMERIC_TOKEN, END_ARRAY_TOKEN, END_OBJECT_TOKEN)\n     *              2. Is the token `}` or `]`?\n     *              3. Is the token `{` or `[`?\n     *              4. Given the current layer type and the token being queried, what should the new layer type be?\n     *              5. Is the token `KEY_TOKEN`?\n     *              6. Is the token a `STRING_TOKEN`, `NUMERIC_TOKEN` OR `VALUE_TOKEN`?\n     *              7. Is the token one that we should skip over? `,` or `:`\n     **/\n    fn create_json_entries(&mut self) {\n        let mut entry_ptr = 0;\n        let mut depth: Field = 1;\n        let mut num_entries_at_current_depth: Field = 0;\n        let mut next_identity_value: Field = 1;\n        let mut current_identity_value: Field = 0;\n        let mut context = OBJECT_LAYER;\n\n        let mut current_key_index_and_length: Field = 0;\n\n        let mut parent_context_stack: [Field; 32] = [0; 32];\n        let mut tokens: [Field; MaxNumTokens] = [0; MaxNumTokens];\n        //  maybe 71.75 gates per iteration\n        for i in 0..MaxNumTokens {\n            //@Safety: check the comments below\n            unsafe { __check_entry_ptr_bounds(entry_ptr, MaxNumValues) };\n            // 5.25 gates\n            let TranscriptEntry { token, index, length } =\n                TranscriptEntry::from_field(self.transcript[i]);\n\n            tokens[i] = token;\n            // 13 gates\n            let TokenFlags {\n    create_json_entry,\n    is_end_of_object_or_array,\n    is_start_of_object_or_array,\n    new_context,\n    is_key_token: update_key,\n    is_value_token,\n    preserve_num_entries,} =\n                TokenFlags::from_field(TOKEN_FLAGS_TABLE[token + context * (NUM_TOKENS as Field)]);\n\n            // 2 gates\n            let diff = (index + length * 0x10000) - current_key_index_and_length;\n            std::as_witness(diff);\n            current_key_index_and_length = diff * update_key + current_key_index_and_length;\n            std::as_witness(current_key_index_and_length);\n\n            // 2 gates\n            let new_context_stack_entry = JSONContextStackEntry::to_field(\n                JSONContextStackEntry {\n                    num_entries: num_entries_at_current_depth,\n                    context,\n                    current_key_index_and_length,\n                    json_index: index,\n                    current_identity: current_identity_value,\n                },\n            );\n            // subtotal 22.25\n            // 1 gate\n            let depth_index: Field = (depth - 1);\n            // 3.5 gates\n            let previous_stack_entry_packed = parent_context_stack[depth_index];\n\n            // 9.5 gates\n            let previous_stack_entry =\n                JSONContextStackEntry::from_field(previous_stack_entry_packed);\n\n            let object_or_array_entry: JSONEntry = JSONEntry {\n                array_pointer: previous_stack_entry.num_entries,\n                entry_type: token,\n                child_pointer: 0,\n                num_children: num_entries_at_current_depth,\n                json_pointer: previous_stack_entry.json_index,\n                json_length: length,\n                parent_index: previous_stack_entry.current_identity,\n                id: current_identity_value,\n            };\n            // 0\n            let value_entry: JSONEntry = JSONEntry {\n                array_pointer: num_entries_at_current_depth,\n                entry_type: token,\n                child_pointer: 0,\n                num_children: 0,\n                json_pointer: index,\n                json_length: length,\n                parent_index: current_identity_value,\n                id: 0,\n            };\n\n            // 3 gates\n            let object_or_array_entry_packed = object_or_array_entry.to_field();\n            // 2 gates\n            let value_entry_packed = value_entry.to_field();\n\n            // 2 gates\n            let diff = object_or_array_entry_packed - value_entry_packed;\n            std::as_witness(diff);\n            let new_entry = diff * is_end_of_object_or_array + value_entry_packed;\n            std::as_witness(new_entry);\n\n            // 3 gates\n            // subtotal 24 + 22.25 = 46.25\n            let old = current_identity_value;\n            current_identity_value = (next_identity_value * is_start_of_object_or_array);\n            std::as_witness(current_identity_value);\n            current_identity_value = current_identity_value\n                + (previous_stack_entry.current_identity * is_end_of_object_or_array);\n            std::as_witness(current_identity_value);\n            current_identity_value = current_identity_value + old * preserve_num_entries;\n            std::as_witness(current_identity_value);\n\n            // 2 gates\n            num_entries_at_current_depth =\n                num_entries_at_current_depth * preserve_num_entries + is_value_token;\n            std::as_witness(num_entries_at_current_depth);\n            num_entries_at_current_depth = num_entries_at_current_depth\n                + (previous_stack_entry.num_entries + 1) * is_end_of_object_or_array;\n            std::as_witness(num_entries_at_current_depth);\n\n            // 1 gate\n            // if `is_end_of_object_or_array == 1`, `new_context = 0` so we can do something cheaper than a conditional select:\n            context = previous_stack_entry.context * is_end_of_object_or_array + new_context;\n            std::as_witness(context);\n            // 3 gates\n            let common_term = current_identity_value\n                + context * (num_entries_at_current_depth - 1) * 0x1000000000000;\n            std::as_witness(common_term);\n            let mut new_key_data =\n                current_key_index_and_length * is_value_token * 0x10000 + common_term;\n            std::as_witness(new_key_data);\n            new_key_data = new_key_data\n                + previous_stack_entry.current_key_index_and_length\n                    * is_end_of_object_or_array\n                    * 0x10000;\n            std::as_witness(new_key_data);\n\n            // 3.5 gates\n            self.key_data[entry_ptr] = new_key_data * create_json_entry;\n\n            // 3.5 gates\n            parent_context_stack[depth] = new_context_stack_entry;\n\n            // 4.5 gates\n            self.json_entries_packed[entry_ptr] =\n                JSONEntryPacked { value: new_entry * create_json_entry };\n\n            // 1 gate\n            next_identity_value = next_identity_value + is_start_of_object_or_array;\n            std::as_witness(next_identity_value);\n\n            // 1 gate\n            depth = depth + is_start_of_object_or_array - is_end_of_object_or_array;\n\n            // 1 gate\n            // 2105 + 46.25\n            // subtotal 66.75?\n            entry_ptr += create_json_entry;\n            std::as_witness(entry_ptr);\n        }\n        self.validate_tokens(tokens);\n    }\n\n    /**\n     * @brief Perform the 1st transcript processing step as an unconstrained function\n     *        We will validate this transcript is correct via a constrained function\n     *        This is a bit cheaper than doing everything in a constrained function,\n     *        because we can use ROM arrays instead of RAM arrays\n     *        (i.e. we're only reading from our arrays, we don't write to them in constrained functions)\n     **/\n    unconstrained fn __build_transcript(self) -> [Field; MaxNumTokens] {\n        let mut raw_transcript: [Field; MaxNumTokens] = [0; MaxNumTokens];\n        let mut transcript_ptr: u32 = 0;\n        let mut scan_mode = GRAMMAR_SCAN as Field;\n        let mut length: Field = 0;\n        let mut previous_was_potential_escape_sequence = 0;\n        for i in 0..NumBytes {\n            // while this assert is in an unconstrained function, the out of bounds accesss `raw_transcript[transcript_ptr]` in build_transcript also generates failing constraints\n            assert(transcript_ptr < MaxNumTokens, \"build_transcript: MaxNumTokens limit exceeded!\");\n            let ascii = self.json[i];\n\n            let encoded_ascii =\n                previous_was_potential_escape_sequence * 1024 + scan_mode * 256 + ascii as Field;\n            let ScanData { scan_token, push_transcript, increase_length, is_potential_escape_sequence } =\n                ScanData::from_field(JSON_CAPTURE_TABLE[encoded_ascii]);\n            let mut push_transcript = push_transcript;\n            let mut scan_token = scan_token;\n            let mut increase_length = increase_length;\n\n            let new_entry = RawTranscriptEntry::to_field(\n                RawTranscriptEntry { encoded_ascii, index: i as Field - length, length },\n            );\n\n            raw_transcript[transcript_ptr] = new_entry;\n            length = length * (1 - push_transcript) + increase_length;\n            transcript_ptr += (push_transcript as bool) as u32;\n\n            previous_was_potential_escape_sequence = is_potential_escape_sequence;\n\n            scan_mode = scan_token;\n        }\n\n        // if we end in a scan mode where we're searching for a number, string or a literal (true/false/null), we have an incomplete token and this is invalid JSON\n        // NOTE: if we upgrade this parser to be able to process single-value JSON (e,g, \"999\" or \"\"hello\" : \"world\"\" this logic needs to be upgraded)\n        assert(\n            scan_mode == GRAMMAR_SCAN as Field,\n            \"build_transcript: incomplete token (number, string or literal)\",\n        );\n\n        // ensure an error isn't hiding in the last scanned token\n        scan_mode.assert_max_bit_size::<2>();\n        raw_transcript\n    }\n\n    /**\n     * @brief Construct a token transcript by iterating through self.json and using a lookup table `JSON_CAPTURE_TABLE` to define a state transition function\n     * @details JSON_CAPTURE_TABLE takes the following as input:\n     *          1. the ascii byte at the current location in the json\n     *          2. the current scan mode (are we searching for grammar, strings, numbers or literals?)\n     *          3. could this byte potentially be an escape sequence? (i.e. the previous byte was a backslash character \"\\\" and scan_mode == STRING_SCAN)\n     *          The table outputs the following flags:\n     *          1. what token have we scanned? (listed in enums::Token)\n     *          2. should we push this token to the transcript (no push if token == NO_TOKEN)\n     *          3. should we increase the length of the current entry we're evaluating?\n     *              (i.e. if token == STRING_TOKEN and scan_mode == STRING_SCAN, then increase the length because we're in the process of scanning a string)\n     *          4. is this scanned ascii character a potential escape sequence? i.e. scan_mode == STRING_SCAN and ascii = \"\\\"\n     *          5. have we entered an error state? (i.e. invalid grammar e.g. \":\" is followed by \"}\")\n     *\n     * NOTE: we represent error states in a nonstandard way to reduce gate count. Instead of handling an error flag,\n     *       an error state will increase the value of `scan_token` by 0x100000000. This will cause the next access into `JSON_CAPTURE_TABLE` to trigger an out of bounds error\n     *\n     * NOTE: the scanned transcript will be missing some edge cases that are caught via `swap_keys` and `capture_missing_tokens`:\n     *          1. If the scan mode is NUMERIC_SCAN or LITERAL_SCAN and the next character is a \",\" or \"}\" or \"]\",\n     *             we will push a NUMERIC_TOKEN or LITERAL_TOKEN into the transcript but we will MISS the VALUE_SEPARATOR_TOKEN, END_OBJECT_TOKEN or END_ARRAY_TOKEN\n     *             (accomodating this edge case requires conditionally pushing two transcript entries per iteration, so we do this in a separate step where we iterate over the transcript and not the json bytes)\n     *          2. We can't yet tell if an entry is a KEY_TOKEN or a STRING_TOKEN. All keys are represented as STRING_TOKEN. This gets fixed after `swap_keys` is evaluated\n     **/\n    fn build_transcript(self) -> Self {\n        let mut raw_transcript: [Field; MaxNumTokens] = [0; MaxNumTokens];\n        let mut transcript_ptr: Field = 0;\n        let mut scan_mode = GRAMMAR_SCAN;\n        let mut length: Field = 0;\n\n        //@Safety: check the comments below\n        let raw_transcript = unsafe { self.__build_transcript() };\n\n        // 14 gates per iteration, plus fixed cost for initing 2,048 size lookup table (4,096 gates)\n        let mut previous_was_potential_escape_sequence = 0;\n        for i in 0..NumBytes {\n            let ascii = self.json[i];\n\n            // 1 gate\n            let encoded_ascii =\n                previous_was_potential_escape_sequence * 1024 + scan_mode * 256 + ascii as Field;\n            std::as_witness(encoded_ascii);\n\n            // 2 gates\n            let capture_flags = JSON_CAPTURE_TABLE[encoded_ascii];\n            // 5 gates\n            let ScanData { scan_token, push_transcript, increase_length, is_potential_escape_sequence } =\n                ScanData::from_field(capture_flags);\n\n            // 2 gates\n            let raw = raw_transcript[transcript_ptr];\n\n            // 1 gate\n            let diff = raw\n                - RawTranscriptEntry::to_field(\n                    RawTranscriptEntry { encoded_ascii, index: i as Field - length, length },\n                );\n            std::as_witness(diff);\n            // 1 gate\n            assert(diff * push_transcript == 0);\n\n            // 1 gate\n            length = length * (1 - push_transcript) + increase_length;\n            std::as_witness(length);\n\n            // 1 gate\n            transcript_ptr += push_transcript;\n\n            previous_was_potential_escape_sequence = is_potential_escape_sequence;\n            scan_mode = scan_token;\n        }\n\n        // we encode error flag into the scan_token value, which must be less than 4\n        // the lookup into JSON_CAPTURE_TABLE applies an implicit 2-bit range check on `scan_token`\n        // however this does not get triggered if the final byte scanned produces an error state\n        length.assert_max_bit_size::<2>();\n\n        JSON {\n            json: self.json,\n            raw_transcript,\n            transcript: self.transcript,\n            transcript_length: transcript_ptr as u32,\n            key_data: self.key_data,\n            key_hashes: self.key_hashes,\n            layer_type_of_root: self.layer_type_of_root,\n            root_id: 1,\n            root_index_in_transcript: 0,\n            json_entries_packed: self.json_entries_packed,\n            unsorted_json_entries_packed: self.unsorted_json_entries_packed,\n            json_packed: self.json_packed,\n        }\n    }\n\n    /**\n     * @brief We compute the output of `capture_missing_tokens` via an unconstrained function, then validate the result is correct.\n     *        Saves some gates for same reason as in __build_transcript\n     **/\n    unconstrained fn __capture_missing_tokens(self) -> [Field; MaxNumTokens] {\n        let mut updated_transcript: [Field; MaxNumTokens] = [0; MaxNumTokens];\n        let mut transcript_ptr: u32 = 0;\n        // TODO: do we need a null transcript value?!?!\n        for i in 0..MaxNumTokens {\n            let RawTranscriptEntry { encoded_ascii, index, length } =\n                RawTranscriptEntry::from_field(self.raw_transcript[i]);\n\n            let PostProcessScanData { token, new_grammar, scan_token } =\n                PostProcessScanData::from_field(PROCESS_RAW_TRANSCRIPT_TABLE[encoded_ascii]);\n\n            let entry = TranscriptEntry::to_field(TranscriptEntry { token, index, length });\n            updated_transcript[transcript_ptr] = entry;\n\n            let index_valid: u32 = (i < self.transcript_length) as u32;\n            transcript_ptr += index_valid;\n\n            let index_of_possible_grammar = (index + length);\n            let new_entry =\n                TranscriptEntry { token: scan_token, index: index_of_possible_grammar, length: 0 };\n\n            let update = new_grammar * index_valid as Field;\n            let new_transcript = TranscriptEntry::to_field(new_entry);\n            assert(\n                transcript_ptr < MaxNumTokens,\n                \"capture_missing_tokens: MaxNumTokens limit exceeded!\",\n            );\n            updated_transcript[transcript_ptr] = new_transcript;\n            transcript_ptr += update as bool as u32;\n        }\n        updated_transcript\n    }\n\n    /**\n     * @brief Check for missing tokens that we could have missed in `build_transcript`\n     * @details If we had a json string where a NUMERIC_TOKEN or LITERAL_TOKEN is directly succeeded by a VALUE_SEPARATOR_TOKEN, END_OBJECT_TOKEN, END_ARRAY_TOKEN,\n     *          we will have missed the latter token.\n     *          We pick these up via the lookup table PROCESS_RAW_TRANSCRIPT_TABLE\n     **/\n    fn capture_missing_tokens(&mut self) {\n        let mut transcript_ptr: Field = 0;\n        // hmm probably need a null transcript value?!?!\n        //@Safety: check the comments below\n        let updated_transcript = unsafe { self.__capture_missing_tokens() };\n        // 26? gates per iteration\n        let range_valid: [Field; MaxNumTokens] = get_validity_flags(self.transcript_length);\n        for i in 0..MaxNumTokens {\n            // 5.25 gates\n            let RawTranscriptEntry { encoded_ascii, index, length } =\n                RawTranscriptEntry::from_field(self.raw_transcript[i]);\n            // 6.75 gates\n            let PostProcessScanData { token, new_grammar, scan_token } =\n                PostProcessScanData::from_field(PROCESS_RAW_TRANSCRIPT_TABLE[encoded_ascii]);\n            // 2 gates\n            let index_valid: Field = range_valid[i];\n            // 1 gate\n            let entry = TranscriptEntry::to_field(TranscriptEntry { token, index, length });\n            // 2 gates\n            let diff = updated_transcript[transcript_ptr] - entry;\n            std::as_witness(diff);\n            assert(diff * index_valid == 0);\n            // 1 gate\n            transcript_ptr += index_valid;\n            // 0 gate (merged into TranscriptEntry::to_field)\n            let index_of_possible_grammar = (index + length);\n            // 0 gates\n            let new_entry =\n                TranscriptEntry { token: scan_token, index: index_of_possible_grammar, length: 0 };\n            // 2 gates\n            let update = new_grammar as Field * index_valid;\n            std::as_witness(update);\n            // 1 gate\n            let new_transcript = TranscriptEntry::to_field(new_entry);\n            // 4 gates\n            let diff = updated_transcript[transcript_ptr] - new_transcript;\n            std::as_witness(diff);\n            assert(diff * update == 0);\n            // 1 gate\n            transcript_ptr += update;\n        }\n        self.transcript = updated_transcript;\n\n        // TODO we could make this more efficient...probably not a big deal though\n        let first = TranscriptEntry::from_field(self.transcript[0]);\n        if (first.token == BEGIN_OBJECT_TOKEN) {\n            self.layer_type_of_root = OBJECT_LAYER;\n        } else if (first.token == BEGIN_ARRAY_TOKEN) {\n            self.layer_type_of_root = ARRAY_LAYER;\n        } else if (first.token == STRING_TOKEN) {\n            self.layer_type_of_root = SINGLE_VALUE_LAYER as Field;\n        }\n    }\n\n    fn parse_json<let StringBytes: u32>(stringbytes: [u8; StringBytes]) -> Self {\n        assert(StringBytes <= NumBytes, \"json length exceeds NumBytes!\");\n        let mut text: [u8; NumBytes] = [0; NumBytes];\n        for i in 0..StringBytes {\n            text[i] = stringbytes[i];\n        }\n        for i in StringBytes..NumBytes {\n            text[i] = 32; // whitespace character\n        }\n        let mut json = JSON {\n            json: text,\n            raw_transcript: [0; MaxNumTokens],\n            transcript: [0; MaxNumTokens],\n            transcript_length: 0,\n            key_data: [0; MaxNumValues],\n            key_hashes: [0; MaxNumValues],\n            layer_type_of_root: 0,\n            root_id: 1,\n            root_index_in_transcript: 0,\n            json_entries_packed: [JSONEntryPacked::default(); MaxNumValues],\n            unsorted_json_entries_packed: [JSONEntryPacked::default(); MaxNumValues],\n            json_packed: [0; NumPackedFields],\n        };\n\n        json = json.build_transcript();\n        json.capture_missing_tokens();\n        json.keyswap();\n        json.compute_json_packed();\n        json.create_json_entries();\n\n        json.compute_keyhash_and_sort_json_entries();\n\n        json\n    }\n\n    fn parse_json_from_string<let StringBytes: u32>(s: str<StringBytes>) -> Self {\n        JSON::parse_json(s.as_bytes())\n    }\n}\n\n// TODO: our capture tables are not correctly set up to process a JSON blob that does not begin with an object or array\n// #[test]\n// fn test_single_value() {\n//     let text = \"100\";\n//     let mut json: JSON<3, 10, 20, 20> = JSON::parse_json_from_string(text);\n//\n//     assert(json.get_length() == 0);\n//     assert(json.get_array_element_as_number(0) == 100);\n// }\n\n#[test]\nfn test_numbers() {\n    let text = \"{ \\\"a\\\": 9, \\\"b\\\": 99, \\\"c\\\": 999, \\\"d\\\": 9999, \\\"e\\\": 99999, \\\"f\\\": 999999, \\\"g\\\": 9999999, \\\"h\\\": 99999999, \\\"i\\\": 999999999, \\\"j\\\": 9999999999, \\\"k\\\": 99999999999, \\\"l\\\": 999999999999, \\\"m\\\": 9999999999999, \\\"n\\\": 99999999999999, \\\"o\\\": 999999999999999, \\\"p\\\": 999999999999999,\\\"q\\\": 9999999999999999, \\\"r\\\": 99999999999999999, \\\"s\\\": 999999999999999999, \\\"t\\\": 9999999999999999999, \\\"u\\\": 18446744073709551615}\";\n    let mut json: JSON<372, 16, 100, 24, 2> = JSON::parse_json_from_string(text);\n\n    let a = json.get_number_unchecked(\"a\".as_bytes());\n    let b = json.get_number_unchecked(\"b\".as_bytes());\n    let c = json.get_number_unchecked(\"c\".as_bytes());\n    let d = json.get_number_unchecked(\"d\".as_bytes());\n    let e = json.get_number_unchecked(\"e\".as_bytes());\n    let f = json.get_number_unchecked_var(BoundedVec { storage: \"ftrololol\".as_bytes(), len: 1 });\n    let g = json.get_number(\"g\".as_bytes()).unwrap();\n    let h = json.get_number_var(BoundedVec { storage: \"h\".as_bytes(), len: 1 }).unwrap();\n    let i = json.get_number_unchecked(\"i\".as_bytes());\n    let j = json.get_number_unchecked(\"j\".as_bytes());\n    let k = json.get_number_unchecked(\"k\".as_bytes());\n    let l = json.get_number_unchecked(\"l\".as_bytes());\n    let m = json.get_number_unchecked(\"m\".as_bytes());\n    let n = json.get_number_unchecked(\"n\".as_bytes());\n    let o = json.get_number_unchecked(\"o\".as_bytes());\n    let p = json.get_number_unchecked(\"p\".as_bytes());\n    let q = json.get_number_unchecked(\"q\".as_bytes());\n    let r = json.get_number_unchecked(\"r\".as_bytes());\n    let s = json.get_number_unchecked(\"s\".as_bytes());\n    let t = json.get_number_unchecked(\"t\".as_bytes());\n    let u = json.get_number_unchecked(\"u\".as_bytes());\n\n    assert(a == 9);\n    assert(b == 99);\n    assert(c == 999);\n    assert(d == 9999);\n    assert(e == 99999);\n    assert(f == 999999);\n    assert(g == 9999999);\n    assert(h == 99999999);\n    assert(i == 999999999);\n    assert(j == 9999999999);\n    assert(k == 99999999999);\n    assert(l == 999999999999);\n    assert(m == 9999999999999);\n    assert(n == 99999999999999);\n    assert(o == 999999999999999);\n    assert(p == 999999999999999);\n    assert(q == 9999999999999999);\n    assert(r == 99999999999999999);\n    assert(s == 999999999999999999);\n    assert(t == 9999999999999999999);\n    assert(u == 18446744073709551615);\n}\n\n#[test]\nfn test_parent_array() {\n    let text = \"[0,10,21,32,44]\";\n    let mut json: JSON<15, 10, 20, 20, 2> = JSON::parse_json_from_string(text);\n    assert(json.get_length() == 5);\n    assert(json.get_number_from_array_unchecked(0) == 0);\n    assert(json.get_number_from_array_unchecked(1) == 10);\n    assert(json.get_number_from_array_unchecked(2) == 21);\n    assert(json.get_number_from_array_unchecked(3) == 32);\n    assert(json.get_number_from_array_unchecked(4) == 44);\n}\n\n#[test]\nfn test_escaped_strings() {\n    let text = \"{   \\\"name\\\": \\\"\\\\\\\"Ade\\\\nel Solangi\\\\\\\"\\\", \\\"testA\\\": false, \\\"testB\\\": true, \\\"testC\\\": null }                                                                   \";\n    let mut json: JSON<148, 10, 20, 20, 2> = JSON::parse_json_from_string(text);\n    let result: BoundedVec<u8, 19> = json.get_string_unchecked(\"name\".as_bytes());\n    assert(result.storage == BoundedVec::from_array(\"\\\"Ade\\nel Solangi\\\"\".as_bytes()).storage);\n    assert(result.len == 16);\n}\n\n#[test]\nfn test_parse_json() {\n    let text = \"{ \\\"foo\\\": 1234, \\\"bar\\\": { \\\"foo\\\": 9876, \\\"bar\\\": true }, \\\"baz\\\": \\\"hello\\\" }\";\n    let mut json: JSON<68, 7, 30, 30, 2> = JSON::parse_json_from_string(text);\n\n    let result = json.get_string_unchecked(\"baz\".as_bytes());\n    assert(result.storage == \"hello\".as_bytes());\n\n    let result: Option<BoundedVec<u8, 5>> = json.get_string(\"baz\".as_bytes());\n    assert(result.is_some());\n    assert(result.unwrap().storage == \"hello\".as_bytes());\n\n    let result: Option<BoundedVec<u8, 1>> = json.get_string(\"wibble\".as_bytes());\n    assert(result.is_some() == false);\n\n    let result: u64 = json.get_number_unchecked(\"foo\".as_bytes());\n    assert(result == 1234);\n\n    let result: Option<u64> = json.get_number(\"foo\".as_bytes());\n    assert(result.is_some());\n    assert(result.unwrap() == 1234);\n\n    let result: Option<u64> = json.get_number(\"fooo\".as_bytes());\n    assert(result.is_some() == false);\n\n    let mut nested_json = json.get_object(\"bar\".as_bytes()).unwrap();\n    let result: Option<u64> = nested_json.get_number_var(\n        BoundedVec { storage: \"foounusedkeybyteslolol\".as_bytes(), len: 3 },\n    );\n    assert(result.is_some() == true);\n    assert(result.unwrap() == 9876);\n\n    let key0: BoundedVec<u8, 3> = BoundedVec::from_array(\"bar\".as_bytes());\n    let key1: BoundedVec<u8, 3> = BoundedVec::from_array(\"baz\".as_bytes());\n\n    let result: Option<BoundedVec<u8, 10>> = json.get_string_from_path([key0, key1]);\n    assert(result.is_some() == false);\n}\n\n#[test]\nfn test_literal() {\n    let text = \"{   \\\"name\\\": \\\"Adeel Solangi\\\", \\\"testA\\\": false, \\\"testB\\\": true, \\\"testC\\\": null }                                                                   \";\n    let mut json: JSON<142, 10, 20, 20, 2> = JSON::parse_json_from_string(text);\n\n    let result: JSONLiteral = json.get_literal_unchecked(\"testA\".as_bytes());\n    assert(result.is_false() == true);\n    assert(result.is_true() == false);\n    assert(result.is_null() == false);\n    assert(result.to_bool() == false);\n\n    let result_option: Option<JSONLiteral> = json.get_literal(\"testA\".as_bytes());\n    assert(result_option.is_some());\n    assert(result_option.unwrap().value == result.value);\n}\n\n#[test]\nfn test_arrays() {\n    let text = \"{   \\\"name\\\": \\\"Adeel Solangi\\\", \\\"age\\\": 62, \\\"portfolio\\\": { \\\"vibe_ratings\\\": [1,2],\\\"elemental_lorem\\\": false }}                                                 \";\n    let mut json: JSON<153, 10, 60, 60, 2> = JSON::parse_json_from_string(text);\n\n    assert(json.key_exists(BoundedVec { storage: \"foo\".as_bytes(), len: 3 }) == false);\n    assert(json.key_exists(BoundedVec { storage: \"name\".as_bytes(), len: 4 }));\n    assert(json.key_exists(BoundedVec { storage: \"age\".as_bytes(), len: 3 }));\n    assert(json.key_exists(BoundedVec { storage: \"portfolio\".as_bytes(), len: 9 }));\n}\n\n#[test(should_fail_with = \"build_transcript: MaxNumTokens limit exceeded!\")]\nfn test_json_not_enough_tokens_fails() {\n    let text = \"{ \\\"hello \\\": \\\"world\\\" }\";\n    let _: JSON<26, 10, 2, 20, 2> = JSON::parse_json_from_string(text);\n}\n\n#[test(should_fail_with = \"capture_missing_tokens: MaxNumTokens limit exceeded!\")]\nfn test_json_not_enough_tokens_fails_2() {\n    // we should exceed the limit of 8 tokens here, when capturing the `,` token missed by build_transcript\n    let text = \"{ \\\"hello \\\": false,\\\"world\\\": true }\";\n    let _: JSON<33, 10, 8, 20, 2> = JSON::parse_json_from_string(text);\n}\n\n#[test(should_fail_with = \"create_json_entries: MaxNumValues limit exceeded!\")]\nfn test_json_not_enough_values_fails() {\n    let text = \"{ \\\"hello \\\": false,\\\"world\\\": true }\";\n    let _: JSON<33, 10, 10, 4, 2> = JSON::parse_json_from_string(text);\n}\n\n#[test(should_fail_with = \"ValidationFlags: grammar error\")]\nfn test_json_object_without_key_fails() {\n    let text = \"{ \\\"hello \\\": \\\"world\\\", 100 }\";\n    let _: JSON<26, 10, 20, 20, 2> = JSON::parse_json_from_string(text);\n}\n\n#[test(should_fail_with = \"ValidationFlags: grammar error\")]\nfn test_json_array_with_key_fails() {\n    let text = \"[ \\\"hello \\\": \\\"world\\\" ]\";\n    let _: JSON<26, 10, 20, 20, 2> = JSON::parse_json_from_string(text);\n}\n\n#[test(should_fail_with = \"ValidationFlags: grammar error\")]\nfn test_json_unclosed_object_fails() {\n    let text = \"{ \\\"hello \\\": \\\"world\\\" \";\n    let _: JSON<26, 10, 20, 20, 2> = JSON::parse_json_from_string(text);\n}\n\n#[test(should_fail_with = \"ValidationFlags: grammar error\")]\nfn test_json_object_closed_with_array_fails() {\n    let text = \"{ \\\"hello \\\": \\\"world\\\" ]\";\n    let _: JSON<26, 10, 20, 20, 2> = JSON::parse_json_from_string(text);\n}\n\n#[test(should_fail_with = \"ValidationFlags: grammar error\")]\nfn test_json_object_with_trailing_comma_fails() {\n    let text = \"{ \\\"hello \\\" : \\\"world\\\", }\";\n    let _: JSON<26, 10, 20, 20, 2> = JSON::parse_json_from_string(text);\n}\n\n#[test(should_fail_with = \"ValidationFlags: grammar error\")]\nfn test_json_unclosed_array_fails() {\n    let text = \"[ \\\"hello \\\", \\\"world\\\"\";\n    let _: JSON<19, 10, 20, 20, 2> = JSON::parse_json_from_string(text);\n}\n\n#[test(should_fail_with = \"validate_tokens: unclosed objects or arrays\")]\nfn test_json_unclosed_array_fails_2() {\n    let text = \"[ \\\"hello \\\", \\\"world\\\", [1,2,3,4] \";\n    let _: JSON<31, 10, 20, 20, 2> = JSON::parse_json_from_string(text);\n}\n\n#[test(should_fail_with = \"ValidationFlags: grammar error\")]\nfn test_json_array_with_trailing_comma_fails() {\n    let text = \"[ \\\"hello \\\", \\\"world\\\", ]\";\n    let _: JSON<26, 10, 20, 20, 2> = JSON::parse_json_from_string(text);\n}\n\n#[test(should_fail_with = \"ValidationFlags: grammar error\")]\nfn test_json_array_closed_with_object_fails() {\n    let text = \"[ \\\"hello \\\": \\\"world\\\" }\";\n    let _: JSON<26, 10, 20, 20, 2> = JSON::parse_json_from_string(text);\n}\n\n#[test(should_fail_with = \"ScanData: Invalid token\")]\nfn test_json_key_not_wrapped_in_quotes_fails() {\n    let text = \"{ false: \\\"world\\\" }\";\n    let _: JSON<26, 10, 20, 20, 2> = JSON::parse_json_from_string(text);\n}\n\n#[test(should_fail_with = \"ScanData: Invalid token\")]\nfn test_json_string_not_wrapped_in_quotes_fails() {\n    let text = \"{ \\\"hello \\\": world }\";\n    let _: JSON<26, 10, 20, 20, 2> = JSON::parse_json_from_string(text);\n}\n\n#[test(should_fail_with = \"ScanData: Invalid token\")]\nfn test_json_char_outside_of_string_fails() {\n    let text = \"{ \\\"hello \\\", \\\"world\\\" a}\";\n    let _: JSON<26, 10, 20, 20, 2> = JSON::parse_json_from_string(text);\n}\n\n#[test(should_fail_with = \"ValidationFlags: grammar error\")]\nfn test_json_char_outside_of_string_fails_2() {\n    // n could be the start of the literal \"null\", so this passes the ScanData check but fails ValidationFlags\n    let text = \"{ \\\"hello \\\", \\\"world\\\" n}\";\n    let _: JSON<26, 10, 20, 20, 2> = JSON::parse_json_from_string(text);\n}\n\n#[test(should_fail_with = \"ValidationFlags: grammar error\")]\nfn test_json_array_with_invalid_tokens_fails() {\n    // n could be the start of the literal \"null\", so this passes the ScanData check but fails ValidationFlags\n    let text = \"[,,,]\";\n    let _: JSON<26, 10, 20, 20, 2> = JSON::parse_json_from_string(text);\n}\n\n#[test(should_fail_with = \"Cannot find key/value straddling KEY_DELIMITER_TOKEN\")]\nfn test_json_object_with_invalid_tokens_fails() {\n    // n could be the start of the literal \"null\", so this passes the ScanData check but fails ValidationFlags\n    let text = \"{:::}\";\n    let _: JSON<26, 10, 20, 20, 2> = JSON::parse_json_from_string(text);\n}\n\n#[test]\nfn test_json_empty_object_passes() {\n    // n could be the start of the literal \"null\", so this passes the ScanData check but fails ValidationFlags\n    let text = \"{}\";\n    let _: JSON<26, 10, 20, 20, 2> = JSON::parse_json_from_string(text);\n}\n\n#[test]\nfn test_json_empty_array_passes() {\n    // n could be the start of the literal \"null\", so this passes the ScanData check but fails ValidationFlags\n    let text = \"[]\";\n    let _: JSON<26, 10, 20, 20, 2> = JSON::parse_json_from_string(text);\n}\n\n#[test(should_fail)]\nfn test_finishing_with_string_scan_fails() {\n    let json_string = \"{ } \\\"}\";\n    let _: JSON<26, 10, 20, 20, 2> = JSON::parse_json_from_string(json_string);\n}\n\n#[test(should_fail)]\nfn test_finishing_with_literal_scan_fails() {\n    let json_string = \"{ } fa\";\n    let _: JSON<26, 10, 20, 20, 2> = JSON::parse_json_from_string(json_string);\n}\n\n#[test(should_fail)]\nfn test_finishing_with_numeric_scan_fails() {\n    let json_string = \"{ } 123\";\n    let _: JSON<26, 10, 20, 20, 2> = JSON::parse_json_from_string(json_string);\n}\n\n#[test(should_fail)]\nfn key_is_not_a_key() {\n    let json_string = \"{1\\n:0}\";\n    let _: JSON<26, 10, 20, 20, 2> = JSON::parse_json_from_string(json_string);\n}\n","path":"/home/runner/nargo/github.com/noir-lang/noir_json_parser/v0.4.0/src/json.nr"},"79":{"source":"/**\n * @brief contains data we need to keep track when, in `create_json_entries`, we enter or exist from an object or array\n **/\nstruct JSONContextStackEntry {\n    num_entries: Field,\n    context: Field,\n    current_key_index_and_length: Field,\n    json_index: Field,\n    current_identity: Field,\n}\nimpl JSONContextStackEntry {\n    unconstrained fn __from_field(f: Field) -> Self {\n        let bytes: [u8; 11] = f.to_be_bytes();\n        let context = bytes[0] as Field;\n        let num_entries = bytes[1] as Field * 0x100 + bytes[2] as Field;\n        let current_key_length = bytes[3] as Field * 0x100 + bytes[4] as Field;\n        let current_key_index = bytes[5] as Field * 0x100 + bytes[6] as Field;\n        let json_index = bytes[7] as Field * 0x100 + bytes[8] as Field;\n        let current_identity = bytes[9] as Field * 0x100 + bytes[10] as Field;\n        let current_key_index_and_length = current_key_index + current_key_length * 0x10000;\n        JSONContextStackEntry {\n            num_entries,\n            context,\n            current_key_index_and_length,\n            json_index,\n            current_identity,\n        }\n    }\n\n    /**\n     * @brief we pack multiple values into a Field element in order to reduce the number of array read/write queries we need\n     *        (each query will be 3.5 gates as we read and write from/to unknown locations)\n     * @note method cost = 9.5 gates\n     **/\n    fn from_field(f: Field) -> Self {\n        //@Safety: the set of assertions done below will ensure the result is in the correct domain, and the computed result matches the input f\n        let result = unsafe { JSONContextStackEntry::__from_field(f) };\n\n        result.context.assert_max_bit_size::<8>(); // 1.25\n        result.num_entries.assert_max_bit_size::<16>(); // 1.5\n        result.current_key_index_and_length.assert_max_bit_size::<32>(); // 1.75\n        result.json_index.assert_max_bit_size::<16>(); // 1.5\n        result.current_identity.assert_max_bit_size::<16>(); // 1.5\n        assert(result.to_field() == f); // 2\n        result\n    }\n\n    /**\n     * @brief we pack multiple values into a Field element in order to reduce the number of array read/write queries we need\n     *        (each query will be 3.5 gates as we read and write from/to unknown locations)\n     * @note method cost = 2 gates\n     **/\n    fn to_field(self) -> Field {\n        self.current_identity\n            + self.json_index * 0x10000\n            + self.current_key_index_and_length * 0x100000000\n            + self.num_entries * 0x10000000000000000\n            + self.context * 0x100000000000000000000\n    }\n}\n\n/**\n * @brief describes a single array, object or value within our JSON\n **/\nstruct JSONEntry {\n    entry_type: Field, // is this an OBJECT_TOKEN, ARRAY_TOKEN, STRING_TOKEN, NUMERIC_TOKEN or LITERAL_TOKEN?\n    id: Field, // if this is an object or array, describes the unique identifier assigned to this item\n    parent_index: Field, // if parent is an object or array, describes the unique identifier assigned to our parent\n    array_pointer: Field, // if parent is an array, where in the array are we?\n    child_pointer: Field, // if this is an object or array, points to the location in `json_entries_packed` of this item's first child\n    num_children: Field, // if this is an object or array, how many child elements do we contain?\n    json_pointer: Field, // points to the json that describes the first byte of this entry\n    json_length: Field, // how many bytes in the json describes this item? (only for strings, numbers or literals)\n}\nimpl JSONEntry {\n    fn new() -> Self {\n        JSONEntry {\n            array_pointer: 0,\n            entry_type: 0,\n            child_pointer: 0,\n            num_children: 0,\n            json_pointer: 0,\n            json_length: 0,\n            parent_index: 0,\n            id: 0,\n        }\n    }\n\n    unconstrained fn __extract_parent_index_from_field(f: Field) -> (Field, Field, Field) {\n        let entry = JSONEntry::from_field(f);\n        let low = entry.id;\n        let mid = entry.parent_index;\n        let hi = (f - low - mid * 0x10000) / 0x100000000;\n        (low, mid, hi)\n    }\n\n    fn add_child_pointer_into_field(f: Field, child_pointer: Field) -> Field {\n        f + child_pointer * 0x100000000000000000000\n    }\n    unconstrained fn __extract_entry_type_and_id_from_field(f: Field) -> (Field, Field, Field) {\n        let entry = JSONEntry::from_field(f);\n        let id = entry.id;\n        let entry_type = entry.entry_type;\n        let mid = (f - id - entry_type * 0x100000000000000000000000000000000000000) / 0x10000;\n        (id, mid, entry_type)\n    }\n    unconstrained fn __extract_entry_type_id_and_parent_index_from_field(\n        f: Field,\n    ) -> (Field, Field, Field, Field) {\n        let entry = JSONEntry::from_field(f);\n        let id = entry.id;\n        let entry_type = entry.entry_type;\n        let parent_index = entry.parent_index;\n        let mid = (\n            f - id - parent_index * 0x10000 - entry_type * 0x100000000000000000000000000000000000000\n        )\n            / 0x100000000;\n        (id, parent_index, mid, entry_type)\n    }\n\n    // 11.75 gates\n    fn extract_entry_type_id_and_parent_index_from_field(f: Field) -> (Field, Field, Field) {\n        //@Safety: we check all the outputs are in the correct range and we can construct the input from the outputs of the decomposition\n        let (id, parent_index, mid, entry_type) =\n            unsafe { JSONEntry::__extract_entry_type_id_and_parent_index_from_field(f) };\n        id.assert_max_bit_size::<8>(); // 1.25\n        parent_index.assert_max_bit_size::<16>(); // 1.5\n        entry_type.assert_max_bit_size::<16>(); // 1.5\n        mid.assert_max_bit_size::<136>(); // 5.5\n        assert(\n            id\n                + parent_index * 0x10000\n                + mid * 0x100000000\n                + entry_type * 0x100000000000000000000000000000000000000\n                == f,\n        );\n\n        (id, parent_index, entry_type)\n    }\n    fn extract_entry_type_and_id_from_field(f: Field) -> (Field, Field) {\n        let (id, mid, entry_type) = unsafe { JSONEntry::__extract_entry_type_and_id_from_field(f) };\n        id.assert_max_bit_size::<8>(); // 1.25\n        entry_type.assert_max_bit_size::<16>(); // 1.5\n        mid.assert_max_bit_size::<136>(); // 5.5\n        assert(id + mid * 0x10000 + entry_type * 0x100000000000000000000000000000000000000 == f);\n        (id, entry_type)\n    }\n\n    fn extract_parent_index_from_field(f: Field) -> Field {\n        //@Safety: we check all the outputs are in the correct range and we can construct the input from the outputs of the decomposition\n        let (low, parent_index, hi) = unsafe { JSONEntry::__extract_parent_index_from_field(f) };\n\n        low.assert_max_bit_size::<16>(); // 1.75\n        hi.assert_max_bit_size::<128>(); // 5.5\n        parent_index.assert_max_bit_size::<16>(); // 1.75\n        assert(low + parent_index * 0x10000 + hi * 0x100000000 == f); // 1\n        // 10 gates?\n        parent_index\n    }\n    unconstrained fn __from_field(f: Field) -> Self {\n        let bytes: [u8; 20] = f.to_be_bytes(); // 10.5 gates\n        let entry_type = bytes[0] as Field;\n\n        let json_length = bytes[2] as Field * 0x100 + bytes[3] as Field;\n        let json_pointer = bytes[4] as Field * 0x100 + bytes[5] as Field;\n        let num_children = bytes[6] as Field * 0x100 + bytes[7] as Field;\n        let child_pointer = bytes[8] as Field * 0x100 + bytes[9] as Field;\n        let array_pointer = bytes[10] as Field * 0x100 + bytes[11] as Field;\n        let parent_index = bytes[16] as Field * 0x100 + bytes[17] as Field; // 6 gates\n        let id = bytes[18] as Field * 0x100 + bytes[19] as Field; // 6 gates\n        JSONEntry {\n            array_pointer,\n            child_pointer,\n            num_children,\n            json_pointer,\n            json_length,\n            entry_type,\n            parent_index,\n            id,\n        }\n    }\n\n    fn to_field(self) -> Field {\n        self.id\n            + self.parent_index * 0x10000\n            + self.array_pointer * 0x10000000000000000 // 2 bytes\n            + self.child_pointer * 0x100000000000000000000 // 2 bytes\n            + self.num_children * 0x1000000000000000000000000 // 2 bytes\n            + self.json_pointer * 0x10000000000000000000000000000 // 2 bytes\n            + self.json_length * 0x100000000000000000000000000000000 // 2 bytes\n            + self.entry_type * 0x100000000000000000000000000000000000000 // 1 byte\n        // 4 gates. oof\n    }\n    fn from_field(f: Field) -> Self {\n        //@Safety: we check all the outputs are in the correct range and match the input field value\n        let result = unsafe { JSONEntry::__from_field(f) };\n        result.entry_type.assert_max_bit_size::<8>();\n        result.json_length.assert_max_bit_size::<16>();\n        result.json_pointer.assert_max_bit_size::<16>();\n        result.num_children.assert_max_bit_size::<16>();\n        result.child_pointer.assert_max_bit_size::<16>();\n        result.array_pointer.assert_max_bit_size::<16>();\n        result.parent_index.assert_max_bit_size::<16>();\n        result.id.assert_max_bit_size::<16>();\n        assert(result.to_field() == f);\n        result\n    }\n}\n\nimpl std::convert::From<JSONEntryPacked> for JSONEntry {\n    fn from(JSONEntryPacked { value: f }: JSONEntryPacked) -> Self {\n        //@Safety: we check all the outputs are in the correct range and match the input field value\n        let result = unsafe { JSONEntry::__from_field(f) };\n        result.entry_type.assert_max_bit_size::<8>();\n        result.json_length.assert_max_bit_size::<16>();\n        result.json_pointer.assert_max_bit_size::<16>();\n        result.num_children.assert_max_bit_size::<16>();\n        result.child_pointer.assert_max_bit_size::<16>();\n        result.array_pointer.assert_max_bit_size::<16>();\n        result.parent_index.assert_max_bit_size::<16>();\n        result.id.assert_max_bit_size::<16>();\n        assert(result.to_field() == f);\n        result\n    }\n}\n\nimpl std::cmp::Eq for JSONEntry {\n    // N.B. used for testing\n    fn eq(self, other: Self) -> bool {\n        let array_ptr = (self.array_pointer == other.array_pointer);\n        let entry = self.entry_type == other.entry_type;\n        let child = (self.child_pointer == other.child_pointer);\n        let num_children = (self.num_children == other.num_children);\n        let json_pointer = (self.json_pointer == other.json_pointer);\n        let json_length = (self.json_length == other.json_length);\n        array_ptr | entry | child | num_children | json_pointer | json_length\n    }\n}\n\n/**\n * @brief describes a JSONEntry object's data, but packed into a single field element.\n * @description We do this to minimize the number of array lookups we perform\n **/\nstruct JSONEntryPacked {\n    value: Field,\n}\n\nimpl std::cmp::Eq for JSONEntryPacked {\n    fn eq(self, other: Self) -> bool {\n        self.value == other.value\n    }\n}\n\nimpl std::default::Default for JSONEntryPacked {\n    fn default() -> Self {\n        JSONEntryPacked { value: 0 }\n    }\n}\n","path":"/home/runner/nargo/github.com/noir-lang/noir_json_parser/v0.4.0/src/json_entry.nr"},"81":{"source":"use crate::_string_tools::slice_field::slice_200_bits_from_field;\nuse crate::_string_tools::slice_packed_field::slice_fields;\n\n/**\n * @brief utility struct that computes a 200-bit Poseidon hash of some bytes,\n *        when the bytes are represented as packed 31 byte Field elements\n * @note we wrap `get_keyhash` in a struct so that the KeyFields parameter can be defined ahead of time\n **/\nstruct FieldHasher<let KeyFields: u32> {}\n\nimpl<let KeyFields: u32> FieldHasher<KeyFields> {\n\n    fn get_keyhash<let NumPackedFields: u32>(\n        _: Self,\n        packed_fields: [Field; NumPackedFields],\n        body_index: Field,\n        key_length: Field,\n    ) -> Field {\n        let key_fields: [Field; KeyFields] = slice_fields(packed_fields, body_index, key_length);\n        let hashed = dep::std::hash::poseidon2::Poseidon2::hash(key_fields, KeyFields as u32);\n        slice_200_bits_from_field(hashed)\n    }\n}\n\n/**\n * @brief utility struct that computes a 200-bit Poseidon hash of some bytes,\n *        when the bytes are represented as a substring in a byte array\n * @note we wrap `get_keyhash` in a struct so that the KeyFields parameter can be defined ahead of time\n * @note produces identical hash outputs when compared w. FieldHasher\n **/\nstruct ByteHasher<let KeyFields: u32> {}\n\nimpl<let KeyFields: u32> ByteHasher<KeyFields> {\n\n    fn get_keyhash_var<let N: u32>(\n        _: Self,\n        body_text: [u8; N],\n        body_index: u32,\n        key_length: u32,\n    ) -> Field {\n        assert(key_length < KeyFields * 31, \"key too large\");\n\n        let mut key_fields: [Field; KeyFields] = [0; KeyFields];\n\n        let mut key_idx: u32 = 0;\n        let mut limb = 0;\n\n        for j in 0..KeyFields {\n            limb = 0;\n\n            for _ in 0..31 {\n                let valid = (key_idx < key_length) as Field;\n                limb *= 0x100;\n                let byte_index = (body_index as Field + key_idx as Field) * valid;\n                let byte = body_text[byte_index] as Field;\n                limb += byte * valid;\n                key_idx += 1;\n            }\n            key_fields[j] = limb;\n        }\n\n        let hashed_full = dep::std::hash::poseidon2::Poseidon2::hash(key_fields, KeyFields as u32);\n\n        let mut r = slice_200_bits_from_field(hashed_full);\n        r\n    }\n}\n\n","path":"/home/runner/nargo/github.com/noir-lang/noir_json_parser/v0.4.0/src/keyhash.nr"},"82":{"source":"use crate::_comparison_tools::lt::assert_lte_240_bit;\nuse crate::_comparison_tools::lt::lt_field_16_bit;\nuse crate::_comparison_tools::lt::lte_field_240_bit;\nuse crate::_string_tools::slice_packed_field::slice_fields;\nuse crate::json::JSON;\nuse crate::json_entry::{JSONEntry, JSONEntryPacked};\nuse crate::json_tables::TOKEN_ENDS_OBJECT_OR_ARRAY;\nuse crate::keyhash::FieldHasher;\n\nuse dep::noir_sort;\n\nuse dep::std::hash::poseidon2;\nstruct KeyIndexData {\n    json_index: Field,\n    json_length: Field,\n    parent_id: Field,\n    array_index: Field,\n}\n\nimpl KeyIndexData {\n    fn to_field(self) -> Field {\n        self.parent_id\n            + self.json_index as Field * 0x10000\n            + self.json_length as Field * 0x100000000\n            + self.array_index * 0x1000000000000\n    }\n\n    unconstrained fn __from_field(packed: Field) -> Self {\n        let unpacked: [u8; 8] = packed.to_be_bytes();\n        let array_index: Field = unpacked[1] as Field + unpacked[0] as Field * 0x100;\n        let json_length: Field = unpacked[3] as Field + unpacked[2] as Field * 0x100;\n        let json_index: Field = unpacked[5] as Field + unpacked[4] as Field * 0x100;\n        let parent_id: Field = unpacked[7] as Field + unpacked[6] as Field * 0x100;\n        KeyIndexData { json_index, json_length, parent_id, array_index }\n    }\n\n    fn from_field(packed: Field) -> Self {\n        //@Safety: check the comments below\n        let result = unsafe { KeyIndexData::__from_field(packed) };\n        // checks that array_index is in range\n        result.array_index.assert_max_bit_size::<16>();\n        // checks that json_length is in range\n        result.json_length.assert_max_bit_size::<16>();\n        // checks that json_index is in range\n        result.json_index.assert_max_bit_size::<16>();\n        // checks that parent_id is in range\n        result.parent_id.assert_max_bit_size::<16>();\n        // checks that the input is a valid combination of the outputs of the decomposition\n        assert(result.to_field() == packed);\n        result\n    }\n}\n\nimpl<let NumBytes: u32, let NumPackedFields: u32, let MaxNumTokens: u32, let MaxNumValues: u32, let MaxKeyFields: u32> JSON<NumBytes, NumPackedFields, MaxNumTokens, MaxNumValues, MaxKeyFields> {\n    fn compute_keyhash_and_sort_json_entries(&mut self) {\n        let hasher: FieldHasher<MaxKeyFields> = FieldHasher {};\n\n        let mut hashlist: [Field; MaxNumValues] = [0; MaxNumValues];\n\n        let two_pow_200 = 0x10000000000000000000000000000000000000000000000000000;\n        let two_pow_216 = 0x100000000000000000000000000000000000000000000000000000000;\n        for i in 0..MaxNumValues {\n            let KeyIndexData { json_index, json_length, parent_id, array_index } =\n                KeyIndexData::from_field(self.key_data[i]);\n            let hash = hasher.get_keyhash(self.json_packed, json_index, json_length);\n            hashlist[i] = hash + array_index * two_pow_200 + parent_id * two_pow_216;\n        }\n\n        hashlist[MaxNumValues - 1] = 0; // we always ensure the last (unused hopefully!) entry goes first.\n        self.json_entries_packed[MaxNumValues - 1] = JSONEntryPacked::default();\n        // when updating identity_to_json_map we are relying on the fact that we can update sorted entry 0? maybe? oof document better\n        let sort_result = noir_sort::sort_advanced(hashlist, lte_field_240_bit, assert_lte_240_bit);\n\n        let mut sorted_entries: [JSONEntryPacked; MaxNumValues] =\n            [JSONEntryPacked::default(); MaxNumValues];\n        for i in 0..MaxNumValues {\n            sorted_entries[sort_result.sort_indices[i]] = self.json_entries_packed[i];\n        }\n\n        let mut ids: [Field; MaxNumValues] = [0; MaxNumValues];\n        let mut parent_indices: [Field; MaxNumValues] = [0; MaxNumValues];\n        let mut entry_types: [Field; MaxNumValues] = [0; MaxNumValues];\n\n        for i in 0..MaxNumValues {\n            // 11.75 + 3.5 = 15.25 gates per iteration\n            let (id, parent_index, entry_type) = JSONEntry::extract_entry_type_id_and_parent_index_from_field(\n                sorted_entries[i].value,\n            );\n            ids[i] = id;\n            parent_indices[i] = parent_index;\n            entry_types[i] = entry_type;\n        }\n\n        let mut identity_to_json_map: [Field; MaxNumValues] = [0; MaxNumValues];\n        // 6.5 gates per iteration\n        for i in 0..MaxNumValues {\n            let id = ids[i];\n            let entry_type = entry_types[i];\n            // 2 gates\n            let update = TOKEN_ENDS_OBJECT_OR_ARRAY[entry_type];\n            // NOTE THIS RELIES ON MaxNumValues ACTUALLY DESCRIBING NUMMaxNumValues + 1\n            // 1 gate\n            let index = (id - (MaxNumValues as Field - 1)) * update + (MaxNumValues as Field - 1);\n            // 3.5 gates\n            identity_to_json_map[index] = i as Field;\n        }\n\n        // 13.5 gates per iteration\n        let mut parent_identity_pre = parent_indices[0];\n        for i in 1..MaxNumValues {\n            let parent_identity_post = parent_indices[i];\n            // if the parent identity changes,\n            // 3.5 gate\n            // the list is sorted according to parent_ideneity,\n            // n.b. parent_identity_post - parent_identity_pre is not neccessarily 0 or 1 (can be larger)\n            //      due to empty objects and arrays increasing identity value without creating associated child json entries\n            let new_parent = lt_field_16_bit(parent_identity_pre, parent_identity_post) as Field;\n            // let new_parent = (parent_identity_post as u32 > parent_identity_pre as u32) as Field;\n            // 3.5 gates\n            let index_of_parent = identity_to_json_map[parent_identity_post];\n            // 1 gate + 3.5 gates\n            let updated = JSONEntry::add_child_pointer_into_field(\n                sorted_entries[index_of_parent].value,\n                i as Field,\n            );\n\n            // RELIES ON THE SMALLEST ENTRY IN THE SORTED LIST BEING EMPTY\n            // 1 gate\n            let index = (index_of_parent * new_parent);\n            // 3.5 gates\n            sorted_entries[index] = JSONEntryPacked { value: updated };\n\n            parent_identity_pre = parent_identity_post;\n        }\n        sorted_entries[0] = JSONEntryPacked::default(); // TODO document why we want to always make 0 a dead entry\n        self.unsorted_json_entries_packed = self.json_entries_packed;\n        self.json_entries_packed = sorted_entries;\n        self.key_hashes = sort_result.sorted;\n        self.set_root_entry();\n    }\n\n    unconstrained fn __find_root_entry(self) -> Field {\n        let mut found_index = 0;\n        for i in 0..MaxNumValues {\n            let entry: JSONEntry = self.json_entries_packed[i].into();\n            if (entry.parent_index == 0) & (self.json_entries_packed[i].value != 0) {\n                found_index = i as Field;\n                break;\n            }\n        }\n        found_index\n    }\n\n    fn set_root_entry(&mut self) {\n        //@Safety: check the comments below\n        let root_index = unsafe { self.__find_root_entry() };\n\n        let packed_entry = self.json_entries_packed[root_index];\n        let entry: JSONEntry = packed_entry.into();\n\n        // checks that the entry is not empty\n        assert(packed_entry.value != 0);\n        // checks that the parent index is 0\n        assert(entry.parent_index == 0);\n        self.root_index_in_transcript = root_index;\n    }\n}\n\n// 68002\n","path":"/home/runner/nargo/github.com/noir-lang/noir_json_parser/v0.4.0/src/keymap.nr"},"84":{"source":"struct TokenFlags {\n    create_json_entry: Field,\n    is_end_of_object_or_array: Field,\n    is_start_of_object_or_array: Field,\n    new_context: Field,\n    is_key_token: Field,\n    is_value_token: Field,\n    preserve_num_entries: Field,\n}\n\nimpl TokenFlags {\n\n    unconstrained fn __from_field(f: Field) -> Self {\n        let bytes: [u8; 7] = f.to_be_bytes();\n        let create_json_entry = bytes[0] as Field;\n        let is_end_of_object_or_array = bytes[1] as Field;\n        let is_start_of_object_or_array = bytes[2] as Field;\n        let new_context = bytes[3] as Field;\n        let is_key_token = bytes[4] as Field;\n        let is_value_token = bytes[5] as Field;\n        let preserve_num_entries = bytes[6] as Field;\n\n        TokenFlags {\n            create_json_entry,\n            is_end_of_object_or_array,\n            is_start_of_object_or_array,\n            new_context,\n            is_key_token,\n            is_value_token,\n            preserve_num_entries,\n        }\n    }\n\n    fn from_field(f: Field) -> Self {\n        // 10 gates\n        //@Safety: check the comments below\n        let r = unsafe { TokenFlags::__from_field(f) };\n\n        // checks that the flags are binary\n        assert(r.create_json_entry * r.create_json_entry == r.create_json_entry);\n        assert(\n            r.is_end_of_object_or_array * r.is_end_of_object_or_array\n                == r.is_end_of_object_or_array,\n        );\n        assert(\n            r.is_start_of_object_or_array * r.is_start_of_object_or_array\n                == r.is_start_of_object_or_array,\n        );\n        assert(r.new_context * r.new_context == r.new_context);\n        assert(r.is_key_token * r.is_key_token == r.is_key_token);\n        assert(r.is_value_token * r.is_value_token == r.is_value_token);\n        assert(r.preserve_num_entries * r.preserve_num_entries == r.preserve_num_entries);\n\n        // asserts the relation of r and f\n        assert(r.to_field() == f);\n        r\n    }\n\n    // 4 gates\n    fn to_field(self) -> Field {\n        self.preserve_num_entries\n            + self.is_value_token * 0x100\n            + self.is_key_token * 0x10000\n            + self.new_context * 0x1000000\n            + self.is_start_of_object_or_array * 0x100000000\n            + self.is_end_of_object_or_array * 0x10000000000\n            + self.create_json_entry * 0x1000000000000\n    }\n\n    fn default() -> Self {\n        TokenFlags {\n            create_json_entry: 0,\n            is_end_of_object_or_array: 0,\n            is_start_of_object_or_array: 0,\n            new_context: 0,\n            is_key_token: 0,\n            preserve_num_entries: 0,\n            is_value_token: 0,\n        }\n    }\n}\n","path":"/home/runner/nargo/github.com/noir-lang/noir_json_parser/v0.4.0/src/token_flags.nr"},"85":{"source":"use crate::json_tables::ASCII_TO_TOKEN_TABLE;\n\nstruct ValidationFlags {\n    push_layer: Field,\n    push_layer_type_of_root: Field,\n    pop_layer: Field,\n}\n\nimpl ValidationFlags {\n    fn to_field(self) -> Field {\n        self.push_layer + self.push_layer_type_of_root * 0x100 + self.pop_layer * 0x10000\n    }\n\n    unconstrained fn __from_field(f: Field) -> Self {\n        let bytes: [u8; 4] = f.to_be_bytes();\n        let mut push_layer = bytes[3] as Field;\n        let push_layer_type_of_root = bytes[2] as Field;\n        let pop_layer = bytes[1] as Field;\n        let error = bytes[0] as Field;\n\n        assert(error == 0, \"ValidationFlags: grammar error\");\n        // we are doing something very degenerate here.\n        // in `validate_tokens` update a `depth` parameter via `depth = depth + push_layer - pop_layer`\n        // we index a size-32 array `parent_layer_stack` using the `depth_parameter` immediately after updating `depth`\n        // i.e. we implicitly validate `push_layer < 32`\n        // If the Prover incorrectly generates the `push_layer` witness via encoding any other flag data within it,\n        // an out of bounds error will be triggered\n        // n.b. reason for doing this is that by only having 3 flags stored in our lookup table,\n        // we can extract them all with 1 add gate. combined with 2 bool checks = 3 gates instead of 5/6 gates if we had 4 flags\n        push_layer = push_layer + error * 0x1000000;\n        ValidationFlags { push_layer, push_layer_type_of_root, pop_layer }\n    }\n\n    // 3 gates\n    fn from_field(f: Field) -> Self {\n        //@Safety: check the comments below\n        let r = unsafe { ValidationFlags::__from_field(f) };\n        // checks pop_layer is a valid boolean\n        assert(r.pop_layer * r.pop_layer == r.pop_layer);\n        // checks push_layer_type_of_root is a valid boolean\n        assert(r.push_layer_type_of_root * r.push_layer_type_of_root == r.push_layer_type_of_root);\n        // checks the input field is a valid combination of the outputs of the decomposition\n        assert(r.pop_layer * 0x10000 + r.push_layer_type_of_root * 0x100 + r.push_layer == f);\n        r\n    }\n}\n\nstruct RawTranscriptEntry {\n    encoded_ascii: Field,\n    index: Field,\n    length: Field,\n}\n\nimpl RawTranscriptEntry {\n    fn new() -> Self {\n        RawTranscriptEntry { encoded_ascii: 0, index: 0, length: 0 }\n    }\n    fn to_field(self) -> Field {\n        self.encoded_ascii + self.index * 0x10000 + self.length * (0x100000000)\n    }\n\n    unconstrained fn __from_field(felt: Field) -> Self {\n        let slices: [u8; 6] = felt.to_be_bytes(); // 2 gates + 1.25 + 2 = 5.25\n        let length = slices[1] as Field + slices[0] as Field * 0x100;\n        let index = slices[3] as Field + slices[2] as Field * 0x100;\n        let encoded_ascii = slices[5] as Field + slices[4] as Field * 0x100;\n        Self { encoded_ascii, index, length }\n    }\n    // 2 gates to add bytes into sum\n    // 1.25 gates for range checks\n    // 2 gates to get u16s\n    // 5.25 gates total\n    fn from_field(felt: Field) -> Self {\n        //@Safety: check the comments below\n        let result = unsafe { RawTranscriptEntry::__from_field(felt) };\n        result.length.assert_max_bit_size::<16>();\n        result.index.assert_max_bit_size::<16>();\n        result.encoded_ascii.assert_max_bit_size::<14>();\n\n        assert(result.encoded_ascii + result.index * 0x10000 + result.length * 0x100000000 == felt);\n        result\n    }\n\n    unconstrained fn __extract_ascii(f: Field) -> (Field, Field) {\n        let r = RawTranscriptEntry::__from_field(f);\n        let ascii = r.encoded_ascii;\n        let remainder = r.index + r.length * 0x10000;\n        (ascii, remainder)\n    }\n    fn extract_ascii(f: Field) -> (Field, Field) {\n        //@Safety: ascci length is checked. remainder size is checked. the relation to the input is asserted as well.\n        let (ascii, remainder) = unsafe { RawTranscriptEntry::__extract_ascii(f) };\n        ascii.assert_max_bit_size::<14>();\n        remainder.assert_max_bit_size::<32>();\n        assert(ascii + remainder * 0x10000 == f);\n        (ascii, remainder)\n    }\n}\n\nstruct TranscriptEntry {\n    token: Field,\n    index: Field,\n    length: Field,\n}\n\nstruct ScanData {\n    scan_token: Field,\n    push_transcript: Field,\n    increase_length: Field,\n    is_potential_escape_sequence: Field,\n}\n\nimpl ScanData {\n    unconstrained fn __from_field(f: Field) -> Self {\n        let bytes: [u8; 6] = f.to_le_bytes();\n\n        let mut scan_token = bytes[0] as Field;\n        let push_transcript = bytes[1] as Field;\n        let increase_length = bytes[2] as Field;\n        let is_potential_escape_sequence = bytes[3] as Field;\n        let error = bytes[4] as Field * 0x100 + bytes[5] as Field;\n        assert(error == 0, \"ScanData: Invalid token\");\n        // TODO document this\n        scan_token = scan_token + error * 0x100000000;\n        ScanData { scan_token, push_transcript, increase_length, is_potential_escape_sequence }\n    }\n    fn from_field(f: Field) -> Self {\n        //@Safety: check the comments below\n        let result = unsafe { ScanData::__from_field(f) };\n        // checks increase_length is a valid boolean\n        assert(result.increase_length * result.increase_length == result.increase_length);\n        // checks push_transcript is a valid boolean\n        assert(result.push_transcript * result.push_transcript == result.push_transcript);\n        // checks is_potential_escape_sequence is a valid boolean\n        assert(\n            result.is_potential_escape_sequence * result.is_potential_escape_sequence\n                == result.is_potential_escape_sequence,\n        );\n        // checks the input field is a valid combination of the outputs of the decomposition\n        assert(\n            result.scan_token\n                + result.push_transcript * 0x100\n                + result.increase_length * 0x10000\n                + result.is_potential_escape_sequence * 0x1000000\n                == f,\n        );\n        result\n    }\n}\n\nstruct PostProcessScanData {\n    token: Field,\n    new_grammar: Field,\n    scan_token: Field,\n}\nimpl PostProcessScanData {\n    fn from_field(f: Field) -> Self {\n        let bytes: [u8; 3] = f.to_be_bytes();\n        let token = bytes[2] as Field;\n        let new_grammar = bytes[1] as Field;\n        let scan_token = bytes[0] as Field;\n        PostProcessScanData { token, new_grammar, scan_token }\n    }\n}\nimpl TranscriptEntry {\n    fn new() -> Self {\n        TranscriptEntry { token: 0, index: 0, length: 0 }\n    }\n    fn to_field(self) -> Field {\n        self.token + self.index * 0x100 + self.length * (0x1000000)\n    }\n    unconstrained fn __from_field(felt: Field) -> Self {\n        let slices: [u8; 5] = felt.to_be_bytes(); // 2 gates + 1.25 + 2 = 5.25\n        let length = slices[1] as Field + slices[0] as Field * 256;\n        let index = slices[3] as Field + slices[2] as Field * 256;\n        let token = slices[4] as Field;\n        Self { token, index, length }\n    }\n    unconstrained fn __get_token(f: Field) -> (Field, Field) {\n        let r = TranscriptEntry::__from_field(f);\n        (r.token, (r.index + r.length * 0x10000))\n    }\n    // 4 gates\n    fn get_token(f: Field) -> Field {\n        //@Safety: check the comments below\n        let (token, remainder) = unsafe { TranscriptEntry::__get_token(f) };\n        // checks that remainder is in range\n        remainder.assert_max_bit_size::<32>();\n        // checks that token is in range\n        token.assert_max_bit_size::<8>();\n        // checks that the input is a valid combination of the outputs of the decomposition\n        assert(token + remainder * 0x100 == f);\n        token\n    }\n    // 5.25 gates\n    fn from_field(felt: Field) -> Self {\n        //@Safety: check the comments below\n        let result = unsafe { TranscriptEntry::__from_field(felt) };\n        // checks that length is in range\n        result.length.assert_max_bit_size::<16>();\n        // checks that index is in range\n        result.index.assert_max_bit_size::<16>();\n        // checks that token is in range\n        result.token.assert_max_bit_size::<8>();\n        // checks that the input is a valid combination of the outputs of the decomposition\n        assert(result.token + result.index * 0x100 + result.length * 0x1000000 == felt);\n        result\n    }\n\n    fn get_token_and_index_length_combined(f: Field) -> (Field, Field) {\n        //@Safety: check the comments below\n        let (token, remainder) = unsafe { TranscriptEntry::__get_token(f) };\n        // checks that remainder is in range\n        remainder.assert_max_bit_size::<32>();\n        // checks that token is in range\n        token.assert_max_bit_size::<8>();\n        // checks that the input is a valid combination of the outputs of the decomposition\n        assert(token + remainder * 0x100 == f);\n        (token, remainder)\n    }\n\n    // 5.75 gates\n    fn from_raw(raw_encoded: Field) -> Field {\n        //@Safety: check the comments below\n        let (ascii, remainder) = unsafe { RawTranscriptEntry::__extract_ascii(raw_encoded) };\n        // checks that remainder is in range\n        remainder.assert_max_bit_size::<32>();\n        // checks that the input is a valid combination of the outputs of the decomposition\n        assert(ascii + remainder * 0x10000 == raw_encoded);\n        // this lookup enforces an implicit 10 bit range check on ascii\n        let token = ASCII_TO_TOKEN_TABLE[ascii];\n        token + remainder * 0x100\n    }\n}\n","path":"/home/runner/nargo/github.com/noir-lang/noir_json_parser/v0.4.0/src/transcript_entry.nr"},"86":{"source":"pub mod quicksort;\nuse crate::quicksort::quicksort::quicksort as quicksort;\nuse crate::quicksort::quicksort_explicit::quicksort as quicksort_explicit;\nuse dep::check_shuffle::{check_shuffle, get_shuffle_indices};\n\n/**\n * Given an input array of type T, return a sorted array.\n * Type `T` must satisfy the Ord and Eq trait\n * The Eq function is used within an unconstrained function so its constraint-efficiently is not relevant\n * Note: sort_extended is likely more efficient as constraining `x < y` can typically be described\n *       more efficiently than returning a boolean that describes whether `x < y`\n **/\npub fn sort<T, let N: u32>(input: [T; N]) -> [T; N]\nwhere\n    T: std::cmp::Ord + std::cmp::Eq,\n{\n    let sorted = unsafe { quicksort(input) };\n\n    for i in 0..N - 1 {\n        assert(sorted[i] <= sorted[i + 1]);\n    }\n    check_shuffle(input, sorted);\n    sorted\n}\n\n/**\n * Given an input array of type T, return a sorted array.\n * Type `T` must satisfy the Eq trait\n * The Eq function is used within an unconstrained function so its constraint-efficiently is not relevant\n *\n * The `sortfn` parameter is a function that descibes whether, given two elements `a, b` of type T, `a <= b`\n * Note: sort_extended is likely more efficient as constraining `x < y` can typically be described\n *       more efficiently than returning a boolean that describes whether `x < y`\n **/\npub fn sort_via<T, let N: u32>(input: [T; N], sortfn: fn(T, T) -> bool) -> [T; N]\nwhere\n    T: std::cmp::Eq,\n{\n    let sorted = unsafe { quicksort_explicit(input, sortfn) };\n\n    for i in 0..N - 1 {\n        assert(sortfn(sorted[i], sorted[i + 1]));\n    }\n    check_shuffle(input, sorted);\n    sorted\n}\n\n/**\n * Given an input array of type T, return a sorted array.\n * Type `T` must satisfy the Eq trait\n * The Eq function is used within an unconstrained function so its constraint-efficiently is not relevant\n *\n * The `sortfn` parameter is a function that descibes whether, given two elements `a, b` of type T, `a <= b`\n * The `sortfn_assert` parameter is a function that *asserts* that `a <= b`\n *\n * `sortfn` is used in unconstrained functions only\n * `sortfn_assert` is used in constrained functions\n\n * Note: This is likely the most efficient sort function as constraining `x < y` can typically be described\n *       more efficiently than returning a boolean that describes whether `x < y`\n **/\npub fn sort_extended<T, let N: u32>(\n    input: [T; N],\n    sortfn: fn(T, T) -> bool,\n    sortfn_assert: fn(T, T) -> (),\n) -> [T; N]\nwhere\n    T: std::cmp::Eq,\n{\n    let sorted = unsafe { quicksort_explicit(input, sortfn) };\n\n    for i in 0..N - 1 {\n        sortfn_assert(sorted[i], sorted[i + 1]);\n    }\n    check_shuffle(input, sorted);\n    sorted\n}\n\npub struct SortResult<T, let N: u32> {\n    pub sorted: [T; N],\n    pub sort_indices: [Field; N],\n}\npub fn sort_advanced<T, let N: u32>(\n    input: [T; N],\n    sortfn: fn(T, T) -> bool,\n    sortfn_assert: fn(T, T) -> (),\n) -> SortResult<T, N>\nwhere\n    T: std::cmp::Eq,\n{\n    let sorted = unsafe { quicksort_explicit(input, sortfn) };\n\n    let sort_indices = get_shuffle_indices(input, sorted);\n\n    for i in 0..N - 1 {\n        sortfn_assert(sorted[i], sorted[i + 1]);\n    }\n    SortResult { sorted, sort_indices }\n}\n\nmod test {\n    use crate::sort;\n    use crate::sort_extended;\n    use crate::sort_via;\n\n    fn sort_u32(a: u32, b: u32) -> bool {\n        a <= b\n    }\n\n    // unconditional_lt will cost fewer constraints than the `<=` operator\n    // as we do not need to constrain the case where `a > b`, and assign a boolean variable to the result\n    fn unconditional_lt(_a: u32, _b: u32) {\n        let a = _a as Field;\n        let b = _b as Field;\n\n        let diff = b - a;\n        diff.assert_max_bit_size::<32>();\n    }\n\n    #[test]\n    fn test_sort() {\n        let mut arr: [u32; 7] = [3, 6, 8, 10, 1, 2, 1];\n\n        let sorted = sort(arr);\n\n        let expected: [u32; 7] = [1, 1, 2, 3, 6, 8, 10];\n        assert(sorted == expected);\n    }\n\n    #[test]\n    fn test_sort_via() {\n        let mut arr: [u32; 7] = [3, 6, 8, 10, 1, 2, 1];\n\n        let sorted = sort_via(arr, sort_u32);\n\n        let expected: [u32; 7] = [1, 1, 2, 3, 6, 8, 10];\n        assert(sorted == expected);\n    }\n\n    #[test]\n    fn test_sort_extended() {\n        let mut arr: [u32; 7] = [3, 6, 8, 10, 1, 2, 1];\n\n        let sorted = sort_extended(arr, sort_u32, unconditional_lt);\n\n        let expected: [u32; 7] = [1, 1, 2, 3, 6, 8, 10];\n        assert(sorted == expected);\n    }\n}\n\n","path":"/home/runner/nargo/github.com/noir-lang/noir_sort/v0.2.2/src/lib.nr"},"88":{"source":"pub trait Swap {\n    fn swap(&mut self, i: u32, j: u32);\n}\n\nimpl<T, let N: u32> Swap for [T; N] {\n    fn swap(&mut self, i: u32, j: u32) {\n        let temp = self[i];\n        self[i] = self[j];\n        self[j] = temp;\n    }\n}\n\nunconstrained fn partition<T, let N: u32>(\n    arr: &mut [T; N],\n    low: u32,\n    high: u32,\n    sortfn: fn(T, T) -> bool,\n) -> u32 {\n    let pivot = high;\n    let mut i = low;\n    for j in low..high {\n        if (sortfn(arr[j], arr[pivot])) {\n            arr.swap(i, j);\n            i += 1;\n        }\n    }\n    arr.swap(i, pivot);\n    i\n}\n\nunconstrained fn quicksort_recursive<T, let N: u32>(\n    arr: &mut [T; N],\n    low: u32,\n    high: u32,\n    sortfn: fn(T, T) -> bool,\n) {\n    if low < high {\n        let pivot_index = partition(arr, low, high, sortfn);\n        if pivot_index > 0 {\n            quicksort_recursive(arr, low, pivot_index - 1, sortfn);\n        }\n        quicksort_recursive(arr, pivot_index + 1, high, sortfn);\n    }\n}\n\npub unconstrained fn quicksort<T, let N: u32>(_arr: [T; N], sortfn: fn(T, T) -> bool) -> [T; N] {\n    let mut arr: [T; N] = _arr;\n    if arr.len() <= 1 {} else {\n        quicksort_recursive(&mut arr, 0, arr.len() - 1, sortfn);\n    }\n    arr\n}\n\n","path":"/home/runner/nargo/github.com/noir-lang/noir_sort/v0.2.2/src/quicksort/quicksort_explicit.nr"},"90":{"source":"unconstrained fn __get_shuffle_indices<T, let N: u32>(lhs: [T; N], rhs: [T; N]) -> [Field; N]\nwhere\n    T: std::cmp::Eq,\n{\n    let mut shuffle_indices: [Field; N] = [0; N];\n\n    let mut shuffle_mask: [bool; N] = [false; N];\n    for i in 0..N {\n        let mut found = false;\n        for j in 0..N {\n            if ((shuffle_mask[j] == false) & (!found)) {\n                if (lhs[i] == rhs[j]) {\n                    found = true;\n                    shuffle_indices[i] = j as Field;\n                    shuffle_mask[j] = true;\n                }\n            }\n            if (found) {\n                continue;\n            }\n        }\n        assert(found == true, \"check_shuffle, lhs and rhs arrays do not contain equivalent values\");\n    }\n\n    shuffle_indices\n}\n\nunconstrained fn __get_index<let N: u32>(indices: [Field; N], idx: Field) -> Field {\n    let mut result = 0;\n    for i in 0..N {\n        if (indices[i] == idx) {\n            result = i as Field;\n            break;\n        }\n    }\n    result\n}\n\npub fn check_shuffle<T, let N: u32>(lhs: [T; N], rhs: [T; N])\nwhere\n    T: std::cmp::Eq,\n{\n    //@Safety: check the comments below\n    let shuffle_indices = unsafe { __get_shuffle_indices(lhs, rhs) };\n\n    for i in 0..N {\n        let idx = unsafe { __get_index(shuffle_indices, i as Field) };\n        // checks the relation between shuffle_indices and output of __get_index\n        assert_eq(shuffle_indices[idx], i as Field);\n    }\n    for i in 0..N {\n        let idx = shuffle_indices[i];\n        let expected = rhs[idx];\n        let result = lhs[i];\n        // checks the relation between shuffle_indices and the lhs, rhs inputs\n        assert_eq(expected, result);\n    }\n}\n\npub fn get_shuffle_indices<T, let N: u32>(lhs: [T; N], rhs: [T; N]) -> [Field; N]\nwhere\n    T: std::cmp::Eq,\n{\n    //@Safety: as explained in check_shuffle function\n    let shuffle_indices = unsafe { __get_shuffle_indices(lhs, rhs) };\n    for i in 0..N {\n        let idx = unsafe { __get_index(shuffle_indices, i as Field) };\n        assert_eq(shuffle_indices[idx], i as Field);\n    }\n    for i in 0..N {\n        let idx = shuffle_indices[i];\n        let expected = rhs[idx];\n        let result = lhs[i];\n        assert_eq(expected, result);\n    }\n    shuffle_indices\n}\n\nmod test {\n    struct CompoundStruct {\n        a: bool,\n        b: Field,\n        c: u64,\n    }\n    impl std::cmp::Eq for CompoundStruct {\n        fn eq(self, other: Self) -> bool {\n            (self.a == other.a) & (self.b == other.b) & (self.c == other.c)\n        }\n    }\n\n    use crate::check_shuffle;\n    #[test]\n    fn test_shuffle() {\n        let lhs: [Field; 5] = [0, 1, 2, 3, 4];\n        let rhs: [Field; 5] = [2, 0, 3, 1, 4];\n        check_shuffle(lhs, rhs);\n    }\n\n    #[test]\n    fn test_shuffle_identity() {\n        let lhs: [Field; 5] = [0, 1, 2, 3, 4];\n        let rhs: [Field; 5] = [0, 1, 2, 3, 4];\n        check_shuffle(lhs, rhs);\n    }\n\n    #[test(should_fail_with = \"check_shuffle, lhs and rhs arrays do not contain equivalent values\")]\n    fn test_shuffle_fail() {\n        let lhs: [Field; 5] = [0, 1, 2, 3, 4];\n        let rhs: [Field; 5] = [0, 1, 2, 3, 5];\n        check_shuffle(lhs, rhs);\n    }\n\n    #[test(should_fail_with = \"check_shuffle, lhs and rhs arrays do not contain equivalent values\")]\n    fn test_shuffle_duplicates() {\n        let lhs: [Field; 5] = [0, 1, 2, 3, 4];\n        let rhs: [Field; 5] = [0, 1, 2, 3, 3];\n        check_shuffle(lhs, rhs);\n    }\n\n    #[test]\n    fn test_shuffle_compound_struct() {\n        let lhs: [CompoundStruct; 5] = [\n            CompoundStruct { a: false, b: 0, c: 12345 },\n            CompoundStruct { a: false, b: -100, c: 54321 },\n            CompoundStruct { a: true, b: 5, c: 0xffffffffffffffff },\n            CompoundStruct { a: true, b: 9814, c: 0xeeffee0011001133 },\n            CompoundStruct { a: false, b: 0x155, c: 0 },\n        ];\n        let rhs: [CompoundStruct; 5] = [\n            CompoundStruct { a: false, b: 0x155, c: 0 },\n            CompoundStruct { a: false, b: 0, c: 12345 },\n            CompoundStruct { a: false, b: -100, c: 54321 },\n            CompoundStruct { a: true, b: 9814, c: 0xeeffee0011001133 },\n            CompoundStruct { a: true, b: 5, c: 0xffffffffffffffff },\n        ];\n        check_shuffle(lhs, rhs);\n    }\n}\n\n#[export]\nfn bench_test() {\n    let lhs: [Field; 5] = [0, 1, 2, 3, 4];\n    let rhs: [Field; 5] = [2, 0, 3, 1, 4];\n    check_shuffle(lhs, rhs);\n}\n","path":"/home/runner/nargo/github.com/noir-lang/noir_check_shuffle/v0.2.0/src/lib.nr"}},"names":["main"],"brillig_names":["__build_transcript","__from_field","__capture_missing_tokens","__get_validity_flags","__from_field","__from_field","__from_field","__check_entry_ptr_bounds","__from_field","__from_field","__from_field","__divmod","__slice_field","decompose","__slice_200_bits_from_field","quicksort","__get_shuffle_indices","__get_index","__extract_entry_type_id_and_parent_index_from_field","get_lt_predicate_f","__find_root_entry","__from_field","find_key_in_map","to_u8","directive_integer_quotient","directive_invert","directive_to_radix"]}