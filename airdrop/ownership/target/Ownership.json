{"noir_version":"1.0.0-beta.6+e796dfd67726cbc28eb9991782533b211025928d","hash":"13508454184577261439","abi":{"parameters":[{"name":"key","type":{"kind":"array","length":8,"type":{"kind":"integer","sign":"unsigned","width":32}},"visibility":"private"},{"name":"ctr","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"},{"name":"nonce","type":{"kind":"array","length":3,"type":{"kind":"integer","sign":"unsigned","width":32}},"visibility":"private"},{"name":"signature_payload","type":{"kind":"struct","path":"SignaturePayload","fields":[{"name":"encrypted_record","type":{"kind":"struct","path":"std::collections::bounded_vec::BoundedVec","fields":[{"name":"storage","type":{"kind":"array","length":1216,"type":{"kind":"integer","sign":"unsigned","width":8}}},{"name":"len","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"encrypted_record_signed","type":{"kind":"array","length":64,"type":{"kind":"integer","sign":"unsigned","width":8}}},{"name":"proxy_pubkey_x","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}}},{"name":"proxy_pubkey_y","type":{"kind":"array","length":32,"type":{"kind":"integer","sign":"unsigned","width":8}}}]},"visibility":"public"},{"name":"airdrop_payload","type":{"kind":"struct","path":"AirdropPayload","fields":[{"name":"node_id","type":{"kind":"string","length":12}},{"name":"graphql_response","type":{"kind":"struct","path":"airdrop::utils::JsonSlice","fields":[{"name":"json","type":{"kind":"string","length":64}},{"name":"start","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]},"visibility":"public"}],"return_type":null,"error_types":{"542922450338173070":{"error_kind":"string","string":"create_json_entries: MaxNumValues limit exceeded!"},"1285086328212934425":{"error_kind":"string","string":"find_key_in_map, key not found"},"2442402699985098867":{"error_kind":"string","string":"ScanData: Invalid token"},"2905794910586529473":{"error_kind":"string","string":"get_json_entry_unchecked: key not found"},"2920182694213909827":{"error_kind":"string","string":"attempt to subtract with overflow"},"3966221204951312152":{"error_kind":"string","string":"build_transcript: incomplete token (number, string or literal)"},"5019202896831570965":{"error_kind":"string","string":"attempt to add with overflow"},"5639284723758936875":{"error_kind":"string","string":"Cannot find key/value straddling KEY_DELIMITER_TOKEN"},"6485997221020871071":{"error_kind":"string","string":"call to assert_max_bit_size"},"6501172132811776676":{"error_kind":"string","string":"Unexpected proxy public key X!"},"7233212735005103307":{"error_kind":"string","string":"attempt to multiply with overflow"},"8109012468901134134":{"error_kind":"string","string":"Unexpected proxy public key Y!"},"9729867350472088386":{"error_kind":"string","string":"ValidationFlags: grammar error"},"9923511803505800760":{"error_kind":"string","string":"proxy did not sign encrypted_record_hash!"},"10529081074255638466":{"error_kind":"string","string":"get_string_unchecked: entry exists but is not a string!"},"12921714806815923365":{"error_kind":"string","string":"get_string, string size is larger than StringBytes"},"13872591378009313268":{"error_kind":"string","string":"capture_missing_tokens: MaxNumTokens limit exceeded!"},"14225679739041873922":{"error_kind":"string","string":"Index out of bounds"},"15021022550228702883":{"error_kind":"string","string":"Encrypted JSON does not match expected value."},"15544221083219072719":{"error_kind":"string","string":"check_shuffle, lhs and rhs arrays do not contain equivalent values"},"16081317107610296567":{"error_kind":"string","string":"first json token does not describe an object, array or key"},"16680141988109035797":{"error_kind":"string","string":"get_object: entry exists but is not an object!"},"16954218183513903507":{"error_kind":"string","string":"Attempted to read past end of BoundedVec"},"17205526991431008989":{"error_kind":"string","string":"validate_tokens: unclosed objects or arrays"},"17721029505246779248":{"error_kind":"string","string":"cannot extract array elements via a key"},"17843811134343075018":{"error_kind":"string","string":"Stack too deep"},"18170897293561019657":{"error_kind":"string","string":"build_transcript: MaxNumTokens limit exceeded!"}}},"bytecode":"","debug_symbols":"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0gqlFUorlFYorVBaobRCaWRJIEsCWRLIkkCWBLIkkCWBLAlkSSBLAlkSyJJAlgSyJJAlgSwJZEkgSwJZEsiSQJYEsiSQJYEsCWRJIEsCWRLIkkCWBLIkkCWBLAlkSSBLAlkSyJJAlgSyJJAlgSwJZEkgSwJZEsiSQJYEsiSQJYEsCWRJIEsCWRLIkkCWBLIkkCWBLAlkSSBLAlkSyJJAlgSyJJAlgSwJZEkgSwJZEsiSQJYEsiSQJYEsCWRJIEsCWRLIkkCWBLIkkCWBLAlkSSBLAlkSyJJAlgSyJJAlgSwJZEkgSwJZEsiSQJYEsiSQJYEsCWRJIEsCWRLIkkCWCFkiZImQJUKWCFkiZImQJUKWCFkiZImQJUKWCFkiZImQJUKWCFkiZImQJUKWCFkiZImQJUKWCFkiZImQJUKWCFkiZImQJUKWCFkiZImQJUKWCFkiZImQJUKWCFkiZImQJUKWCFkiZImQJUKWCFkiZImQJUKWCFkiZImQJUKWCFkiZImQJUKWCFkiZImQJUKWCFkiZImQJUKWCFkiZImQJUKWCFkiZImQJUKWCFkiZImQJUKWCFkiZImQJUKWCFkiZImQJUKWCFkiZImQJUKWCFkiZImQJUKWCFkiZImQJUKWKFmiZImSJUqWKFmiZImSJUqWKFmiZImSJUqWKFmiZImSJUqWKFmiZImSJUqWKFmiZImSJUqWKFmiZImSJUqWKFmiZImSJUqWKFmiZImSJUqWKFmiZImSJUqWKFmiZImSJUqWKFmiZImSJUqWKFmiZImSJUqWKFmiZImSJUqWKFmiZImSJUqWKFmiZImSJUqWKFmiZImSJUqWKFmiZImSJUqWKFmiZAncq8C9CtyrwL0K3KvAvQrcq8C9CtyrwL0K3KvAvQrcq8C9CtyrwL0K3KvAvQrcq8C9CtyrwL0K3KvAvQrcq8C9CtyrwL0K3KvAvQrcq8C9CtyrwL0K3KvAvQrcq8C9CtyrwL0K3KvAvQrcq8C9CtyrwL0K3KvAvQrcq8C9CtyrwL0K3KvAvQrcq8C9CtyrwL0K3KvAvQrcq8C9CtyrwL0K3KvAvQrcq8C9CtyrwL0K3KvAvQrcq8C9CtyrwL0K3KvAvQrcq8C9CtyrwL0K3KvAvQrcq8C9CtyrwL0K3KvAvQrcq8C9CtyrwL0K3KvAvQrcq8C9CtyrwL0K3KvAvQrcq8C9CtyrwL0K3KvAvQrcq8C9CtyrwL0K3KvAvQrcq8C9CtyrwL0K3KvAvQrcq8C9CtyrwL0K3KvAvQrcq8C9CtyrwL0K3KvAvQrcq8C9CtyrwL0K3KvAvQrcq8C9CtyrwL0K3KvAvQrcq8C9CtyrwL0K3KvAvQrcq8C9CtyrwL0K3KvAvQrcq8C9CtyrwL0K3KvAvQrcq8C9CtyrwL0K3KvAvQrcq8C9CtyrwL0K3KvAvQrcq8C9CtyrwL0K3KvAvQrcq8C9CtyrwL0K3KvAvQrcq8C9CtyrwL0K3KvAvQrcq8C9CtyrwL0K3KvAvQrcq8C9CtyrwL0K3KvAvQrcq8C9CtyrwL0K3KvAvQrcq8C9CtyrwL0K3KvAvQrcq8C9CtyrwL0K3KvAvQrcq8C9CtyrwL0K3KvAvQrcq8C9CtyrwL0K3KvAvQrcq8C9CtyrwL0K3KvAvQrcq8C9CtyrwL0K3KvAvQrcq8C9CtyrwL0K3KvAvQrcq8C9CtyrwL0K3KvAvQrcq8C9CtyrwL0K3KvAvQrcq8C9CtyrwL0K3KvAvQrcq8C9CtyrwL0K3KvAvQrcq8C9CtyrwL0K3KvAvQrcq8C9CtyrwL0K3KvAvQrcq8C9CtyrwL0K3KvAvQrcq8C9CtyrwL0K3KvAvQrcq8C9CtyrwL0K3KvAvQrcq8C9CtyrwL0K3KvAvQrcq8C9CtyrwL0K3KvAvQrcq8C9CtyrwL0K3KvAvQrcq8C9CtyrwL0K3KvAvQrcq8C9CtyrwL0K3KvAvQrcq8C9CtyrwL0K3KvAvQrcq8C9CtyrwL0K3KvAvQrcq8C9CtyrwL0K3KvAvQrcq8C9CtyrwL0K3KvAvQrcq8C9CtyrwL0K3KvAvQrcq8C9CtyrwL0K3KvAvQrcq8C9CtyrwL0K3KvAvQrcq8C9CtyrwL0K3KvAvQrcq8C9CtyrwL0K3KvAvQrcq8C9CtyrwL0K3KvAvQrcq8C9CtyrwL0K3KvAvQrcq8C9CtyrwL0K3KvAvQrcq8C9CtyrwL0K3KvAvQrcq8C9CtyrwL0K3KvAvQrcq8C9CtyrwL0K3KvAvQrcq8C9CtyrwL0K3KvAvQrcq8C9CtyrwL0K3KvAvQrcq8C9CtyrwL0K3KvAvQrcq8C9CtyrwL0K3KvAvQrcq8C9CtyrwL0K3KvAvQrcq8C9CtyrwL0K3KvAvQrcq8C9CtyrwL0K3KvAvQrcq8C9CtyrwL0K3KvAvQrcq8C9CtyrwL0K3KvAvQrcq8C9CtyrwL0K3KvAvQrcq8C9CtyrwL0K3KvAvQrcq8C9CtyrwL0K3KvAvQrcq8C9CtyrwL0K3KvAvQrcq8C9CtyrwL0K3KvAvQrcq8C9CtyrwL0K3KvAvQrcq8C9CtyrwL0K3KvAvQrcq8C9CtyrwL0K3KvAvQrcq8C9CtyrwL0K3OsuEzIjKY0sgXsVuFeBexW4V4F7FbhXgXsVuFeBexW4V4F7FbhXgXsVuFeBexW4V4F7FbhXgXsVuFeBexW4V4F7FbhXgXsVuFeBexW4V4F7FbhXgXsVuFeBexW4V4F7FbhXgXsVuFeBexW4V4F7FbhXgXsVuFeBexW4V4F7FbhXgXsVuFeBexW4V4F7FbhXgXsVuFeBexW4V4F7FbhXgXsVuFeBexW4V4F7FbhXgXsVuFeBexW4V4F7FbhXgXsVuFeBexW4V4F7FbhXgXsVuFeBexW4V4F7FbhXgXsVuFeBexW4V4F7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbhXhXtVuFeFe1W4V4V7VbjXXSZkRlIaWQL3qnCvCveqcK8K96pwrwr3qnCvCveqcK8K96pwrwr3qnCvCveqcK8K96pwrwr3qnCvCveqcK8K96pwrwr3qnCvCveqcK8K96pwrwr3qnCvCveqcK8K96pwrwr3qnCvCveqcK8K96pwrwr3qnCvCveqcK8K96pwrwr3qnCvCveqcK8K96pwrwr3qnCvCveqcK8K96pwrwr3qnCvCveqcK8K96pwrwr3qnCvCveqcK8K96pwrwr3qnCvCveqcK8K96pwrwr3qnCvCveqcK8K96pwrwr3qnCvCveqcK8K92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwrwb3anCvBvdqcK8G92pwr7tMyIykNLIE7tXgXg3u1eBeDe7V4F4N7tXgXg3u1eBeDe7V4F4N7tXgXg3u1eBeDe7V4F4N7tXgXg3u1eBeDe7V4F4N7tXgXg3u1eBeDe7V4F4N7tXgXg3u1eBeDe7V4F4N7tXgXg3u1eBeDe7V4F4N7tXgXg3u1eBeDe7V4F4N7tXgXg3u1eBeDe7V4F4N7tXgXg3u1eBeDe7V4F4N7tXgXg3u1eBeDe7V4F4N7tXgXg3u1eBeDe7V4F4N7tXgXg3u1eBeDe7V4F4N7tXgXg3u1eBeDe7V4F4N7tXgXg3u1eBeDe7V4V4d7tXhXh3u1eFeHe7V4V4d7tXhXh3u1eFeHe7V4V4d7tXhXh3u1eFeHe7V4V4d7tXhXh3u1eFeHe7V4V4d7tXhXh3u1eFeHe7V4V4d7tXhXh3u1eFeHe7V4V4d7tXhXh3u1eFeHe7V4V4d7tXhXh3u1eFeHe7V4V4d7tXhXh3u1eFeHe7V4V4d7tXhXh3u1eFeHe7V4V4d7tXhXh3u1eFeHe7V4V4d7tXhXh3u1eFeHe7V4V4d7tXhXh3u1eFeHe7V4V4d7tXhXh3u1eFeHe7V4V4d7tXhXh3u1eFeHe7V4V4d7tXhXh3u1eFeHe7V4V4d7tXhXh3u1eFeHe7V4V4d7tXhXh3u1eFeHe7V4V4d7tXhXh3u1eFeHe7V4V4d7tXhXh3u1eFeHe7V4V4d7tXhXh3u1eFeHe7V4V4d7tXhXh3u1eFeHe7V4V4d7tXhXh3u1eFeHe7V4V4d7tXhXh3u1eFeHe7V4V4d7tXhXh3u1eFeHe7V4V4d7tXhXh3u1eFeHe7V4V4d7tXhXh3u1eFeHe7V4V4d7tXhXh3u1eFeHe7V4V4d7tXhXh3u1eFeHe7V4V4d7tXhXh3u1eFeHe7V4V4d7tXhXh3u1eFeHe7V4V4d7tXhXh3u1eFeHe7V4V4d7tXhXh3u1eFeHe7V4V4d7tXhXh3u1eFeHe7V4V4d7tXhXh3u1eFeHe7V4V4d7tXhXh3u1eFeHe7V4V4d7tXhXh3u1eFeHe7V4V4d7tXhXh3u1eFeHe7V4V4d7tXhXh3u1eFeHe7V4V4d7tXhXh3u1eFeHe7V4V4d7tXhXh3u1eFeHe7V4V4d7tXhXh3u1eFeHe7V4V4d7tXhXh3u1eFeHe7V4V4d7tXhXh3u1eFeHe7V4V4d7tXhXh3u1eFeHe7V4V4d7tXhXh3u1eFeHe7V4V4d7tXhXh3u1eFeHe7V4V4d7tXhXh3u1eFeHe7V4V4d7tXhXh3u1eFeHe7V4V4d7tXhXh3u1eFeHe7V4V4d7tXhXh3u1eFeHe7V4V4d7tXhXh3u1eFeHe7V4V4d7tXhXh3u1eFeHe7V4V4d7tXhXh3u1eFeHe7V4V4d7tXhXh3u1eFeHe7V4V4d7tXhXh3u1eFeHe7V4V4d7tXhXh3u1eFeHe7V4V4d7tXhXh3u1eFeHe7V4V4d7tXhXh3u1eFeHe7V4V4d7tXhXh3u1eFeHe7V4V4d7tXhXh3u1eFeHe7V4V4d7tXhXh3u1eFeHe7V4V4d7tXhXh3u1eFeHe7V4V4d7tXhXh3u1eFeHe7V4V4d7tXhXh3u1eFeHe7V4V4d7tXhXh3u1eFeHe7V4V4d7tXhXh3u1eFeHe7V4V4d7tXhXh3u1eFeHe7V4V4d7tXhXh3u1eFeHe7V4V4d7tXhXh3u1eFeHe7V4V4d7tXhXh3u1eFeHe7V4V4d7tXhXh3u1eFeHe7V4V4d7tXhXh3u1eFeHe7V4V4d7tXhXh3u1eFeHe7V4V4d7tXhXh3u1eFeHe7V4V4d7tXhXh3u1eFeHe7V4V4d7tXhXh3u1eFeHe7V4V4d7tXhXh3u1eFeHe7V4V4d7tXhXh3u1eFeHe7V4V4d7tXhXh3u1eFeHe7V4V4d7tXhXh3u1eFeHe7V4V4d7tXhXh3u1eFeHe7V4V4d7tXhXh3u1eFeHe7V4V4d7tXhXh3u1eFeHe7V4V4d7tXhXh3u1eFeHe7V4V4d7tXhXh3u1eFeHe7V4V4d7tXhXh3u1eFeHe7V4V4d7tXhXh3u1eFeHe7V4V4d7tXhXh3u1eFeHe7V4V4d7tXhXh3u1eFeHe7V4V4d7tXhXh3u1eFeHe7V4V4d7tXhXh3u1eFeHe7V4V4d7tXhXh3u1eFeHe7V4V4d7tXhXh3u1eFeHe7V4V4d7tXhXh3u1eFeHe7V4V4d7tXhXh3u1eFeHe7V4V4d7tXhXh3u1eFeHe7V4V4d7tXhXh3u1eFeHe7V4V4d7tXhXh3u1eFeHe7V4V4d7tXhXh3u1eFeHe7V4V4d7tXhXh3u1eFeHe7V4V4d7tXhXh3u1eFeHe7V4V4d7tXhXh3u1eFeHe7V4V4d7tXhXh3u1eFeHe7V4V4d7tXhXh3u1eFeHe7V4V4d7tXhXh3u1eFeHe7V4V4d7tXhXh3u1eFeHe7V4V4d7tXhXh3u1eFeHe7V4V4d7tXhXh3u1eFeHe7V4V4d7tXhXh3u1eFeHe7V4V4d7tXhXh3u1eFeHe7V4V4d7tXhXh3u1eFeHe7V4V4d7tXhXh3u1eFeHe7V4V4d7tXhXh3u1eFeHe7V4V4d7tXhXh3u1eFeHe7V4V4d7tXhXh3u1eFeHe7V4V4d7tXhXh3u1eFeHe7V4V4d7tXhXh3u1eFeHe7V4V4d7tXhXh3u1eFeHe7V4V4d7tXhXh3u1eFe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jCwxssTIEiNLjCwxssTIEiNLjCwxssTIEiNLjCwxssTIEiNLjCwxssTIEiNLjCwxssTIEiNLjCwxssTIEiNLjCwxssTIEiNLjCwxssTIEiNLjCwxssTIEiNLjCwxssTJEidLnCxxssTJEidLnCxxssTJEidLnCxxssTJEidLnCxxssTJEidLnCxxssTJEidLnCxxssTJEidLnCxxssTJEidLnCxxssTJEidLnCxxssTJEidLnCxxssTJEidLnCxxssTJEidLnCxxssTJEidLnCxxssTJEidLnCxxssTJEidLnCxxssTJEidLnCxxssTJEidLnCxxssTJEidLnCxxssTJEidLnCxxssTJEidLnCxxssTJEidLnCxxssTJEidLnCxxssTJEidLnCxxssTJEidLnCxxssTJEidLnCxxsiSSJZEsiWRJJEsiWRLJkkiWRLIkkiWRLIlkSSRLIlkSyZJIlkSyJJIlkSyJZEkkSyJZEsmSSJZEsiSSJZEsiWRJJEsiWRLJkkiWRLIkkiWRLIlkSSRLIlkSyZJIlkSyJJIlkSyJZEkkSyJZEsmSSJZEsiSSJZEsiWRJJEsiWRLJkkiWRLIkkiWRLIlkSSRLIlkSyZJIlkSyJJIlkSyJZEkkSyJZEsmSSJZEsiSSJZEsiWRJJEsiWRLJkkiWRLIkkiWRLIlkSSRLIlkSyZJIlkSyJJIlkSyJZEkkSyJZEsmSSJZEsiSSJZEsiWRJJEsSWZLIkkSWJLIkkSWJLElkSSJLElmSyJJEliSyJJEliSxJZEkiSxJZksiSRJYksiSRJYksSWRJIksSWZLIkkSWJLIkkSWJLElkSSJLElmSyJJEliSyJJEliSxJZEkiSxJZksiSRJYksiSRJYksSWRJIksSWZLIkkSWJLIkkSWJLElkSSJLElmSyJJEliSyJJEliSxJZEkiSxJZksiSRJYksiSRJYksSWRJIksSWZLIkkSWJLIkkSWJLElkSSJLElmSyJJEliSyJJEliSxJZEkiSxJZksiSRJYksiSRJYksSWRJIksSWZLIkkSWJLIkkyWZLMlkSSZLMlmSyZJMlmSyJJMlmSzJZEkmSzJZksmSTJZksiSTJZksyWRJJksyWZLJkkyWZLIkkyWZLMlkSSZLMlmSyZJMlmSyJJMlmSzJZEkmSzJZksmSTJZksiSTJZksyWRJJksy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XmtyrxWzS2J2yeRea3KvNbnXmtxrTe61Jvdak3utyb3W5F5rcq81udea3GtN7rUm91oxuyRml0zutSb3WpN7rcm91uRea3KvNbnXmtxrTe61YnZJzC6Z3GtN7rUm91qTe63JvdbkXmtyrzW515rca03utSb3WpN7rcm91uReK2eX5OySyb3W5F5rcq81udea3GtN7rUm91qTe63JvVbOLsnZJZN7rcm91uRea3KvNbnXmtxrTe61Jvdak3utyb3W5F5rcq81udea3Gvl7JKcXTK515rca03utSb3WpN7rcm91uRea3KvNbnXytklObtkcq81udea3GtN7rUm91qTe63JvdbkXmtyrzW515rca03utSb3WpN7rZxdkrNLJvdak3utyb3W5F5rcq81udea3GtN7rUm91o5uyRnl0zutSb3WpN7rcm91uRea3KvNbnXmtxrTe61Jvdak3utyb3W5F5rcq+Vs0tydsnkXmtyrzW515rca03utSb3WpN7rcm91uReK2eX1OySyb3W5F5rcq81udea3GtN7rUm91qTe63JvdbkXmtyrzW515rca03utWp2Sc0umdxrTe61Jvdak3utyb3W5F5rcq81udea3GvV7JKaXTK515rca03utSb3WpN7rcm91uRea3KvNbnXmtxrTe61Jvdak3utyb1WzS6p2SWTe63JvdbkXmtyrzW515rca03utSb3WpN7rZpdUrNLJvdak3utyb3W5F5rcq81udea3GtN7rUm91qTe63JvdbkXmtyrzW516rZJTW7ZHKvNbnXmtxrTe61Jvdak3utyb3W5F5rcq9Vs0tqdsnkXmtyrzW515rca03utSb3WpN7rcm91uRea3KvNbnXmtxrTe61JvdaNbukZpdM7rUm91qTe63JvdbkXmtyrzW515rca03utXp2Sc8umdxrTe61Jvdak3utyb3W5F5rcq81udea3Ov/wznbfC+Z3GtN7vX/4ZxtdsnkXmtyrzW515rca03utSb3WpN7rcm91uRea3Kv1bNLJvdak3utyb3W5F5rcq81udea3GtN7rUm91qTe63JvdbkXmtyrzW515rca/Xsksm91uRea3KvNbnXmtxrTe61Jvdak3utyb3W5F6rZ5dM7rUm91qTe63JvdbkXmtyrzW515rca03utSb3WpN7rcm91uRea3KvNbnX6tklk3utyb3W5F5rcq81udea3GtN7rUm91qTe63JvVbPLpnca03utSb3WpN7rcm91uRea3KvNbnXmtxrTe61Jvfak3vtyb325F57cq/9fLukJ/fak3vtyb325F57cq89udee3GtP7rUn99qTe+3n2yU9udee3GtP7rUn99qTe+3JvfbkXntyrz25157ca0/utSf32pN77cm99uRe+9lzbXuubc+17bm2PZ/knk9yzye555Pc80me+STPnO3MtZ25tjPXdubazlzbmWs7c21nrs3n2nw+SZ+z+ZzN52w+Z/M5m8/ZfK7N59piri3m2mI+yZhPMuaTjPkkYz7JmE8y5mwx15ZzbTnXlnNtOdeWc20515ZzbTnXlvNJ5pyt5mw1Z6s5W83Zas5Wc20111ZzbTXXVvNJ9nySPZ9kzyfZ80n2fJI9Z+u5tp5r67m22SWTe+3JvfbkXntyrz25157ca0/utSf32pN77cm99uRee3KvbbNLJvfak3vtyb325F57cq89udee3GtP7rUn99qTe22bXTK5157ca0/utSf32pN77cm99uRee3KvPbnXntxrT+61J/fak3vtyb325F7bZpdM7rUn99qTe+3JvfbkXntyrz25157ca0/utSf32ja7ZHKvPbnXntxrT+61J/fak3vtyb325F57cq89udee3GtP7rUn99qTe+3JvbbNLpnca0/utSf32pN77cm99uRee3KvPbnXntxrT+61bXbJ5F57cq89udee3GtP7rUn99qTe+3JvfbkXntyrz25157ca0/utSf32pN7bZtdMrnXntxrT+61J/fak3vtyb325F57cq89udee3Guv2SWTe+3JvfbkXntyrz25157ca0/utSf32pN77cm99uRee3KvPbnXntxrT+611+ySyb325F57cq89udee3GtP7rUn99qTe+3JvfbkXnvNLpnca0/utSf32pN77cm99uRee3KvPbnXntxrT+61J/fak3vtyb325F57cq+9ZpdM7rUn99qTe+3JvfbkXntyrz25157ca0/utSf32mt2yeRee3KvPbnXntxrT+61J/fak3vtyb325F57cq89udee3GtP7rUn99qTe+01u2Ryrz25157ca0/utSf32pN77cm99uRee3KvPbnXXrNLJvfak3vtyb325F57cq89udee3GtP7rUn99qTe+3JvfbkXntyrz25157ca+/ZJZN77cm99uRee3KvPbnXntxrT+61J/fak3vtyb32nl0yudee3GtP7rUn99qTe+3JvfbkXntyrz25157ca0/utSf32pN77cm99uRee88umdxrT+61J/fak3vtyb325F57cq89udee3GtP7rX37JLJvfbkXntyrz25157ca0/utSf32pN77cm99uRee3KvPbnXntxrT+61J/fae3bJ5F57cq89udee3GtP7rUn99qTe+3JvfbkXntyr71nl0zutSf32pN77cm99uRee3KvPbnXntxrT+61J/fak3vtyb325F57cq89udfes0sm99qTe+3JvfbkXntyrz25157ca0/utSf32pN77T27ZHKvPbnXntxrT+61J/fak3vtyb325F57cq89udee3GtP7rUn99qTe+3JvfaZXTK5157ca0/utSf32pN77cm99uRee3KvPbnXntxrn9klk3vtyb325F57cq89udee3GtP7rUn99qTe+3JvfbkXntyrz25157ca0/utc/sksm99uRee3KvPbnXntxrT+61J/fak3vtyb325F77zC6Z3GtP7rUn99qTe+3JvfbkXntyrz25157ca0/utSf32pN77cm99uRee3KvfWaXTO61J/fak3vtyb325F57cq89udee3GtP7rUn99pndsnkXntyrz25157ca0/utSf32pN77cm99uRee3KvPbnXntxrT+61J/fak3vtM7tkcq89udee3GtP7rUn99qTe+3JvfbkXntyrz251/bZJZN77cm99uRee3KvPbnXntxrT+61J/fak3vtyb325F57cq89udee3GtP7rV9dsnkXntyrz25157ca0/utSf32pN77cm99uRee3Kv7bNLJvfak3vtyb325F57cq89udee3GtP7rUn99qTe+3JvfbkXntyrz25157ca/vsksm99uRee3KvPbnXntxrT+61J/fak3vtyb325F7bZ5dM7rUn99qTe+3JvfbkXntyrz25157ca0/utSf32pN77cm99uRee3KvPbnX9tklk3vtyb325F57cq89udee3GtP7rUn99qTe+3JvbbPLpnca0/utSf32pN77cm99uRee3KvPbnXntxrT+61J/fak3vtyb325F57cq/ts0sm99qTe+3JvfbkXntyrz25157ca0/utSf32pN77ZhdMrnXntxrT+61J/fak3vtyb325F57cq89udee3GtP7rUn99qTe+3JvfbkXjtml0zutSf32pN77cm99uRee3KvPbnXntxrT+61J/faMbtkcq89udee3GtP7rUn99qTe+3JvfbkXntyrz25157ca0/utSf32pN77cm9dswumdxrT+61J/fak3vtyb325F57cq89udee3GtP7rVjdsnkXntyrz25157ca0/utSf32pN77cm99uRee3KvPbnXntxrT+61J/fak3vtmF0yudee3GtP7rUn99qTe+3JvfbkXntyrz25157ca8fsksm99uRee3KvPbnXntxrT+61J/fak3vtyb325F57cq89udee3GtP7rUn99o5u2Ryrz25157ca0/utSf32pN77cm99uRee3KvPbnXztklk3vtyb325F57cq89udee3GtP7rUn99qTe+3JvfbkXntyrz25157ca0/utXN2yeRee3KvPbnXntxrT+61J/fak3vtyb325F57cq+ds0sm99qTe+3JvfbkXntyrz25157ca0/utSf32pN77cm99uRee3KvPbnXntxr5+ySyb325F57cq89udee3GtP7rUn99qTe+3JvfbkXjtnl0zutSf32pN77cm99uRee3KvPbnXntxrT+61J/fak3vtyb325F57cq89udfO2SWTe+3JvfbkXntyrz25157ca0/utSf32pN77cm9ds4umdxrT+61J/fak3vtyb325F57cq89udee3GtP7rUn99qTe+3JvfbkXntyr12zSyb32pN77cm99uRee3KvPbnXntxrT+61J/fak3vtml0yudee3GtP7rUn99qTe+3JvfbkXntyrz25157ca0/utSf32pN77cm99uReu2aXTO61J/fak3vtyb325F57cq89udee3GtP7rUn99o1u2Ryrz25157ca0/utSf32pN77cm99uRee3KvPbnXntxrT+61J/fak3vtyb12zS6Z3GtP7rUn99qTe+3JvfbkXntyrz25157ca0/utWt2yeRee3KvPbnXntxrT+61J/fak3vtyb325F57cq89udee3GtP7rUn99qTe+2aXTK5157ca0/utSf32pN77cm99uRee3KvPbnXntxr9+ySyb325F57cq89udee3GtP7rUn99qTe+3JvfbkXntyr/8P52zzvWRyrz251/+Hc22zSyb32pN77cm99uRee3Kv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j+XuwPPE67HcHXieeD2W+6SeJ27PE7fniddjuQtpvqlej+UupN2B54m73YHnidvzxO154m534Hni9jxxe554PZa7A88Tr8dyd+B54t7uwPPE7Xni9jzxeix3IYdvqtdjuQs57sDzxH3cgeeJ2/PE7Xnift2B54nb88TteeL1WO4OPE+8HsvdgeeJ+3UHniduzxO354nXY7kL+fimej2Wu5DPHXieuD934Hni9jzxeJ54uLP9Hs8Tj+eJx/PE67HMDo7niddjmR0czxMPd7bf43ni8TzxeJ54PZZZyPVYZiHXY5mF/HgsPXAEdnA8TzyeJx7PE0+4A88Tj+eJx/PE67HcHXieeD2WuwPPE0+6A88Tj+eJx/PE67HchSTfVK/HcheS7sDzxJPuwPPE43ni8TzxlDvwPPF4nng8T/zxWGYHnif+eCyzA88TT7sDzxOP54nH88TrsdyFNN9Ur8dyF9LuwPPEs92B54nH88TjeeLZ7sDzxON54vE88cdjmR14nvjjscwOPE88xx14nng8TzyeJ16P5S7k8E31eix3IccdeJ54XnfgeeLxPPF4nnhed+B54vE88Xie+OOxzA48T/zxWGYHnieezx14nng8TzyeJ16P5S7k45vq9VhmIT8eSw8sgR28nie+nie+nie+3Nl+X88TX88TX88TfzyWNbAEdvB6nvhyZ/t9PU98PU98PU+8Hsss5Hoss5DrsdyFhDvwPPENd+B54ut54ut54hvuwPPE1/PE1/PEH49lduB54o/HMjvwPPFNd+B54ut54ut54vVY7kKKb6rXY7kLKXfgeeJb7sDzxNfzxNfzxLfcgeeJr+eJr+eJPx7L7MDzxB+PZXbgeeLb7sDzxNfzxNfzxOux3IVsvqlej+UuZLsDzxPf7Q48T3w9T3w9T3y3O/A88fU88fU88cdjmR14nvjjscwOPE98jzvwPPH1PPH1PPF6LHchL99Ur8dyF/K6A88T39cdeJ74ep74ep74fu7A88TX88TX88Qfj2V24Hnij8cyO/A88f3cgeeJn+eJn+eJ12OZhVyPZRZyPZZZyI/H0gNbYAef54mf54mf54mfd7Y/zxM/zxM/zxN/PJY1sAV28Hme+Hln+/M88fM88fM88XosdyHBN9XrsdyFhDvwPPHzzvbneeLneeLneeLnne3P88TP88TP88Qfj2V24Hnij8cyO/A88fPO9ud54ud54ud54vVY7kKKb6rXY7kLKXfgeeLnne3P88TP88TP88TPO9uf54mf54mf54k/HsvswPPEH49lduB54ued7c/zxM/zxM/zxOux3IVsvqlej+UuZLsDzxM/72x/nid+nid+nid+3tn+PE/8PE/8PE/88VhmB54n/ngsswPPEz/vbH+eJ36eJ36eJ16P5S7k5Zvq9VjuQl534Hni553tz/PEz/PEz/PEzzvbn+eJn+eJn+eJPx7Lfzv4Hs4Tvx+PJQZC+NvB93Ce+D2cJ34P54nf9Vj+LeS7Hsu/hXzXY/m3kO/HY+mBJfzt4Hs4T/wezhO/h/PE7+HO9vdwnvg9nCd+D+eJ34/HMjvgPPH78VhmB5wnfk+4g3AH4Q44T/yux3IXEh8LyYeFpDvgPPF70h2kO0h3wHni96Q7SHeQ7oDzxO/HY5kdcJ74/XgsswPOE7+n3EG5g3IHnCd+12O5C+mHhfRiIe0OOE/8nnYH7Q7aHXCe+D3tDtodbHfAeeL347HMDjhP/H48ltkB54nfs93BdgfbHXCe+F2P5S7kLBZygoVMJr7znzOZ+AMtbOHfBO/9z3mFD5hM/IF/E7yz68nEf/8bxt/1WN4ZZzLxX2HIdz2W+x/6OsFk4g+8ghN8TjCZ+AMhJLNNJt7ZJhPvbJOJd7bPCT4nmEwcuB7LDzDB9Vh+IIUS+m+267HMbNdjmdmuxzKzXY/l/ocuJ5hM/IEQnGA5wWTiD2zhMNtk4p1tMvHONpl4ZwsnCCeIFEpwgnCCOMIrfMw2mXhnm0y8s00m3tnSCdIJsoUtOEE6QfImXo/lB/gsXI/lzlZ8Fq7HcmcrJygnqCO8ghO0E7RvYvsmNp+F67Hc2ZrPwvVY7mztBO0E7Zu4fRO3E2wn2L6J2zdx+1nYfha2n4XtZ2E7wXGC45t4fBOPExwnOL6Jxzfx+Fk4fhaOn4XXz8LrBK8TvL6Jr2/i6wSvE7y+ia9v4utn4fOz8PlZ+PwsfE7wOcHnm/j5Jn5O8DnBx5t4PZYf4LNwPZaZ7XosM9v1WGa267HMf+j1WH7gCK/gBMsJ1hJC4LNwPZY72+KzcD2WO9tyguUEizfxeiw/4AThBJFCCXwWrsdyZws+C9djubOFE6QT5BJCcIJ0gmxhC3wWrsdyZ0s+C9djubOVE5QTVAolOEE5QR3hFfgsXI/lztZ8Fq7HcmdrJ2gnaN/E9k1sJ2gnaN/E7Zu4/SxsPwvbz8L2s7CdYDvB9k3cvonbCY4THN/E45t4/CwcPwvHz8Lxs3Cc4DjB8U18fRNfJ3id4PVNfH0TXz8Lr5+F18/C62fhdYLPCT7fxM838XOCzwk+38TPN/Hzs/D5Wfj4LFyPZWa7Hsv8h16P5QdSKIEJrsfyA0d4BT4L12OZ2a7HcmdbfBaux3L/Q5cTrBa24ATLCRZv4vVYfoDPwvVY7mzBZ+F6LHe2cIJwgjjCKzhBOkEuIQQ+C9djubMln4XrsdzZ0gnSCZI38XosP+AE5QSVQgl8Fq7HcmcrPgvXY7mzlRO0E7RvYvsmthO0E7RvYvsmNp+F67Hc2drPwvazsJ1gO8H2Tdy+idsJthNs38Ttm7j9LBw/C8fPwvGz4G/n9Ldz+ts5/e2c/nZOfzunv53T387pb+f0t3P62zn97Zz+dk5/O6e/ndPfzulv5/S3c/rbOf3tnP52Tn87p7+d09/O6W/n9Ldz+tu5/O1c/nYufzuXv53L387lb+fyt3P527n87Vz+di5/O5e/ncvfzuVv5/K3c/nbufztXP52Ln87l7+dy9/O5W/n8rdz+du5/O1c/nYufzuXv53L387lb+fyt3P527n87Vz+di5/O5e/ncvfzuVv5/K3c/nbufztXP52Ln87l7+dy9/O5W/n8rdz+du5/O1c/nYufzuXv53L387lb+fyt3P523k8lu+Z2f5l4i+8/2ANfMC/TPyFJcQ/yIEUSmhhC0d4hQ84j7AEJzgzwezgzARnYCaYHfzLxG/NI/zLxG/Nqv5l4hf3/8+/CWL+T7/u4HUHbwgplOAO3s2g72HQ92XQf5n4M+i/TPwZ9JsJ5p/+CyGFEv5NsOb/9L9M/HnSf5n486Tf7OD+v+E9GI/lF5YQQgq8B+Ox3Mcej+U+9ngs97HHY7mPPR7LfezxWO7zjMfyCyGkUH+PPR7LL7CD8VjuDsZjuTsYj+XnecIdhDsIdxDuINxBuINwB+EOwh2EO0h3kO4g3UG6g3QH6Q7SHaQ7SHeQ7qDcQbmDcgflDsodlDsod1DuoNxBuYN2B+0O2h20O2h30O6g3UG7g3YHZmKbiW0m9nYH2x2Yib3dwXYH2x1sd7DdwXEHxx0cd3DcwXEHxx0cd3DcwXEHxx2YiW0mtpnYZmK/7uB1B687eN3B6w5ed/C5AzOxzcQ2E8dj+XlsM7HNxDYT20xsM3GbidtM3GbiNhO3mbjNxG0mbjNxm4nbTNxm4jYTt5m4zcRtJm4zcZuJ20zcZuI2E7eZuM3EbSZuM3GbidtM3GbiNhO3mbjNxG0mbjNxm4nbTNxm4jYTt5m4zcRtJm4zcZuJ20zcZuI2E7eZuM3EbSZuM3GbidtM3GbiNhO3mbjNxG0mbjNxm4nbTNxm4jYTt5m4zcRtJm4zcZuJ20zcZuI2E7eZuM3EbSZuM3GbidtM3GbiNhO3mbjNxG0mbjNxm4nbTNxm4jYTt5m4zcRtJm4zcZuJ20zcZuI2E7eZuM3EbSZuM3GbidtM3GbiNhOPmXjMxGMmHjPxmInHTDxm4jETj5l4zMRjJh4z8ZiJx0w8ZuIxE4+ZeMzEYyYeM/GYicdMPGbiMROPmXjMxGMmHjPxmInHTDxm4jETj5l4zMRjJh4z8ZiJx0w8ZuIxE4+ZeMzEYyYeM/GYicdMPGbiMROPmXjMxGMmHjPxmInHTDxm4jETj5l4zMRjJh4z8ZiJx0w8ZuIxE4+ZeMzEYyYeM/GYicdMPGbiMROPmXjMxGMmHjPxmInHTDxm4jETj5l4zMRjJh4z8ZiJx0w8ZuIxE4+ZeMzEYyYeM/GYicdMPGbiMROPmXjMxGMmHjPxNRNfM/E1E18z8TUTXzPxNRNfM/E1E18z8TUTXzPxNRNfM/E1E18z8TUTXzPxNRNfM/E1E18z8TUTXzPxNRNfM/E1E18z8TUTXzPxNRNfM/E1E18z8TUTXzPxNRNfM/E1E18z8TUTXzPxNRNfM/E1E18z8TUTXzPxNRNfM/E1E18z8TUTXzPxNRNfM/E1E18z8TUTXzPxNRNfM/E1E18z8TUTXzPxNRNfM/E1E18z8TUTXzPxNRNfM/E1E18z8TUTXzPxNRNfM/E1E18z8TUTXzPxNRNfM/E1E18z8TUTXzPxNRNfM/E1E18z8TUTXzPxNRNfM/E1E18z8TMTPzPxMxM/M/EzEz8z8TMTPzPxMxM/M/EzEz8z8TMTPzPxMxM/M/EzEz8z8TMTPzPxMxM/M/EzEz8z8TMTPzPxMxM/M/EzEz8z8TMTPzPxMxM/M/EzEz8z8TMTPzPxMxM/M/EzEz8z8TMTPzPxMxM/M/EzEz8z8TMTPzPxMxM/M/EzEz8z8TMTPzPxMxM/M/EzEz8z8TMTPzPxMxM/M/EzEz8z8TMTPzPxMxM/M/EzEz8z8TMTPzPxMxM/M/EzEz8z8TMTPzPxMxM/M/EzEz8z8TMTPzPxMxM/M/EzEz8z8TMTPzPxMxM/M/EzEz8z8TMTPzPxMxO/v0zM5/nLxP9gCSGk8LuD/+B3B//B7w7+g98d/Ae/O/gPfnfwf/jLxP9gCSGk8LuD/6CF3x38B787+A9+d/AfuINwB+EOwh2EOwh3EO4g3EG4g3AH4Q7SHaQ7SHeQ7iDdQbqDdAfpDtIdpDsod1DuoNxBuYNyB+UOyh2UOyh3UO6g3UG7g3YH7Q7aHbQ7aHfQ7qDdQbuD7Q62O9juYLuD7Q62O9juYLuD7Q62Ozju4LiD4w6OOzju4LiD4w6OOzju4LiD1x287uB1B687eN3B6w5ed/C6g9cdvO7gcwefO/jcwecOPnfwuYPPHXzu4HMHZuIyE5eZuMzEZSYuM3GZictMXGbiMhOXmbjMxGUmLjNxmYnLTFxm4jITl5m4zMRlJi4zcZmJy0xcZuIyE5eZuMzEZSYuM3GZictMXGbiMhOXmbjMxGUmLjNxmYnLTFxm4jITl5m4zMRlJi4zcZmJy0xcZuIyE5eZuMzEZSYuM3GZictMXGbiMhOXmbjMxGUmLjNxmYnLTFxm4jITl5m4zMRlJi4zcZmJy0xcZuIyE5eZuMzEZSYuM3GZictMXGbiMhOXmbjMxGUmLjNxmYnLTFxm4jITl5m4zMRlJi4zcZmJy0xcZuIyE5eZuMzEZSaGmRhmYpiJYSaGmRhmYpiJYSaGmRhmYpiJYSaGmRhmYpiJYSaGmRhmYpiJYSaGmRhmYpiJYSaGmRhmYpiJYSaGmRhmYpiJYSaGmRhmYpiJYSaGmRhmYpiJYSaGmRhmYpiJYSaGmRhmYpiJYSaGmRhmYpiJYSaGmRhmYpiJYSaGmRhmYpiJYSaGmRhmYpiJYSaGmRhmYpiJYSaGmRhmYpiJYSaGmRhmYpiJYSaGmRhmYpiJYSaGmRhmYpiJYSaGmRhmYpiJYSaGmRhmYpiJYSaGmRhmYpiJYSaGmRhmYpiJYSammZhmYpqJaSammZhmYpqJaSammZhmYpqJaSammZhmYpqJaSammZhmYpqJaSammZhmYpqJaSammZhmYpqJaSammZhmYpqJaSammZhmYpqJaSammZhmYpqJaSammZhmYpqJaSammZhmYpqJaSammZhmYpqJaSammZhmYpqJaSammZhmYpqJaSammZhmYpqJaSammZhmYpqJaSammZhmYpqJaSammZhmYpqJaSammZhmYpqJaSammZhmYpqJaSammZhmYpqJaSammZhmYpqJaSammZhmYpqJaSammZhmYpqJaSaWmVhmYpmJZSaWmVhmYpmJZSaWmVhmYpmJZSaWmVhmYpmJZSaWmVhmYpmJZSaWmVhmYpmJZSaWmVhmYpmJZSaWmVhmYpmJZSaWmVhmYpmJZSaWmVhmYpmJZSaWmVhmYpmJZSaWmVhmYpmJZSaWmVhmYpmJZSaWmVhmYpmJZSaWmVhmYpmJZSaWmVhmYpmJZSaWmVhmYpmJZSaWmVhmYpmJZSaWmVhmYpmJZSaWmVhmYpmJZSaWmVhmYpmJZSaWmVhmYpmJZSaWmVhmYpmJZSaWmVhmYpmJZSaWmVhmYpmJZSa2mdhmYpuJbSa2mdhmYpuJbSa2mdhmYpuJbSa2mdhmYpuJbSa2mdhmYpuJbSa2mdhmYpuJbSa2mdhmYpuJbSa2mdhmYpuJbSa2mdhmYpuJbSa2mdhmYpuJbSa2mdhmYpuJbSa2mdhmYpuJbSa2mdhmYpuJbSa2mdhmYpuJbSa2mdhmYpuJbSa2mdhmYpuJbSa2mdhmYpuJbSa2mdhmYpuJbSa2mdhmYpuJbSa2mdhmYpuJbSa2mdhmYpuJbSa2mdhmYpuJbSa2mdhmYpuJbSa2mdhmYpuJbSa2mdhmYpuJbSZuM3GbidtM3GbiNhO3mbjNxG0mbjNxm4nbTNxm4jYTt5m4zcRtJm4zcZuJ20zcZuI2E7eZuM3EbSZuM3GbidtM3GbiNhO3mbjNxG0mbjNxm4nbTNxm4jYTt5m4zcRtJm4zcZuJ20zcZuI2E7eZuM3EbSZuM3GbidtM3GbiNhO3mbjNxG0mbjNxm4nbTNxm4jYTt5m4zcRtJm4zcZuJ20zcZuI2E7eZuM3EbSZuM3GbidtM3GbiNhO3mbjNxG0mbjNxm4nbTNxm4jYTt5m4zcRtJm4zcZuJ20zcZuI2E7eZuM3EbSZuM3GbidtM3GbiMROPmXjMxGMmHjPxmInHTDxm4jETj5l4zMRjJh4z8ZiJx0w8ZuIxE4+ZeMzEYyYeM/GYicdMPGbiMROPmXjMxGMmHjPxmInHTDxm4jETj5l4zMRjJh4z8ZiJx0w8ZuIxE4+ZeMzEYyYeM/GYicdMPGbiMROPmXjMxGMmHjPxmInHTDxm4jETj5l4zMRjJh4z8ZiJx0w8ZuIxE4+ZeMzEYyYeM/GYicdMPGbiMROPmXjMxGMmHjPxmInHTDxm4jETj5l4zMRjJh4z8ZiJx0w8ZuIxE4+ZeMzEYyYeM/GYicdMPGbiMROPmXjMxGMmvmbiaya+ZuJrJr5m4msmvmbiaya+ZuJrJr5m4msmvmbiaya+ZuJrJr5m4msmvmbiaya+ZuJrJr5m4msmvmbiaya+ZuJrJr5m4msmvmbiaya+ZuJrJr5m4msmvmbiaya+ZuJrJr5m4msmvmbiaya+ZuJrJr5m4msmvmbiaya+ZuJrJr5m4msmvmbiaya+ZuJrJr5m4msmvmbiaya+ZuJrJr5m4msmvmbiaya+ZuJrJr5m4msmvmbiaya+ZuJrJr5m4msmvmbiaya+ZuJrJr5m4msmvmbiaya+ZuJrJr5m4msmvmbiaya+ZuJrJr5m4msmvmbiaya+ZuJrJn5m4mcmfmbiZyZ+ZuJnJn5m4mcmfmbiZyZ+ZuJnJn5m4mcmfmbiZyZ+ZuJnJn5m4mcmfmbiZyZ+ZuJnJn5m4mcmfmbiZyZ+ZuJnJn5m4mcmfmbiZyZ+ZuJnJn5m4mcmfmbiZyZ+ZuJnJn5m4mcmfmbiZyZ+ZuJnJn5m4mcmfmbiZyZ+ZuJnJn5m4mcmfmbiZyZ+ZuJnJn5m4mcmfmbiZyZ+ZuJnJn5m4mcmfmbiZyZ+ZuJnJn5m4mcmfmbiZyZ+ZuJnJn5m4mcmfmbiZyZ+ZuJnJn5m4mcmfmbiZyZ+ZuJnJn5m4mcmfmbiZyZ+ZuJnJn5m4mcmfmaiHsvSY1l6LEuPZemxLD2Wpcey9FiWHsvSY1l6LEuPZemxLD2Wpcey9FiWHsvSY1l6LEuPZemxLD2Wpcey9FiWHsvSY1l6LEuPZemxLD2Wpcey9FiWHsvSY1l6LEuPZemxLD2Wpcey9FiWHsvSY1l6LEuPZemxLD2Wpcey9FiWHsvSY1l6LEuPZemxLD2Wpcey9FiWHsvSY1l6LEuPZemxLD2Wpcey9FiWHsvSY1l6LEuPZemxLD2Wpcey9FiWHsvSY1l6LEuPZemxLD2Wpcey9FiWHsvSY1l6LEuPZemxLD2Wpcey9FiWHsvSY1l6LEuPZemxLD2Wpcey9FiWHsvSY1l6LEuPZemxLD2Wpcey9FiWHsvSY1l6LEuPZemxLD2Wpcey9FiWHsvSY1l6LEuPZemxLD2Wpcey9FiWHsvSY1l6LEuPZemxLD2Wpcey9FiWHsvSY1l6LEuPZemxLD2Wpcey9FiWHsvSY1l6LEuPZemxLD2Wpcey9FiWHsvSY1l6LEuPZemxLD2Wpcey9FiWHsvSY1l6LEuPZemxLD2Wpcey9FiWHsvSY1l6LEuPZemxLD2Wpcey9FiWHsvSY1l6LEuPZemxLD2Wpcey9FiWHsvSY1l6LEuPZemxLD2Wpcey9FiWHsvSY1l6LEuPZemxLD2Wpcfy/0+mOzATl5mox7L0WJYey9JjWXosS49l6bEsPZalx7L0WJYey9JjWXosS49l6bEsPZalx7L0WJYey9JjWXosS49l6bEsPZalx7L0WJYey9JjWXosS49l6bEsPZalx7L0WJYey9JjWXosS49l6bEsPZalx7L0WJYey9JjWXosS49l6bEsPZalx7L0WJYey9JjWXosS49l6bEsPZalx7L0WJYey9JjWXosS49l6bEsPZalx7L0WJYey9JjWXosS49l6bEsPZalx7L0WJYey9JjWXosS49l6bEsPZalx7L0WJYey9JjWXosS49l6bEsPZalx7L0WJYey9JjWXosS49l6bEsPZalx7L0WJYey9JjWXosS49l6bEsPZalx7L0WJYey9JjWXosS49l6bEsPZalx7L0WJYey9JjWXosS49l6bEsPZalx7L0WJYey9JjWXosS49l6bEsPZalx7L0WJYey9JjWXosS49l6bEsPZalx7L0WJYey9JjWXosS49l6bEsPZalx7L0WJYey9JjWXosS49l6bEsPZalx7L0WJYey9JjWXosS49l6bEsPZalx7L0WJYey9JjWXosS49l6bEsPZalx7L0WJYey9JjWXosS49l6bEsPZalx7L0WJYey9JjWXosS49l6bEsPZalx7L0WJYey9JjWXosS49l6bEsPZalx7L0WJYey9JjWXosS49l6bEsPZalx7L0WJYey9JjWXosS49l6bEsPZalx7L0WJYey9JjWXosS49l6bEsPZalx7L0WJYey9JjWXosS49l6bEsPZalx7L0WJYey9JjWXosS49l6bEsPZalx7L0WJYey9JjWXosS49l6bEsPZalx7L0WJYey9JjWXosS49l6bEsPZalx7L0WJYey9JjWXosS49l6bEsPZalx7L0WJYey9JjWXosS49l6bEsPZalx7L0WJYey9JjWXosS49l6bEsPZalx7L0WJYey9JjWXosS49l6bEsPZalx7L0WJYey9JjWXosS49l6bEsPZalx7L0WJYey9JjWXosS49l6bEsPZalx7L0WJYey9JjWXosS49l6bEsPZalx7L0WJYey9JjWXosS49l6bEsPZalx7L0WJYey9JjWXosS49l6bEsPZalx7L0WJYey9JjWXosS49l6bEsPZalx7L0WJYey9JjWXosS49l6bEsPZalx7L0WJYey9JjWXosS49l6bEsPZalx7L0WJYey9JjWXosS49l6bEsPZalx7L0WJYey9JjWXosS49l6bEsPZalx7L0WJYey9JjWXosS49l6bEsPZalx7L0WJYey9JjWXosS49l6bEsPZalx7L0WJYey9JjWXosS49l6bEsPZalx7L0WJYey9JjWXosS49l6bEsPZalx7L0WJYey9JjWXosS49l6bEsPZalx7L0WJYey9JjWXosS49l6bEsPZalx7L0WJYey9JjWXosS49l6bEsPZalx7L0WJYey9JjWXosS49l6bEsPZalx7L0WJYey9JjWXosS49l6bEsPZalx7L0WJYey9JjWXosS49l6bEsPZalx7L0WJYey9JjWXosS49l6bEsPZalx7L0WJYey9JjWXosS49l6bEsPZalx7L0WJYey9JjWXosS49l6bEsPZalx7L0WJYey9JjWXosS49l6bEsPZalx7L0WJYey9JjWXosS49l6bEsPZalx7L0WJYey9JjWXosS49l6bEsPZalx7L0WJYey9JjWXosS49l6bEsPZalx7L0WJYey9JjWXosS49l6bEsPZalx7L0WJYey9JjWXosS49l6bEsPZalx7L0WJYey9JjWXosS49l6bEsPZalx7L0WJYey9JjWXosS49l6bEsPZalx7L0WJYey9JjWXosS49l6bEsPZalx7L0WJYey9JjWXosS49l6bEsPZalx7L0WJYey9JjWXosS49l6bEsPZalx7L0WJYey9JjWXosS49l6bEsPZalx7L0WJYey9JjWXosS49l6bEsPZalx7L0WJYey9JjWXosS49l6bEsPZalx7L0WJYey9JjWXosS49l6bEsPZalx7L0WJYey9JjWXosS49l6bEsPZalx7L0WJYey9JjWXosS49l6bEsPZalx7L0WJYey9JjWXosS49l6bEsPZalx7L0WJYey9JjWXosS49l6bEsPZalx7L0WJYey9JjWXosS49l6bEsPZalx7L0WJYey9JjWXosS49l6bEsPZalx7L0WJYey9JjWXosS49l6bEsPZalx7L0WJYey9JjWXosS49l6bEsPZalx7L0WJYey9JjWXosS49l6bEsPZalx7L0WJYey9JjWXosS49l6bEsPZalx7L0WJYey9JjWXosS49l6bEsPZalx7L0WJYey9JjWXosS49l6bEsPZalx7L0WJYey9JjWXosS49l6bEsPZalx7L0WJYey9JjWXosS49l6bEsPZalx7L0WJYey9JjWXosS49l6bEsPZalx7L0WJYey9Jj+e//I4SQAjvQY1l6LEuPZemxLD2Wpcey9FiWHsvSY1l6LEuPZemxLD2Wpcey9FiWHsvSY1l6LEuPZemxLD2Wpcey9FiWHsvSY1l6LEuPZemxLD2Wpcey9FiWHsvSY1l6LEuPZemxLD2Wpcey9FiWHsvSY1l6LEuPZemxLD2Wpcey9FiWHsvSY1l6LEuPZemxLD2Wpcey9FiWHsvSY1l6LEuPZemxLD2Wpcey9FiWHsvSY1l6LEuPZemxLD2Wpcey9FiWHsvSY1l6LEuPZemxLD2Wpcey9FiWHsvSY1l6LEuPZemxLD2Wpcey9FiWHsvSY1l6LEuPZemxLD2Wpcey9FhCjyX0WEKPJfRYQo8l9FhCjyX0WEKPJfRYQo8l9FhCjyX0WEKPJfRYQo8l9FhCjyX0WEKPJfRYQo8l9FhCjyX0WEKPJfRYQo8l9FhCjyX0WEKPJfRYQo8l9FhCjyX0WEKPJfRYQo8l9FhCjyX0WEKPJfRYQo8l9FhCjyX0WEKPJfRYQo8l9FhCjyX0WEKPJfRYQo8l9FhCjyX0WEKPJfRYQo8l9FhCjyX0WEKPJfRYQo8l9FhCjyX0WEKPJfRYQo8l9FhCjyX0WEKPJfRYQo8l9FhCjyX0WEKPJfRYQo8l9FhCjyX0WEKPJfRYQo8l9FhCjyX0WEKPJfRYQo8l9FhCjyX0WEKPJfRYQo8l9FhCjyX0WEKPJfRYQo8l9FhCjyX0WEKPJfRYQo8l9FhCjyX0WEKPJfRYQo8l9FhCjyX0WEKPJfRYQo8l9FhCjyX0WEKPJfRYQo8l9FhCjyX0WEKPJfRYQo8l9FhCjyX0WEKPJfRYQo8l9FhCjyX0WEKPJfRYQo8l9FhCjyX0WEKPJfRYQo8l9FhCjyX0WEKPJfRYQo8l9FhCjyX0WEKPJfRYQo8l9FhCjyX0WEKPJfRYQo8l9FhCjyX0WEKPJfRYQo8l9FhCjyX0WEKPJfRYYpmJy0xcZqIeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosfwflhBCCuxAjyX0WEKPJfRYQo8l9FhCjyX0WEKPJfRYQo8l9FhCjyX0WEKPJfRYQo8l9FhCjyX0WEKPJfRYQo8l9FhCjyX0WEKPJfRYQo8l9FhCjyX0WEKPJfRYQo8l9FhCjyX0WEKPJfRYQo8l9FhCjyX0WEKPJfRYQo8l9FhCjyX0WEKPJfRYQo8l9FhCjyX0WEKPJfRYQo8l9FhCjyX0WEKPJfRYQo8l9FhCjyX0WEKPJfRYQo8l9FhCjyX0WEKPJfRYQo8l9FhCjyX0WEKPJfRYQo8l9FhCjyX0WEKPJfRYQo8l9FhCjyX0WEKPJfRYQo8l9VhSjyX1WFKPJfVYUo8l9VhSjyX1WFKPJfVYUo8l9VhSjyX1WFKPJfVYUo8l9VhSjyX1WFKPJfVYUo8l9VhSjyX1WFKPJfVYUo8l9VhSjyX1WFKPJfVYUo8l9VhSjyX1WFKPJfVYUo8l9VhSjyX1WFKPJfVYUo8l9VhSjyX1WFKPJfVYUo8l9VhSjyX1WFKPJfVYUo8l9VhSjyX1WFKPJfVYUo8l9VhSjyX1WFKPJfVYUo8l9VhSjyX1WFKPJfVYUo8l9VhSjyX1WFKPJfVYUo8l9VhSjyX1WFKPJfVYUo8l9VhSjyX1WFKPJfVYUo8l9VhSjyX1WFKPJfVYUo8l9VhSjyX1WFKPJfVYUo8l9VhSjyX1WFKPJfVYUo8l9VhSjyX1WFKPJfVYUo8l9VhSjyX1WFKPJfVYUo8l9VhSjyX1WFKPJfVYUo8l9VhSjyX1WFKPJfVYUo8l9VhSjyX1WFKPJfVYUo8l9VhSjyX1WFKPJfVYUo8l9VhSjyX1WFKPJfVYUo8l9VhSjyX1WFKPJfVYUo8l9VhSjyX1WFKPJfVYUo8l9VhSjyX1WFKPJfVYUo8l9VhSjyX1WFKPJfVYUo8l9VhSjyX1WFKPJfVYUo8l9VhSjyX1WFKP5b//NQQezkxcZqIeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsfwflhBCCuxAjyX1WFKPJfVYUo8l9VhSjyX1WFKPJfVYUo8l9VhSjyX1WFKPJfVYUo8l9VhSjyX1WFKPJfVYUo8l9VhSjyX1WFKPJfVYUo8l9VhSjyX1WFKPJfVYUo8l9VhSjyX1WFKPJfVYUo8l9VhSjyX1WFKPJfVYUo8l9VhSjyX1WFKPJfVYUo8l9VhSjyX1WFKPJfVYUo8l9VhSjyX1WFKPJfVYUo8l9VhSjyX1WFKPJfVYUo8l9VhSjyX1WFKPJfVYUo8l9VhSjyX1WFKPJfVYUo8l9VhSjyX1WFKPJfVYUo8l9VhSjyX1WFKPJfVYUo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpZaZuMzEZSbqsZQeS+mxlB5L6bGUHkvpsZQeS+mxlB5L6bGUHkvpsZQeS+mxlB5L6bGUHkvpsZQeS+mxlB5L6bGUHkvpsZQeS+mxlB5L6bGUHkvpsZQeS+mxlB5L6bGUHkvpsZQeS+mxlB5L6bGUHkvpsZQeS+mxlB5L6bGUHkvpsZQeS+mxlB5L6bGUHkvpsZQeS+mxlB5L6bGUHkvpsZQeS+mxlB5L6bGUHkvpsZQeS+mxlB5L6bGUHkvpsZQeS+mxlB5L6bGUHkvpsZQeS+mxlB5L6bGUHkvpsZQeS+mxlB5L6bGUHkvpsZQeS+mxlB5L6bGUHkvpsZQeS+mxlB5L6bGUHkvpsZQeS+mxlB5L6bGUHkvpsZQeS+mxlB5L6bGUHkvpsZQeS+mxlB5L6bGUHkvpsZQeS+mxlB5L6bGUHkvpsZQeS+mxlB5L6bGUHkvpsZQeS+mxlB5L6bGUHkvpsZQeS+mxlB5L6bGUHkvpsZQeS+mxlB5L6bGUHkvpsZQeS+mxlB5L6bGUHkvpsZQeS+mxlB5L6bGUHkvpsZQeS+mxlB5L6bGUHkvpsZQeS+mxlB5L6bGUHkvpsZQeS+mxlB5L6bGUHkvpsZQeS+mxlB5L6bGUHkvpsZQeS+mxlB5L6bGUHkvpsZQeS+mxlB5L6bGUHkvpsZQeS+mxlB5L6bGUHkvpsZQeS+mxlB5L6bGUHkvpsZQeS+mxlB5L6bGUHkvpsZQeS+mxlB5L6bGUHkvpsZQeS+mxlB5L6bGUHkvpsZQeS+mxlB5L6bGUHkvpsZQeS+mxlB5L6bGUHkvpsZQeS+mxlB5L6bGUHkvpsZQeS+mxlB5L6bGUHkvpsZQeS+mxlB5L6bGUHkvpsZQeS+mxlB5L6bGUHkvpsZQeS+mxlB5L6bGUHkvpsZQeS+mxlB5L6bGUHkvpsZQeS+mxlB5L6bGUHkvpsZQeS+mxlB5L6bGUHkvpsZQeS+mxlB5L6bGUHkvpsZQeS+mxlB5L6bGUHkvpsZQeS+mxlB5L6bGUHkvpsZQeS+mxlB5L6bGUHkvpsZQeS+mxlB5L6bGUHkvpsZQeS+mxlB5L6bGUHkvpsZQeS+mxlB5L6bGUHkvpsZQeS+mxlB5L6bGUHkvpsZQeS+mxlB5L6bGUHkvpsZQeS+mxlB5L6bGUHkvpsZQeS+mxlB5L6bGUHkvpsZQeS+mxlB5L6bGUHkvpsZQeS+mxlB5L6bGUHkvpsZQeS+mxlB5L6bGUHkvpsZQeS+mxlB5L6bGUHkvpsZQeS+mxlB5L6bGUHkvpsZQeS+mxlB5L6bGUHkvpsZQeS+mxlB5L6bGUHkvpsZQeS+mxlB5L6bGUHkvpsZQeS+mxlB5L6bGUHkvpsZQeS+mxlB5L6bGUHkvpsZQeS+mxlB5L6bGUHkvpsZQeS+mxlB5L6bGUHkvpsZQeS+mxlB5L6bGUHkvpsZQeS+mxlB5L6bGUHkvpsZQeS+mxlB5L6bGUHkvpsZQeS+mxlB5L6bGUHkvpsZQeS+mxlB5L6bGUHkvpsZQeS+mxlB5L6bGUHkvpsZQeS+mxlB5L6bGUHkvpsZQeS+mxlB5L6bGUHkvpsZQeS+mxlB5L6bGUHkvpsZQeS+mxlB5L6bGUHkvpsZQeS+mxlB5L6bGUHkvpsZQeS+mxlB5L6bGUHkvpsZQeS+mxlB5L6bGUHkvpsZQeS+mxlB5L6bGUHkvpsZQeS+mxlB5L6bGUHkvpsZQeS+mxlB5L6bGUHkvpsZQeS+mxlB5L6bGUHkvpsZQeS+mxlB5L6bGUHkvpsZQeS+mxlB5L6bGUHkvpsZQeS+mxlB5L6bGUHkvpsZQeS+mxlB5L6bGUHkvpsZQeS+mxlB5L6bGUHkvpsZQeS+mxlB5L6bGUHkvpsZQeS+mxlB5L6bGUHkvpsZQeS+mxlB5L6bGUHkvpsZQeS+mxlB5L6bGUHkvpsZQeS+mxlB5L6bGUHkvpsZQeS+mxlB5L6bGUHkvpsZQeS+mxlB5L6bGUHkvpsZQeS+mxlB5L6bGUHkvpsZQeS+mxlB5L6bGUHkvpsZQeS+mxlB5L6bGUHkvpsZQeS+mxlB5L6bGUHkvpsZQeS+mxlB5L6bGUHkvpsZQeS+mxlB5L6bGUHkvpsZQeS+mxlB5L6bGUHkvpsZQeS+mxlB5L6bGUHkvpsZQeS+mxlB5L6bGUHkvpsZQeS+mxlB5L6bGUHkvpsZQeS+mxlB5L6bGUHkvpsZQeS+mxlB5L6bGUHkvpsZQeS+mxlB5L6bGUHkvpsZQeS+mxlB5L6bGUHkvpsZQeS+mxlB5L6bGUHkvpsZQeS+mxlB5L6bGUHkvpsZQeS+mxlB5L6bGUHkvpsZQeS+mxlB5L6bGUHsv/YQkhpMAO9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYWo+l9Vhaj6X1WFqPpfVYWo+l9Vhaj6X1WFqPpfVYWo+l9Vhaj6X1WFqPpfVYWo+l9Vhaj6X1WFqPpfVYWo+l9Vhaj6X1WFqPpfVYWo+l9Vhaj6X1WFqPpfVYWo+l9Vhaj6X1WFqPpfVYWo+l9Vhaj6X1WFqPpfVYWo+l9Vhaj6X1WFqPpfVYWo+l9Vhaj6X1WFqPpfVYWo+l9Vhaj6X1WFqPpfVYWo+l9Vhaj6X1WFqPpfVYWo+l9Vhaj6X1WFqPpfVYWo+l9Vhaj6X1WFqPpfVYWo+l9Vhaj6X1WFqPpfVYWo+l9Vhaj6X1WFqPpfVYWo+l9Vhaj6X1WFqPpfVYWo+l9Vhaj6X1WFqPpfVYWo+l9Vhaj6X1WFqPpfVYWo+l9Vhaj6X1WFqPpfVYWo+l9Vhaj6X1WFqPpfVYWo+l9Vhaj6X1WFqPpfVYWo+l9Vhaj6X1WFqPpfVYWo+l9Vhaj6X1WFqPpfVYWo+l9Vhaj6X1WFqPpfVYWo+l9Vhaj6X1WFqPpfVYWo+l9Vhaj6X1WFqPpfVYWo+l9Vhaj6X1WFqPpfVYWo+l9Vhaj6X1WFqPpfVYWo+l9Vhaj6X1WFqPpfVYWo+l9Vhaj6X1WFqPpfVYWo+l9Vhaj6X1WHqZictMXGaiHkvrsbQeS+uxtB5L67G0HkvrsbQeS+uxtB5L67G0HkvrsbQeS+uxtB5L67G0HkvrsbQeS+uxtB5L67G0HkvrsbQeS+uxtB5L67G0HkvrsbQeS+uxtB5L67G0HkvrsbQeS+uxtB5L67G0HkvrsbQeS+uxtB5L67G0HkvrsbQeS+uxtB5L67G0HkvrsbQeS+uxtB5L67G0HkvrsbQeS+uxtB5L67G0HkvrsbQeS+uxtB5L67G0HkvrsbQeS+uxtB5L67G0HkvrsbQeS+uxtB5L67G0HkvrsbQeS+uxtB5L67G0HkvrsbQeS+uxtB5L67G0HkvrsbQeS+uxtB5L67G0HkvrsbQeS+uxtB5L67G0HkvrsbQeS+uxtB5L67G0HkvrsbQeS+uxtB5L67G0HkvrsbQeS+uxtB5L67G0HkvrsbQeS+uxtB5L67G0HkvrsbQeS+uxtB5L67G0HkvrsbQeS+uxtB5L67G0HkvrsbQeS+uxtB5L67G0HkvrsbQeS+uxtB5L67G0HkvrsbQeS+uxtB5L67G0HkvrsbQeS+uxtB5L67G0HkvrsbQeS+uxtB5L67G0HkvrsbQeS+uxtB5L67G0HkvrsbQeS+uxtB5L67G0HkvrsbQeS+uxtB5L67G0HkvrsbQeS+uxtB5L67G0HkvrsbQeS+uxtB5L67G0HkvrsbQeS+uxtB5L67G0HkvrsbQeS+uxtB5L67G0HkvrsbQeS+uxtB5L67G0HkvrsbQeS+uxtB5L67G0HkvrsbQeS+uxtB5L67G0HkvrsbQeS+uxtB5L67G0HkvrsbQeS+uxtB5L67G0HkvrsbQeS+uxtB5L67G0HkvrsbQeS+uxtB5L67G0HkvrsbQeS+uxtB5L67G0HkvrsbQeS+uxtB5L67G0HkvrsbQeS+uxtB5L67G0HkvrsbQeS+uxtB5L67G0HkvrsbQeS+uxtB5L67G0HkvrsbQeS+uxtB5L67G0HkvrsbQeS+uxtB5L67G0HkvrsbQeS+uxtB5L67G0HkvrsbQeS+uxtB5L67G0HkvrsbQeS+uxtB5L67G0HkvrsbQeS+uxtB5L67G0HkvrsbQeS+uxtB5L67G0HkvrsbQeS+uxtB5L67G0HkvrsbQeS+uxtB5L67G0HkvrsbQeS+uxtB5L67G0HkvrsbQeS+uxtB5L67G0HkvrsbQeS+uxtB5L67G0HkvrsbQeS+uxtB5L67G0HkvrsbQeS+uxtB5L67G0HkvrsbQeS+uxtB5L67G0HkvrsbQeS+uxtB5L67G0HkvrsbQeS+uxtB5L67G0HkvrsbQeS+uxtB5L67G0HkvrsbQeS+uxtB5L67G0HkvrsbQeS+uxtB5L67G0HkvrsbQeS+uxtB5L67G0HkvrsbQeS+uxtB5L67G0HkvrsbQeS+uxtB5L67G0HkvrsbQeS+uxtB5L67G0HkvrsbQeS+uxtB5L67G0HkvrsbQeS+uxtB5L67G0HkvrsbQeS+uxtB5L67G0HkvrsbQeS+uxtB5L67G0HkvrsbQeS+uxtB5L67G0HkvrsbQeS+uxtB5L67G0HkvrsbQeS+uxtB5L67G0HkvrsbQeS+uxtB5L67G0HkvrsbQeS+uxtB5L67G0HkvrsbQeS+uxtB5L67G0HkvrsbQeS+uxtB5L67G0HkvrsbQeS+uxtB5L67G0HkvrsbQeS+uxtB5L67G0HkvrsbQeS+uxtB5L67G0HkvrsbQeS+uxtB5L67G0HkvrsbQeS+uxtB5L67G0HkvrsbQeS+uxtB5L67G0HkvrsbQeS+ux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ltBjCT2W0GMJPZbQYwk9ltBjCT2W0GMJPZbQYwk9ltBjCT2W0GMJPZbQYwk9ltBjCT2W0GMJPZbQYwk9ltBjCT2W0GMJPZbQYwk9ltBjCT2W0GMJPZbQYwk9ltBjCT2W0GMJPZbQYwk9ltBjCT2W0GMJPZbQYwk9ltBjCT2W0GMJPZbQYwk9ltBjCT2W0GMJPZbQYwk9ltBjCT2W0GMJPZbQYwk9ltBjCT2W0GMJPZbQYwk9ltBjCT2W0GMJPZbQYwk9ltBjCT2W0GMJPZbQYwk9ltBjCT2W0GMJPZbQYwk9ltBjCT2W0GMJPZbQYwk9ltBjCT2W0GMJPZbQYwk9ltBjCT2W0GMJPZbQYwk9ltBjCT2W0GMJPZbQYwk9ltBjCT2W0GMJPZbQYwk9ltBjCT2W0GMJPZbQYwk9ltBjCT2W0GMJPZbQYwk9ltBjCT2W0GMJPZbQYwk9ltBjCT2W0GMJPZbQYwk9ltBjCT2W0GMJPZbQYwk9ltBjCT2W0GMJPZbQYwk9ltBjCT2W0GMJPZbQYwk9ltBjCT2W0GMJPZbQYwk9ltBjCT2W0GMJPZbQYwk9ltBjCT2W0GMJPZbQYwk9ltBjCT2W0GMJPZbQYwk9ltBjCT2W0GMJPZbQYwk9ltBjCT2W0GMJPZbQYwk9ltBjCT2W0GMJPZbQYwk9ltBjCT2W0GMJPZbQYwk9ltBjCT2W0GMJPZbQYwk9ltBjCT2W0GMJPZbQYwk9ltBjCT2W0GMJPZbQYwk9ltBjCT2W0GMJPZbQYwk9ltBjCT2W0GMJPZbQYwk9ltBjCT2W0GMJPZbQYwk9ltBjCT2W0GMJPZbQYwk9ltBjCT2W0GMJPZbQYwk9ltBjCT2W0GMJPZbQYwk9ltBjCT2W0GMJPZbQYwk9ltBjCT2W0GMJPZbQYwk9ltBjCT2W0GMJPZbQYwk9ltBjCT2W0GMJPZbQYwk9ltBjCT2W0GMJPZbQYwk9ltBjCT2W0GMJPZbQYwk9ltBjCT2W0GMJPZbQYwk9ltBjCT2W0GMJPZbQYwk9ltBjCT2W0GMJPZbQYwk9ltBjCT2W0GMJPZbQYwk9ltBjCT2W0GMJPZbQYwk9ltBjCT2W0GMJPZbQYwk9ltBjCT2W0GMJPZbQYwk9ltBjCT2W0GMJPZbQYwk9ltBjCT2W0GMJPZbQYwk9ltBjCT2W0GMJPZbQYwk9ltBjCT2W0GMJPZbQYwk9ltBjCT2W0GMJPZbQYwk9ltBjCT2W0GMJPZbQYwk9ltBjCT2W0GMJPZbQYwk9ltBjCT2W0GMJPZbQYwk9ltBjCT2W0GMJPZbQYwk9ltBjCT2W0GMJPZbQYwk9ltBjCT2W0GMJPZbQYwk9ltBjCT2W0GMJPZbQYwk9ltBjCT2W0GMJPZbQYwk9ltBjCT2W0GMJPZbQYwk9ltBjCT2W0GMJPZbQYwk9ltBjCT2W0GMJPZbQYwk9ltBjCT2W0GMJPZbQYwk9ltBjCT2W0GMJPZbQYwk9ltBjCT2W0GMJPZbQYwk9ltBjCT2W0GMJPZbQYwk9ltBjCT2W0GMJPZZ/4TG8hmXgHOixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosYQeS+ixhB5L6LGEHkvosaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rH82+n3HHhPfLwn6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB5L6rGkHkvqsaQeS+qxpB7Lv/AYXsMycA70WFKPJfVYUo8l9VhSjyX1WFKPJfVYUo8l9VhSjyX1WFKPJfVYUo8l9VhSjyX1WFKPJfVYUo8l9VhSjyX1WFKPJfVYUo8l9VhSjyX1WFKPJfVYUo8l9VhSjyX1WFKPJfVYUo8l9VhSjyX1WFKPJfVYUo8l9VhSjyX1WFKPJfVYUo8l9VhSjyX1WFKPJfVYUo8l9VhSjyX1WFKPJfVYUo8l9VhSjyX1WFKPJfVYUo8l9VhSjyX1WFKPJfVYUo8l9VhSjyX1WFKPJfVYUo8l9VhSjyX1WFKPJfVYUo8l9VhSjyX1WFKPJfVYUo8l9VhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRY/u1qeQ68Jz7eE/VYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqPpfRYSo+l9FhKj6X0WEqP5V94DK9hGTgHeiylx1J6LKXHUnospcdSeiylx1J6LKXHUnospcdSeiylx1J6LKXHUnospcdSeiylx1J6LKXHUnospcdSeiylx1J6LKXHUnospcdSeiylx1J6LKXHUnospcdSeiylx1J6LKXHUnospcdSeiylx1J6LKXHUnospcdSeiylx1J6LKXHUnospcdSeiylx1J6LKXHUnospcdSeiylx1J6LKXHUnospcdSeiylx1J6LKXHUnospcdSeiylx1J6LKXHUnospcdSeiylx1J6LKXHUnospcdSeiylx1J6LKXHUnospcdSeiylx1J6LKXHUnosrcfSeiytx9J6LK3H0nosrcfSeiytx9J6LK3H0nosrcfSeiytx9J6LK3H0nosrcfSeiytx9J6LK3H0nosrcfSeiytx9J6LK3H0nosrcfSeiytx9J6LK3H0nosrcfSeiytx9J6LK3H0nosrcfSeiytx9J6LK3H0nosrcfSeiytx9J6LK3H0nosrcfSeiytx9J6LK3H0nosrcfSeiytx9J6LK3H0nosrcfSeiytx9J6LK3H0nosrcfSeiytx9J6LK3H0nosrcfSeiytx9J6LK3H0nosrcfSeiytx9J6LK3H0nosrcfSeiytx9J6LK3H0nosrcfSeiytx/IvcA70WFqPpfVYWo+l9Vhaj6X1WFqPpfVYWo+l9Vhaj6X1WFqPpfVYWo+l9Vhaj6X1WFqPpfVYWo+l9Vhaj6X1WFqPpfVYWo+l9Vhaj6X1WFqPpfVYWo+l9Vhaj6X1WFqPpfVYWo+l9Vhaj6X1WFqPpfVYWo+l9Vhaj6X1WFqPpfVYWo+l9Vhaj6X1WFqPpfVYWo+l9Vhaj6X1WFqPpfVYWo+l9Vhaj6X1WFqPpfVYWo+l9Vhaj6X1WFqPpfVYWo+l9Vhaj6X1WFqPpfVYWo+l9Vhaj6X1WFqPpfVYWo+l9Vhaj+Xf2j0H3hMf74l6LK3H0nosrcfSeiytx9J6LK3H0nosrcfSeiytx9J6LK3H0nosrcfSeiytx9J6LK3H0nosrcfSeiytx9J6LK3H0nosrcfSeiytx9J6LK3H0nosrcfSeiytx9J6LK3H0nosrcfSeiytx9J6LK3H0nosrcfSeiytx9J6LK3H0nosrcfSeiytx9J6LK3H0nosrcfSeiytx9J6LK3H0nosrcfSeiytx9J6LK3H0nosrcfSeiytx9J6LK3H0nosrcfSeiytx9J6LK3H0nosrcfSeiytx9J6LK3H0nosrcfSeiytx9J6LK3H0nosrcfSeiytx9J6LK3H0nosrcfSeiytx9J6LK3H0nosrcfSeiytx9J6LK3H0nosrcfSeiytx9J6LK3H0nosrcfSeiytx9J6LK3H0nosrcfSeiytx9J6LK3H0nosrcfSeiytx9J6LK3H0nosrcfSeiytx9J6LK3H0nosrcfSeiytx9J6LK3H0nosrcfSeiytx9J6LK3H0nosrcfSeiytx9J6LK3H0nosrcfSeiytx9J6LK3H0nosrcfSeiytx9J6LK3H0nosrcfSeiytx9J6LK3H0nosrcfSeiytx9J6LK3H0nosrcfSeiytx9J6LK3H0nosrcfSeiytx9J6LK3H0nosrcfSeiytx9J6LK3H0nosrcfSeiytx9J6LK3H0nosrcfSeiytx9J6LK3H0nosrcfSeiytx9J6LK3H0nosrcfSeiytx9J6LK3H0nosrcfSeiytx9J6LK3H0nosrcfSeiytx9J6LK3H0nosrcfSeiytx9J6LK3H0nosrcfSeiytx9J6LK3H0nosrcfSeiytx9J6LK3H0nosrcfSeiytx9J6LK3H0nosrcfSeiytx9J6LK3H0nosrcfSeiytx9J6LK3H0nosrcfSeiytx9J6LK3H0nosrcfSeiytx9J6LK3H0nosrcfSeiytx9J6LK3H0nosrcfSeiytx9J6LK3H0nosrcfSeiytx9J6LK3H0nosrcfSeiytx9J6LK3H0nosrcfSeiytx9J6LK3H0nosrcfSeiytx9J6LK3H0nosrcfSeiytx9J6LK3H0nosrcfSeiytx9J6LK3H0nosrcfSeiytx9J6LK3H0nosrcfSeiytx9J6LK3H0nosrcfSeiytx9J6LK3H0nosrcfSeiytx9J6LK3H0nosrcfSeiytx9J6LK3H0nosrcfSeiytx9J6LK3H0nosrcfSeiytx9J6LK3H0nosrcfSeiytx9J6LK3H0nosrcfSeiytx9J6LK3H0nosrcfSeiytx9J6LK3H0nosrcfSeiytx9J6LK3H0nosrcfSeiytx9J6LK3H0nosrcfSeiytx9J6LK3H0nosrcfSeiytx9J6LK3H0nosrcfSeiytx9J6LK3H0nosrcfSeiytx9J6LK3H0nosrcfSeiytx9J6LK3H0nosrcfSeiytx9J6LK3H0nosrcfSeiytx9J6LK3H0nosrcfSeiytx9J6LK3H0nosrcfSeiytx9J6LK3H0nosrcfSeiytx9J6LK3H0nosrcfSeiytx9J6LK3H0nosrcfSeiytx9J6LK3H0nosrcfSeiytx9J6LK3H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Oy/ZecnOS3ZesvOSnZfsvGTnJTsv2XnJzkt2XrLzkp2X7Lxk5yU7L9l5yc5Ldl6y85Kdl+y8ZOclOy/ZecnOS3ZesvOSnZfsvGTnJTsv2XnJzkt2XrLzkp2X7Lxk5yU7L9l5yc5Ldl6y85Kdl+y8ZOclOy/ZecnOS3ZesvOSnZfsvGTnJTsv2XnJzkt2XrLzkp2X7Lxk5yU7L9l5yc5Ldl6y85Kdt+y8ZectO2/ZecvOW3besvOWnbfsvGXnLTtv2XnLzlt23rLzlp237Lxl5y07b9l5y85bdt6y85adt+y8ZectO2/ZecvOW3besvOWnbfsvGXnLTtv2XnLzlt23rLzlp237Lxl5y07b9l5y85bdt6y85adt+y8ZectO2/ZecvOW3besvOWnbfsvGXnLTtv2XnLzlt23rLzlp237Lxl5y07b9l5y85bdt6y85adt+y8ZectO2/ZecvOW3besvOWnbfsvGXnLTtv2XnLzlt23rLzlp237Lxl5y07b9l5y85bdt6y85adt+y8ZectO2/Z+cjOR3Y+svORnY/sfGTnIzsf2fnIzkd2PrLzkZ2P7Hxk5yM7H9n5yM5Hdj6y85Gdj+x8ZOcjOx/Z+cjOR3Y+svORnY/sfGTnIzsf2fnIzkd2PrLzkZ2P7Hxk5yM7H9n5yM5Hdj6y85Gdj+x8ZOcjOx/Z+cjOR3Y+svORnY/sfGTnIzsf2fnIzkd2PrLzkZ2P7Hxk5yM7H9n5yM5Hdj6y85Gdj+x8ZOcjOx/Z+cjOR3Y+svORnY/sfGTnIzsf2fnIzkd2PrLzkZ2P7Hxk5yM7H9n5yM5Hdj6y85Gdj+x8ZOcjOx/Z+cjOR3Y+svORnUN2Dtk5ZOeQnUN2Dtk5ZOeQnUN2Dtk5ZOeQnUN2Dtk5ZOeQnUN2Dtk5ZOeQnUN21mNZeiwrZOeQnUN2Dtk5ZOeQnUN2Dtk5ZOeQnUN2Dtk5ZOeQnUN2Dtk5ZOeQnUN2Dtk5ZOeQnUN2Dtk5ZOeQnUN2Dtk5ZOeQnUN2Dtk5ZOeQnUN2Dtk5ZOeQnUN2Dtk5ZOeQnUN2Dtk5ZOeQnUN2Dtk5ZOeQnUN2Dtk5ZOeQnUN2Dtk5ZOeQnUN2Dtk5ZOeQnUN2Dtk5ZOeQnUN2Dtk5ZOeQnUN2Dtk5ZOeQnUN2Dtk5ZOeUnVN2Ttk5ZeeUnVN2Ttk5ZeeUnVN2Ttk5ZeeUnVN2Ttk5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svORnY/sfGTnIzsf2fnIzkd2PrLzkZ2P7Hxk5yM7H9n5yM5Hdj6y85Gdj+x8ZOcjOx/Z+cjOR3Y+svORnY/sfGTnIzsf2fnIzkd2PrLzkZ2P7Hxk5yM7H9n5yM5Hdj6y85Gdj+x8ZOcjOx/Z+cjOR3Y+svORnY/sfGTnIzsf2fnIzkd2PrLzkZ2P7Hxk5yM7H9n5yM5Hdg7ZOWTnkJ1Ddg7ZOWTnkJ1Ddg7ZOWTnkJ1Ddg7ZOWTnkJ1Ddg7ZOWTnkJ1Ddg7ZOWTnkJ1Ddg7ZOWTnkJ1Ddg7ZOWTnkJ1Ddg7ZOWTnkJ1Ddg7ZOWTnkJ1Ddg7ZOWTnkJ1Ddg7ZOWTnkJ1Ddg7ZOWTnkJ1Ddg7ZOWTnkJ1Ddg7ZOWTnkJ1Ddg7ZOWTnkJ1Ddg7ZOWTnkJ1Ddg7ZOWTnkJ1Ddg7ZOWTnkJ1Ddg7ZOWTnkJ1Ddg7ZOWTnkJ1Ddg7ZOWTnkJ1Ddg7ZOWTnkJ1Ddg7ZOWTnkJ1Ddg7ZOWTnkJ1Ddk7ZOWXnlJ1Tdk7ZOWXnlJ1Tdk7ZOWXnlJ1Tdk7ZOWXnlJ1Tdk7ZOWXnlJ1Tdk7ZOWXnlJ1Tdk7ZOWXnlJ1Tdk7ZOWXnlJ1Tdk7ZOWXnlJ1Tdk7ZOWXnlJ1Tdk7ZOWXnlJ1Tdk7ZOWXnlJ1Tdk7ZOWXnlJ1Tdk7ZOWXnlJ1Tdk7ZOWXnlJ1Tdk7ZOWXnlJ1Tdk7ZOWXnlJ1Tdk7ZOWXnlJ1Tdk7ZOWXnlJ1Tdk7ZOWXnlJ1Tdk7ZOWXnlJ1Tdk7ZOWXnlJ1Tdk7ZOWXnlJ1Tdk7ZOWXnlJ1Tdk7ZOWXnlJ1Tdi7ZuWTnkp1Ldi7ZuWTnkp1Ldi7ZuWTnkp1Ldi7ZuWTnkp1Ldi7ZuWTnkp1Ldi7ZuWTnkp1Ldi7ZuWTnkp1Ldi7ZuWTnkp1Ldi7ZuWTnkp1Ldi7ZuWTnkp1Ldi7ZuWTnkp1Ldi7ZuWTnkp1Ldi7ZuWTnkp1Ldi7ZuWTnkp1Ldi7ZuWTnkp1Ldi7ZuWTnkp1Ldi7ZuWTnkp1Ldi7ZuWTnkp1Ldi7ZuWTnkp1Ldi7ZuWTnkp1Ldi7ZuWTnkp1Ldi7ZuWTnkp1Ldi7ZuWTnkp1Ldi7ZuWTnkp1Ldi7ZuWTnkp1Ldm7ZuWXnlp1bdm7ZuWXnlp1bdm7ZuWXnlp1bdm7ZuWXnlp1bdm7ZuWXnlp1bdm7ZuWXnlp1bdm7ZuWXnlp1bdm7ZuWXnlp1bdm7Z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","file_map":{"3":{"source":"use crate::cmp::{Eq, Ord};\nuse crate::convert::From;\nuse crate::runtime::is_unconstrained;\n\nmod check_shuffle;\nmod quicksort;\n\nimpl<T, let N: u32> [T; N] {\n    /// Returns the length of this array.\n    ///\n    /// ```noir\n    /// fn len(self) -> Field\n    /// ```\n    ///\n    /// example\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let array = [42, 42];\n    ///     assert(array.len() == 2);\n    /// }\n    /// ```\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Returns this array as a slice.\n    ///\n    /// ```noir\n    /// let array = [1, 2];\n    /// let slice = array.as_slice();\n    /// assert_eq(slice, &[1, 2]);\n    /// ```\n    #[builtin(as_slice)]\n    pub fn as_slice(self) -> [T] {}\n\n    /// Applies a function to each element of this array, returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.map(|a| a * 2);\n    /// assert_eq(b, [2, 4, 6]);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of this array along with its index,\n    /// returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.mapi(|i, a| i + a * 2);\n    /// assert_eq(b, [2, 5, 8]);\n    /// ```\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(i, self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of this array.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let mut b = [0; 3];\n    /// let mut i = 0;\n    /// a.for_each(|x| {\n    ///     b[i] = x;\n    ///     i += 1;\n    /// });\n    /// assert_eq(a, b);\n    /// ```\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        for i in 0..self.len() {\n            f(self[i]);\n        }\n    }\n\n    /// Applies a function to each element of this array along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let mut b = [0; 3];\n    /// a.for_eachi(|i, x| {\n    ///     b[i] = x;\n    /// });\n    /// assert_eq(a, b);\n    /// ```\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        for i in 0..self.len() {\n            f(i, self[i]);\n        }\n    }\n\n    /// Applies a function to each element of the array, returning the final accumulated value. The first\n    /// parameter is the initial value.\n    ///\n    /// This is a left fold, so the given function will be applied to the accumulator and first element of\n    /// the array, then the second, and so on. For a given call the expected result would be equivalent to:\n    ///\n    /// ```rust\n    /// let a1 = [1];\n    /// let a2 = [1, 2];\n    /// let a3 = [1, 2, 3];\n    ///\n    /// let f = |a, b| a - b;\n    /// a1.fold(10, f); //=> f(10, 1)\n    /// a2.fold(10, f); //=> f(f(10, 1), 2)\n    /// a3.fold(10, f); //=> f(f(f(10, 1), 2), 3)\n    ///\n    /// assert_eq(a3.fold(10, f), 10 - 1 - 2 - 3);\n    /// ```\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    /// Same as fold, but uses the first element as the starting element.\n    ///\n    /// Requires the input array to be non-empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [1, 2, 3, 4];\n    ///     let reduced = arr.reduce(|a, b| a + b);\n    ///     assert(reduced == 10);\n    /// }\n    /// ```\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    /// Returns true if all the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 2];\n    ///     let all = arr.all(|a| a == 2);\n    ///     assert(all);\n    /// }\n    /// ```\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    /// Returns true if any of the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 5];\n    ///     let any = arr.any(|a| a == 5);\n    ///     assert(any);\n    /// }\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n\n    /// Concatenates this array with another array.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr1 = [1, 2, 3, 4];\n    ///     let arr2 = [6, 7, 8, 9, 10, 11];\n    ///     let concatenated_arr = arr1.concat(arr2);\n    ///     assert(concatenated_arr == [1, 2, 3, 4, 6, 7, 8, 9, 10, 11]);\n    /// }\n    /// ```\n    pub fn concat<let M: u32>(self, array2: [T; M]) -> [T; N + M] {\n        let mut result = [crate::mem::zeroed(); N + M];\n        for i in 0..N {\n            result[i] = self[i];\n        }\n        for i in 0..M {\n            result[i + N] = array2[i];\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Ord + Eq,\n{\n    /// Returns a new sorted array. The original array remains untouched. Notice that this function will\n    /// only work for arrays of fields or integers, not for any arbitrary type. This is because the sorting\n    /// logic it uses internally is optimized specifically for these values. If you need a sort function to\n    /// sort any type, you should use the `sort_via` function.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32];\n    ///     let sorted = arr.sort();\n    ///     assert(sorted == [32, 42]);\n    /// }\n    /// ```\n    pub fn sort(self) -> Self {\n        self.sort_via(|a, b| a <= b)\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Eq,\n{\n    /// Returns a new sorted array by sorting it with a custom comparison function.\n    /// The original array remains untouched.\n    /// The ordering function must return true if the first argument should be sorted to be before the second argument or is equal to the second argument.\n    ///\n    /// Using this method with an operator like `<` that does not return `true` for equal values will result in an assertion failure for arrays with equal elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32]\n    ///     let sorted_ascending = arr.sort_via(|a, b| a <= b);\n    ///     assert(sorted_ascending == [32, 42]); // verifies\n    ///\n    ///     let sorted_descending = arr.sort_via(|a, b| a >= b);\n    ///     assert(sorted_descending == [32, 42]); // does not verify\n    /// }\n    /// ```\n    pub fn sort_via<Env>(self, ordering: fn[Env](T, T) -> bool) -> Self {\n        // Safety: `sorted` array is checked to be:\n        // a. a permutation of `input`'s elements\n        // b. satisfying the predicate `ordering`\n        let sorted = unsafe { quicksort::quicksort(self, ordering) };\n\n        if !is_unconstrained() {\n            for i in 0..N - 1 {\n                assert(\n                    ordering(sorted[i], sorted[i + 1]),\n                    \"Array has not been sorted correctly according to `ordering`.\",\n                );\n            }\n            check_shuffle::check_shuffle(self, sorted);\n        }\n        sorted\n    }\n}\n\nimpl<let N: u32> [u8; N] {\n    /// Converts a byte array of type `[u8; N]` to a string. Note that this performs no UTF-8 validation -\n    /// the given array is interpreted as-is as a string.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let hi = [104, 105].as_str_unchecked();\n    ///     assert_eq(hi, \"hi\");\n    /// }\n    /// ```\n    #[builtin(array_as_str_unchecked)]\n    pub fn as_str_unchecked(self) -> str<N> {}\n}\n\nimpl<let N: u32> From<str<N>> for [u8; N] {\n    /// Returns an array of the string bytes.\n    fn from(s: str<N>) -> Self {\n        s.as_bytes()\n    }\n}\n\nmod test {\n    #[test]\n    fn map_empty() {\n        assert_eq([].map(|x| x + 1), []);\n    }\n\n    global arr_with_100_values: [u32; 100] = [\n        42, 123, 87, 93, 48, 80, 50, 5, 104, 84, 70, 47, 119, 66, 71, 121, 3, 29, 42, 118, 2, 54,\n        89, 44, 81, 0, 26, 106, 68, 96, 84, 48, 95, 54, 45, 32, 89, 100, 109, 19, 37, 41, 19, 98,\n        53, 114, 107, 66, 6, 74, 13, 19, 105, 64, 123, 28, 44, 50, 89, 58, 123, 126, 21, 43, 86, 35,\n        21, 62, 82, 0, 108, 120, 72, 72, 62, 80, 12, 71, 70, 86, 116, 73, 38, 15, 127, 81, 30, 8,\n        125, 28, 26, 69, 114, 63, 27, 28, 61, 42, 13, 32,\n    ];\n    global expected_with_100_values: [u32; 100] = [\n        0, 0, 2, 3, 5, 6, 8, 12, 13, 13, 15, 19, 19, 19, 21, 21, 26, 26, 27, 28, 28, 28, 29, 30, 32,\n        32, 35, 37, 38, 41, 42, 42, 42, 43, 44, 44, 45, 47, 48, 48, 50, 50, 53, 54, 54, 58, 61, 62,\n        62, 63, 64, 66, 66, 68, 69, 70, 70, 71, 71, 72, 72, 73, 74, 80, 80, 81, 81, 82, 84, 84, 86,\n        86, 87, 89, 89, 89, 93, 95, 96, 98, 100, 104, 105, 106, 107, 108, 109, 114, 114, 116, 118,\n        119, 120, 121, 123, 123, 123, 125, 126, 127,\n    ];\n    fn sort_u32(a: u32, b: u32) -> bool {\n        a <= b\n    }\n\n    #[test]\n    fn test_sort() {\n        let mut arr: [u32; 7] = [3, 6, 8, 10, 1, 2, 1];\n\n        let sorted = arr.sort();\n\n        let expected: [u32; 7] = [1, 1, 2, 3, 6, 8, 10];\n        assert(sorted == expected);\n    }\n\n    #[test]\n    fn test_sort_100_values() {\n        let mut arr: [u32; 100] = [\n            42, 123, 87, 93, 48, 80, 50, 5, 104, 84, 70, 47, 119, 66, 71, 121, 3, 29, 42, 118, 2,\n            54, 89, 44, 81, 0, 26, 106, 68, 96, 84, 48, 95, 54, 45, 32, 89, 100, 109, 19, 37, 41,\n            19, 98, 53, 114, 107, 66, 6, 74, 13, 19, 105, 64, 123, 28, 44, 50, 89, 58, 123, 126, 21,\n            43, 86, 35, 21, 62, 82, 0, 108, 120, 72, 72, 62, 80, 12, 71, 70, 86, 116, 73, 38, 15,\n            127, 81, 30, 8, 125, 28, 26, 69, 114, 63, 27, 28, 61, 42, 13, 32,\n        ];\n\n        let sorted = arr.sort();\n\n        let expected: [u32; 100] = [\n            0, 0, 2, 3, 5, 6, 8, 12, 13, 13, 15, 19, 19, 19, 21, 21, 26, 26, 27, 28, 28, 28, 29, 30,\n            32, 32, 35, 37, 38, 41, 42, 42, 42, 43, 44, 44, 45, 47, 48, 48, 50, 50, 53, 54, 54, 58,\n            61, 62, 62, 63, 64, 66, 66, 68, 69, 70, 70, 71, 71, 72, 72, 73, 74, 80, 80, 81, 81, 82,\n            84, 84, 86, 86, 87, 89, 89, 89, 93, 95, 96, 98, 100, 104, 105, 106, 107, 108, 109, 114,\n            114, 116, 118, 119, 120, 121, 123, 123, 123, 125, 126, 127,\n        ];\n        assert(sorted == expected);\n    }\n\n    #[test]\n    fn test_sort_100_values_comptime() {\n        let sorted = arr_with_100_values.sort();\n        assert(sorted == expected_with_100_values);\n    }\n\n    #[test]\n    fn test_sort_via() {\n        let mut arr: [u32; 7] = [3, 6, 8, 10, 1, 2, 1];\n\n        let sorted = arr.sort_via(sort_u32);\n\n        let expected: [u32; 7] = [1, 1, 2, 3, 6, 8, 10];\n        assert(sorted == expected);\n    }\n\n    #[test]\n    fn test_sort_via_100_values() {\n        let mut arr: [u32; 100] = [\n            42, 123, 87, 93, 48, 80, 50, 5, 104, 84, 70, 47, 119, 66, 71, 121, 3, 29, 42, 118, 2,\n            54, 89, 44, 81, 0, 26, 106, 68, 96, 84, 48, 95, 54, 45, 32, 89, 100, 109, 19, 37, 41,\n            19, 98, 53, 114, 107, 66, 6, 74, 13, 19, 105, 64, 123, 28, 44, 50, 89, 58, 123, 126, 21,\n            43, 86, 35, 21, 62, 82, 0, 108, 120, 72, 72, 62, 80, 12, 71, 70, 86, 116, 73, 38, 15,\n            127, 81, 30, 8, 125, 28, 26, 69, 114, 63, 27, 28, 61, 42, 13, 32,\n        ];\n\n        let sorted = arr.sort_via(sort_u32);\n\n        let expected: [u32; 100] = [\n            0, 0, 2, 3, 5, 6, 8, 12, 13, 13, 15, 19, 19, 19, 21, 21, 26, 26, 27, 28, 28, 28, 29, 30,\n            32, 32, 35, 37, 38, 41, 42, 42, 42, 43, 44, 44, 45, 47, 48, 48, 50, 50, 53, 54, 54, 58,\n            61, 62, 62, 63, 64, 66, 66, 68, 69, 70, 70, 71, 71, 72, 72, 73, 74, 80, 80, 81, 81, 82,\n            84, 84, 86, 86, 87, 89, 89, 89, 93, 95, 96, 98, 100, 104, 105, 106, 107, 108, 109, 114,\n            114, 116, 118, 119, 120, 121, 123, 123, 123, 125, 126, 127,\n        ];\n        assert(sorted == expected);\n    }\n\n    #[test]\n    fn mapi_empty() {\n        assert_eq([].mapi(|i, x| i * x + 1), []);\n    }\n\n    #[test]\n    fn for_each_empty() {\n        let empty_array: [Field; 0] = [];\n        empty_array.for_each(|_x| assert(false));\n    }\n\n    #[test]\n    fn for_eachi_empty() {\n        let empty_array: [Field; 0] = [];\n        empty_array.for_eachi(|_i, _x| assert(false));\n    }\n\n    #[test]\n    fn map_example() {\n        let a = [1, 2, 3];\n        let b = a.map(|a| a * 2);\n        assert_eq(b, [2, 4, 6]);\n    }\n\n    #[test]\n    fn mapi_example() {\n        let a = [1, 2, 3];\n        let b = a.mapi(|i, a| i + a * 2);\n        assert_eq(b, [2, 5, 8]);\n    }\n\n    #[test]\n    fn for_each_example() {\n        let a = [1, 2, 3];\n        let mut b = [0, 0, 0];\n        let b_ref = &mut b;\n        let mut i = 0;\n        let i_ref = &mut i;\n        a.for_each(|x| {\n            b_ref[*i_ref] = x * 2;\n            *i_ref += 1;\n        });\n        assert_eq(b, [2, 4, 6]);\n        assert_eq(i, 3);\n    }\n\n    #[test]\n    fn for_eachi_example() {\n        let a = [1, 2, 3];\n        let mut b = [0, 0, 0];\n        let b_ref = &mut b;\n        a.for_eachi(|i, a| { b_ref[i] = i + a * 2; });\n        assert_eq(b, [2, 5, 8]);\n    }\n\n    #[test]\n    fn concat() {\n        let arr1 = [1, 2, 3, 4];\n        let arr2 = [6, 7, 8, 9, 10, 11];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1, 2, 3, 4, 6, 7, 8, 9, 10, 11]);\n    }\n\n    #[test]\n    fn concat_zero_length_with_something() {\n        let arr1 = [];\n        let arr2 = [1];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1]);\n    }\n\n    #[test]\n    fn concat_something_with_zero_length() {\n        let arr1 = [1];\n        let arr2 = [];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1]);\n    }\n\n    #[test]\n    fn concat_zero_lengths() {\n        let arr1: [Field; 0] = [];\n        let arr2: [Field; 0] = [];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, []);\n    }\n}\n","path":"std/array/mod.nr"},"5":{"source":"use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n","path":"std/cmp.nr"},"6":{"source":"use crate::{cmp::Eq, convert::From, runtime::is_unconstrained, static_assert};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n///\n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n///\n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n///\n/// Example:\n///\n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a\n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    ///\n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    ///\n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    ///\n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure.\n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    ///\n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    ///\n    /// Panics if the new length of the vector will be greater than the max length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    ///\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    ///\n    /// v.push(100);\n    /// assert(v.len() == 1);\n    ///\n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    ///\n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    ///\n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    ///\n    /// Note that uninitialized elements may be zeroed out!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    ///\n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    ///\n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    ///\n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        if is_unconstrained() {\n            for i in 0..append_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        } else {\n            let mut exceeded_len = false;\n            for i in 0..Len {\n                exceeded_len |= i == append_len;\n                if !exceeded_len {\n                    self.storage[self.len + i] = vec.get_unchecked(i);\n                }\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input.\n    /// The maximum length of the vector is determined based on the type signature.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        static_assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    ///\n    /// Panics if the vector is empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// let two = v.pop();\n    /// let one = v.pop();\n    ///\n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    ///\n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        if is_unconstrained() {\n            for i in 0..self.len {\n                ret |= predicate(self.storage[i]);\n            }\n        } else {\n            let mut ret = false;\n            let mut exceeded_len = false;\n            for i in 0..MaxLen {\n                exceeded_len |= i == self.len;\n                if !exceeded_len {\n                    ret |= predicate(self.storage[i]);\n                }\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element\n    /// in this vector, along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.mapi(|i, value| i + value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 5, 8, 11]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(i, self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(i, self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Calls a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let mut result = BoundedVec::<u32, 4>::new();\n    /// vec.for_each(|value| result.push(value * 2));\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    f(self.get_unchecked(i));\n                }\n            }\n        }\n    }\n\n    /// Calls a closure on each element in this vector, along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let mut result = BoundedVec::<u32, 4>::new();\n    /// vec.for_eachi(|i, value| result.push(i + value * 2));\n    ///\n    /// let expected = BoundedVec::from_array([2, 5, 8, 11]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                f(i, self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    f(i, self.get_unchecked(i));\n                }\n            }\n        }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function will zero out any elements at or past index `len` of `array`.\n    /// This incurs an extra runtime cost of O(MaxLen). If you are sure your array is\n    /// zeroed after that index, you can use `from_parts_unchecked` to remove the extra loop.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    /// ```\n    pub fn from_parts(mut array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        let zeroed = crate::mem::zeroed();\n\n        if is_unconstrained() {\n            for i in len..MaxLen {\n                array[i] = zeroed;\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i >= len {\n                    array[i] = zeroed;\n                }\n            }\n        }\n\n        BoundedVec { storage: array, len }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function is unsafe because it expects all elements past the `len` index\n    /// of `array` to be zeroed, but does not check for this internally. Use `from_parts`\n    /// for a safe version of this function which does zero out any indices past the\n    /// given length. Invalidating this assumption can notably cause `BoundedVec::eq`\n    /// to give incorrect results since it will check even elements past `len`.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    ///\n    /// // invalid use!\n    /// let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n    /// let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n    ///\n    /// // both vecs have length 3 so we'd expect them to be equal, but this\n    /// // fails because elements past the length are still checked in eq\n    /// assert_eq(vec1, vec2); // fails\n    /// ```\n    pub fn from_parts_unchecked(array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        BoundedVec { storage: array, len }\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n        if self.len == other.len {\n            self.storage == other.storage\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod mapi {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-mapi-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.mapi(|i, value| i + value * 2);\n            // docs:end:bounded-vec-mapi-example\n            let expected = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.mapi(|i, value| (i + value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.mapi(|_, value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod for_each {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        // map in terms of for_each\n        fn for_each_map<T, U, Env, let MaxLen: u32>(\n            input: BoundedVec<T, MaxLen>,\n            f: fn[Env](T) -> U,\n        ) -> BoundedVec<U, MaxLen> {\n            let mut output = BoundedVec::<U, MaxLen>::new();\n            let output_ref = &mut output;\n            input.for_each(|x| output_ref.push(f(x)));\n            output\n        }\n\n        #[test]\n        fn smoke_test() {\n            let mut acc = 0;\n            let acc_ref = &mut acc;\n            // docs:start:bounded-vec-for-each-example\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            vec.for_each(|value| { *acc_ref += value; });\n            // docs:end:bounded-vec-for-each-example\n            assert_eq(acc, 6);\n        }\n\n        #[test]\n        fn applies_function_correctly() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_each_map(vec, |value| value * 2);\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_each_map(vec, |value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = for_each_map(vec, |value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod for_eachi {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        // mapi in terms of for_eachi\n        fn for_eachi_mapi<T, U, Env, let MaxLen: u32>(\n            input: BoundedVec<T, MaxLen>,\n            f: fn[Env](u32, T) -> U,\n        ) -> BoundedVec<U, MaxLen> {\n            let mut output = BoundedVec::<U, MaxLen>::new();\n            let output_ref = &mut output;\n            input.for_eachi(|i, x| output_ref.push(f(i, x)));\n            output\n        }\n\n        #[test]\n        fn smoke_test() {\n            let mut acc = 0;\n            let acc_ref = &mut acc;\n            // docs:start:bounded-vec-for-eachi-example\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            vec.for_eachi(|i, value| { *acc_ref += i * value; });\n            // docs:end:bounded-vec-for-eachi-example\n\n            // 0 * 1 + 1 * 2 + 2 * 3\n            assert_eq(acc, 8);\n        }\n\n        #[test]\n        fn applies_function_correctly() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_eachi_mapi(vec, |i, value| i + value * 2);\n            let expected = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_eachi_mapi(vec, |i, value| (i + value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = for_eachi_mapi(vec, |_, value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n            assert_eq(bounded_vec.get(2), 3);\n        }\n\n        #[test(should_fail_with = \"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n        use crate::convert::From;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n\n    mod from_parts {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn from_parts() {\n            // docs:start:from-parts\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // Any elements past the given length are zeroed out, so these\n            // two BoundedVecs will be completely equal\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 2], 3);\n            assert_eq(vec1, vec2);\n            // docs:end:from-parts\n        }\n\n        #[test]\n        fn from_parts_unchecked() {\n            // docs:start:from-parts-unchecked\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // invalid use!\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n\n            // both vecs have length 3 so we'd expect them to be equal, but this\n            // fails because elements past the length are still checked in eq\n            assert(vec1 != vec2);\n            // docs:end:from-parts-unchecked\n        }\n    }\n}\n","path":"std/collections/bounded_vec.nr"},"12":{"source":"// docs:start:from-trait\npub trait From<T> {\n    fn from(input: T) -> Self;\n}\n// docs:end:from-trait\n\nimpl<T> From<T> for T {\n    fn from(input: T) -> T {\n        input\n    }\n}\n\n// docs:start:into-trait\npub trait Into<T> {\n    fn into(self) -> T;\n}\n\nimpl<T, U> Into<T> for U\nwhere\n    T: From<U>,\n{\n    fn into(self) -> T {\n        T::from(self)\n    }\n}\n// docs:end:into-trait\n\n// docs:start:from-impls\n// Unsigned integers\n\nimpl From<u8> for u32 {\n    fn from(value: u8) -> u32 {\n        value as u32\n    }\n}\n\nimpl From<u8> for u64 {\n    fn from(value: u8) -> u64 {\n        value as u64\n    }\n}\nimpl From<u32> for u64 {\n    fn from(value: u32) -> u64 {\n        value as u64\n    }\n}\n\nimpl From<u8> for u128 {\n    fn from(value: u8) -> u128 {\n        value as u128\n    }\n}\nimpl From<u32> for u128 {\n    fn from(value: u32) -> u128 {\n        value as u128\n    }\n}\nimpl From<u64> for u128 {\n    fn from(value: u64) -> u128 {\n        value as u128\n    }\n}\n\nimpl From<u8> for Field {\n    fn from(value: u8) -> Field {\n        value as Field\n    }\n}\nimpl From<u32> for Field {\n    fn from(value: u32) -> Field {\n        value as Field\n    }\n}\nimpl From<u64> for Field {\n    fn from(value: u64) -> Field {\n        value as Field\n    }\n}\n\nimpl From<u128> for Field {\n    fn from(value: u128) -> Field {\n        value as Field\n    }\n}\n\n// Signed integers\n\nimpl From<i8> for i32 {\n    fn from(value: i8) -> i32 {\n        value as i32\n    }\n}\n\nimpl From<i8> for i64 {\n    fn from(value: i8) -> i64 {\n        value as i64\n    }\n}\nimpl From<i32> for i64 {\n    fn from(value: i32) -> i64 {\n        value as i64\n    }\n}\n\n// Booleans\nimpl From<bool> for u8 {\n    fn from(value: bool) -> u8 {\n        value as u8\n    }\n}\nimpl From<bool> for u32 {\n    fn from(value: bool) -> u32 {\n        value as u32\n    }\n}\nimpl From<bool> for u64 {\n    fn from(value: bool) -> u64 {\n        value as u64\n    }\n}\nimpl From<bool> for i8 {\n    fn from(value: bool) -> i8 {\n        value as i8\n    }\n}\nimpl From<bool> for i32 {\n    fn from(value: bool) -> i32 {\n        value as i32\n    }\n}\nimpl From<bool> for i64 {\n    fn from(value: bool) -> i64 {\n        value as i64\n    }\n}\nimpl From<bool> for Field {\n    fn from(value: bool) -> Field {\n        value as Field\n    }\n}\n// docs:end:from-impls\n\n/// A generic interface for casting between primitive types,\n/// equivalent of using the `as` keyword between values.\n///\n/// # Example\n///\n/// ```\n/// let x: Field = 1234567890;\n/// let y: u8 = x as u8;\n/// let z: u8 = x.as_();\n/// assert_eq(y, z);\n/// ```\npub trait AsPrimitive<T> {\n    /// The equivalent of doing `self as T`.\n    fn as_(self) -> T;\n}\n\n#[generate_as_primitive_impls]\ncomptime fn generate_as_primitive_impls(_: FunctionDefinition) -> Quoted {\n    let types = [\n        quote { bool },\n        quote { u8 },\n        quote { u16 },\n        quote { u32 },\n        quote { u64 },\n        quote { u128 },\n        quote { i8 },\n        quote { i16 },\n        quote { i32 },\n        quote { i64 },\n        quote { Field },\n    ];\n\n    let mut impls = &[];\n    for type1 in types {\n        for type2 in types {\n            impls = impls.push_back(\n                quote {\n                impl AsPrimitive<$type1> for $type2 {\n                    fn as_(self) -> $type1 {\n                        self as $type1\n                    }\n                }\n            },\n            );\n        }\n    }\n    impls.join(quote {})\n}\n","path":"std/convert.nr"},"17":{"source":"use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 128 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low = (x as u128) as Field;\n    let high = (x - low) / TWO_POW_128;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    // Safety: borrow is enforced to be boolean due to its type.\n    // if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    // if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        // Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            // Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        // Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n","path":"std/field/bn254.nr"},"18":{"source":"pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        __assert_max_bit_size(self, BIT_SIZE);\n    }\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = __to_le_bits(self);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = __to_be_bits(self);\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        __to_le_radix(self, radix)\n    }\n\n    fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        __to_be_radix(self, radix)\n    }\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(apply_range_constraint)]\nfn __assert_max_bit_size(value: Field, bit_size: u32) {}\n\n// `_radix` must be less than 256\n#[builtin(to_le_radix)]\nfn __to_le_radix<let N: u32>(value: Field, radix: u32) -> [u8; N] {}\n\n// `_radix` must be less than 256\n#[builtin(to_be_radix)]\nfn __to_be_radix<let N: u32>(value: Field, radix: u32) -> [u8; N] {}\n\n/// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n/// This slice will be zero padded should not all bits be necessary to represent `self`.\n///\n/// # Failures\n/// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n/// be able to represent the original `Field`.\n///\n/// # Safety\n/// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n/// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n/// wrap around due to overflow when verifying the decomposition.\n#[builtin(to_le_bits)]\nfn __to_le_bits<let N: u32>(value: Field) -> [u1; N] {}\n\n/// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n/// This array will be zero padded should not all bits be necessary to represent `self`.\n///\n/// # Failures\n/// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n/// be able to represent the original `Field`.\n///\n/// # Safety\n/// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n/// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n/// wrap around due to overflow when verifying the decomposition.\n#[builtin(to_be_bits)]\nfn __to_be_bits<let N: u32>(value: Field) -> [u1; N] {}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n","path":"std/field/mod.nr"},"19":{"source":"// Exposed only for usage in `std::meta`\npub(crate) mod poseidon2;\n\nuse crate::default::Default;\nuse crate::embedded_curve_ops::{\n    EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_array_return,\n};\nuse crate::meta::derive_via;\n\n#[foreign(sha256_compression)]\n// docs:start:sha256_compression\npub fn sha256_compression(input: [u32; 16], state: [u32; 8]) -> [u32; 8] {}\n// docs:end:sha256_compression\n\n#[foreign(keccakf1600)]\n// docs:start:keccakf1600\npub fn keccakf1600(input: [u64; 25]) -> [u64; 25] {}\n// docs:end:keccakf1600\n\npub mod keccak {\n    #[deprecated(\"This function has been moved to std::hash::keccakf1600\")]\n    pub fn keccakf1600(input: [u64; 25]) -> [u64; 25] {\n        super::keccakf1600(input)\n    }\n}\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[inline_always]\npub fn pedersen_commitment_with_separator<let N: u32>(\n    input: [Field; N],\n    separator: u32,\n) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[no_predicates]\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: [EmbeddedCurveScalar; N + 1] = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N + 1];\n    let mut generators: [EmbeddedCurvePoint; N + 1] =\n        [EmbeddedCurvePoint::point_at_infinity(); N + 1];\n    let domain_generators: [EmbeddedCurvePoint; N] =\n        derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n\n    for i in 0..N {\n        scalars[i] = from_field_unsafe(input[i]);\n        generators[i] = domain_generators[i];\n    }\n    scalars[N] = EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field };\n\n    let length_generator: [EmbeddedCurvePoint; 1] =\n        derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    generators[N] = length_generator[0];\n    multi_scalar_mul_array_return(generators, scalars)[0].x\n}\n\n#[field(bn254)]\n#[inline_always]\npub fn derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n// Same as from_field but:\n// does not assert the limbs are 128 bits\n// does not assert the decomposition does not overflow the EmbeddedCurveScalar\nfn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    // Safety: xlo and xhi decomposition is checked below\n    let (xlo, xhi) = unsafe { crate::field::bn254::decompose_hint(scalar) };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: TypeDefinition) -> Quoted {\n    let name = quote { Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(\n        s,\n        name,\n        signature,\n        for_each_field,\n        quote {},\n        |fields| fields,\n    )\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher<H>\nwhere\n    H: Hasher,\n{\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u128 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H)\n    where\n        H: Hasher,\n    {}\n}\n\nimpl<T, let N: u32> Hash for [T; N]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B)\nwhere\n    A: Hash,\n    B: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n    E: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1),\n        0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1),\n        EmbeddedCurvePoint {\n            x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n            y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n            is_infinite: false,\n        },\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2),\n        0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2),\n        EmbeddedCurvePoint {\n            x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n            y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3),\n        0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3),\n        EmbeddedCurvePoint {\n            x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n            y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4),\n        0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4),\n        EmbeddedCurvePoint {\n            x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n            y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5),\n        0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5),\n        EmbeddedCurvePoint {\n            x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n            y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6),\n        0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6),\n        EmbeddedCurvePoint {\n            x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n            y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        EmbeddedCurvePoint {\n            x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n            y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        EmbeddedCurvePoint {\n            x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n            y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        EmbeddedCurvePoint {\n            x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n            y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        EmbeddedCurvePoint {\n            x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n            y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n            is_infinite: false,\n        },\n    );\n}\n","path":"std/hash/mod.nr"},"20":{"source":"use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub(crate) struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub(crate) fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub(crate) struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n","path":"std/hash/poseidon2.nr"},"39":{"source":"use crate::convert::AsPrimitive;\n\n// docs:start:add-trait\npub trait Add {\n    fn add(self, other: Self) -> Self;\n}\n// docs:end:add-trait\n\nimpl Add for Field {\n    fn add(self, other: Field) -> Field {\n        self + other\n    }\n}\n\nimpl Add for u128 {\n    fn add(self, other: u128) -> u128 {\n        self + other\n    }\n}\nimpl Add for u64 {\n    fn add(self, other: u64) -> u64 {\n        self + other\n    }\n}\nimpl Add for u32 {\n    fn add(self, other: u32) -> u32 {\n        self + other\n    }\n}\nimpl Add for u16 {\n    fn add(self, other: u16) -> u16 {\n        self + other\n    }\n}\nimpl Add for u8 {\n    fn add(self, other: u8) -> u8 {\n        self + other\n    }\n}\nimpl Add for u1 {\n    fn add(self, other: u1) -> u1 {\n        self + other\n    }\n}\n\nimpl Add for i8 {\n    fn add(self, other: i8) -> i8 {\n        self + other\n    }\n}\nimpl Add for i16 {\n    fn add(self, other: i16) -> i16 {\n        self + other\n    }\n}\nimpl Add for i32 {\n    fn add(self, other: i32) -> i32 {\n        self + other\n    }\n}\nimpl Add for i64 {\n    fn add(self, other: i64) -> i64 {\n        self + other\n    }\n}\n\n// docs:start:sub-trait\npub trait Sub {\n    fn sub(self, other: Self) -> Self;\n}\n// docs:end:sub-trait\n\nimpl Sub for Field {\n    fn sub(self, other: Field) -> Field {\n        self - other\n    }\n}\n\nimpl Sub for u128 {\n    fn sub(self, other: u128) -> u128 {\n        self - other\n    }\n}\nimpl Sub for u64 {\n    fn sub(self, other: u64) -> u64 {\n        self - other\n    }\n}\nimpl Sub for u32 {\n    fn sub(self, other: u32) -> u32 {\n        self - other\n    }\n}\nimpl Sub for u16 {\n    fn sub(self, other: u16) -> u16 {\n        self - other\n    }\n}\nimpl Sub for u8 {\n    fn sub(self, other: u8) -> u8 {\n        self - other\n    }\n}\nimpl Sub for u1 {\n    fn sub(self, other: u1) -> u1 {\n        self - other\n    }\n}\n\nimpl Sub for i8 {\n    fn sub(self, other: i8) -> i8 {\n        self - other\n    }\n}\nimpl Sub for i16 {\n    fn sub(self, other: i16) -> i16 {\n        self - other\n    }\n}\nimpl Sub for i32 {\n    fn sub(self, other: i32) -> i32 {\n        self - other\n    }\n}\nimpl Sub for i64 {\n    fn sub(self, other: i64) -> i64 {\n        self - other\n    }\n}\n\n// docs:start:mul-trait\npub trait Mul {\n    fn mul(self, other: Self) -> Self;\n}\n// docs:end:mul-trait\n\nimpl Mul for Field {\n    fn mul(self, other: Field) -> Field {\n        self * other\n    }\n}\n\nimpl Mul for u128 {\n    fn mul(self, other: u128) -> u128 {\n        self * other\n    }\n}\nimpl Mul for u64 {\n    fn mul(self, other: u64) -> u64 {\n        self * other\n    }\n}\nimpl Mul for u32 {\n    fn mul(self, other: u32) -> u32 {\n        self * other\n    }\n}\nimpl Mul for u16 {\n    fn mul(self, other: u16) -> u16 {\n        self * other\n    }\n}\nimpl Mul for u8 {\n    fn mul(self, other: u8) -> u8 {\n        self * other\n    }\n}\nimpl Mul for u1 {\n    fn mul(self, other: u1) -> u1 {\n        self * other\n    }\n}\n\nimpl Mul for i8 {\n    fn mul(self, other: i8) -> i8 {\n        self * other\n    }\n}\nimpl Mul for i16 {\n    fn mul(self, other: i16) -> i16 {\n        self * other\n    }\n}\nimpl Mul for i32 {\n    fn mul(self, other: i32) -> i32 {\n        self * other\n    }\n}\nimpl Mul for i64 {\n    fn mul(self, other: i64) -> i64 {\n        self * other\n    }\n}\n\n// docs:start:div-trait\npub trait Div {\n    fn div(self, other: Self) -> Self;\n}\n// docs:end:div-trait\n\nimpl Div for Field {\n    fn div(self, other: Field) -> Field {\n        self / other\n    }\n}\n\nimpl Div for u128 {\n    fn div(self, other: u128) -> u128 {\n        self / other\n    }\n}\nimpl Div for u64 {\n    fn div(self, other: u64) -> u64 {\n        self / other\n    }\n}\nimpl Div for u32 {\n    fn div(self, other: u32) -> u32 {\n        self / other\n    }\n}\nimpl Div for u16 {\n    fn div(self, other: u16) -> u16 {\n        self / other\n    }\n}\nimpl Div for u8 {\n    fn div(self, other: u8) -> u8 {\n        self / other\n    }\n}\nimpl Div for u1 {\n    fn div(self, other: u1) -> u1 {\n        self / other\n    }\n}\n\nimpl Div for i8 {\n    fn div(self, other: i8) -> i8 {\n        self / other\n    }\n}\nimpl Div for i16 {\n    fn div(self, other: i16) -> i16 {\n        self / other\n    }\n}\nimpl Div for i32 {\n    fn div(self, other: i32) -> i32 {\n        self / other\n    }\n}\nimpl Div for i64 {\n    fn div(self, other: i64) -> i64 {\n        self / other\n    }\n}\n\n// docs:start:rem-trait\npub trait Rem {\n    fn rem(self, other: Self) -> Self;\n}\n// docs:end:rem-trait\n\nimpl Rem for u128 {\n    fn rem(self, other: u128) -> u128 {\n        self % other\n    }\n}\nimpl Rem for u64 {\n    fn rem(self, other: u64) -> u64 {\n        self % other\n    }\n}\nimpl Rem for u32 {\n    fn rem(self, other: u32) -> u32 {\n        self % other\n    }\n}\nimpl Rem for u16 {\n    fn rem(self, other: u16) -> u16 {\n        self % other\n    }\n}\nimpl Rem for u8 {\n    fn rem(self, other: u8) -> u8 {\n        self % other\n    }\n}\nimpl Rem for u1 {\n    fn rem(self, other: u1) -> u1 {\n        self % other\n    }\n}\n\nimpl Rem for i8 {\n    fn rem(self, other: i8) -> i8 {\n        self % other\n    }\n}\nimpl Rem for i16 {\n    fn rem(self, other: i16) -> i16 {\n        self % other\n    }\n}\nimpl Rem for i32 {\n    fn rem(self, other: i32) -> i32 {\n        self % other\n    }\n}\nimpl Rem for i64 {\n    fn rem(self, other: i64) -> i64 {\n        self % other\n    }\n}\n\n// docs:start:neg-trait\npub trait Neg {\n    fn neg(self) -> Self;\n}\n// docs:end:neg-trait\n\n// docs:start:neg-trait-impls\nimpl Neg for Field {\n    fn neg(self) -> Field {\n        -self\n    }\n}\n\nimpl Neg for i8 {\n    fn neg(self) -> i8 {\n        -self\n    }\n}\nimpl Neg for i16 {\n    fn neg(self) -> i16 {\n        -self\n    }\n}\nimpl Neg for i32 {\n    fn neg(self) -> i32 {\n        -self\n    }\n}\nimpl Neg for i64 {\n    fn neg(self) -> i64 {\n        -self\n    }\n}\n// docs:end:neg-trait-impls\n\n// docs:start:wrapping-add-trait\npub trait WrappingAdd {\n    fn wrapping_add(self, y: Self) -> Self;\n}\n// docs:end:wrapping-add-trait\n\nimpl WrappingAdd for u1 {\n    fn wrapping_add(self: u1, y: u1) -> u1 {\n        self ^ y\n    }\n}\n\nimpl WrappingAdd for u8 {\n    fn wrapping_add(self: u8, y: u8) -> u8 {\n        wrapping_add_hlp(self, y)\n    }\n}\n\nimpl WrappingAdd for u16 {\n    fn wrapping_add(self: u16, y: u16) -> u16 {\n        wrapping_add_hlp(self, y)\n    }\n}\n\nimpl WrappingAdd for u32 {\n    fn wrapping_add(self: u32, y: u32) -> u32 {\n        wrapping_add_hlp(self, y)\n    }\n}\n\nimpl WrappingAdd for u64 {\n    fn wrapping_add(self: u64, y: u64) -> u64 {\n        wrapping_add_hlp(self, y)\n    }\n}\n\nimpl WrappingAdd for u128 {\n    fn wrapping_add(self: u128, y: u128) -> u128 {\n        wrapping_add_hlp(self, y)\n    }\n}\n\nimpl WrappingAdd for i8 {\n    fn wrapping_add(self: i8, y: i8) -> i8 {\n        wrapping_add_hlp(self, y)\n    }\n}\n\nimpl WrappingAdd for i16 {\n    fn wrapping_add(self: i16, y: i16) -> i16 {\n        wrapping_add_hlp(self, y)\n    }\n}\n\nimpl WrappingAdd for i32 {\n    fn wrapping_add(self: i32, y: i32) -> i32 {\n        wrapping_add_hlp(self, y)\n    }\n}\n\nimpl WrappingAdd for i64 {\n    fn wrapping_add(self: i64, y: i64) -> i64 {\n        wrapping_add_hlp(self, y)\n    }\n}\nimpl WrappingAdd for Field {\n    fn wrapping_add(self: Field, y: Field) -> Field {\n        self + y\n    }\n}\n\n// docs:start:wrapping-sub-trait\npub trait WrappingSub {\n    fn wrapping_sub(self, y: Self) -> Self;\n}\n// docs:start:wrapping-sub-trait\n\nimpl WrappingSub for u1 {\n    fn wrapping_sub(self: u1, y: u1) -> u1 {\n        self ^ y\n    }\n}\n\nimpl WrappingSub for u8 {\n    fn wrapping_sub(self: u8, y: u8) -> u8 {\n        wrapping_sub_hlp(self, y) as u8\n    }\n}\n\nimpl WrappingSub for u16 {\n    fn wrapping_sub(self: u16, y: u16) -> u16 {\n        wrapping_sub_hlp(self, y) as u16\n    }\n}\n\nimpl WrappingSub for u32 {\n    fn wrapping_sub(self: u32, y: u32) -> u32 {\n        wrapping_sub_hlp(self, y) as u32\n    }\n}\nimpl WrappingSub for u64 {\n    fn wrapping_sub(self: u64, y: u64) -> u64 {\n        wrapping_sub_hlp(self, y) as u64\n    }\n}\nimpl WrappingSub for u128 {\n    fn wrapping_sub(self: u128, y: u128) -> u128 {\n        wrapping_sub_hlp(self, y) as u128\n    }\n}\n\nimpl WrappingSub for i8 {\n    fn wrapping_sub(self: i8, y: i8) -> i8 {\n        wrapping_sub_hlp(self, y) as i8\n    }\n}\n\nimpl WrappingSub for i16 {\n    fn wrapping_sub(self: i16, y: i16) -> i16 {\n        wrapping_sub_hlp(self, y) as i16\n    }\n}\n\nimpl WrappingSub for i32 {\n    fn wrapping_sub(self: i32, y: i32) -> i32 {\n        wrapping_sub_hlp(self, y) as i32\n    }\n}\nimpl WrappingSub for i64 {\n    fn wrapping_sub(self: i64, y: i64) -> i64 {\n        wrapping_sub_hlp(self, y) as i64\n    }\n}\nimpl WrappingSub for Field {\n    fn wrapping_sub(self: Field, y: Field) -> Field {\n        self - y\n    }\n}\n\n// docs:start:wrapping-mul-trait\npub trait WrappingMul {\n    fn wrapping_mul(self, y: Self) -> Self;\n}\n// docs:start:wrapping-mul-trait\n\nimpl WrappingMul for u1 {\n    fn wrapping_mul(self: u1, y: u1) -> u1 {\n        self & y\n    }\n}\n\nimpl WrappingMul for u8 {\n    fn wrapping_mul(self: u8, y: u8) -> u8 {\n        wrapping_mul_hlp(self, y)\n    }\n}\n\nimpl WrappingMul for u16 {\n    fn wrapping_mul(self: u16, y: u16) -> u16 {\n        wrapping_mul_hlp(self, y)\n    }\n}\n\nimpl WrappingMul for u32 {\n    fn wrapping_mul(self: u32, y: u32) -> u32 {\n        wrapping_mul_hlp(self, y)\n    }\n}\nimpl WrappingMul for u64 {\n    fn wrapping_mul(self: u64, y: u64) -> u64 {\n        wrapping_mul_hlp(self, y)\n    }\n}\n\nimpl WrappingMul for i8 {\n    fn wrapping_mul(self: i8, y: i8) -> i8 {\n        wrapping_mul_hlp(self, y)\n    }\n}\n\nimpl WrappingMul for i16 {\n    fn wrapping_mul(self: i16, y: i16) -> i16 {\n        wrapping_mul_hlp(self, y)\n    }\n}\n\nimpl WrappingMul for i32 {\n    fn wrapping_mul(self: i32, y: i32) -> i32 {\n        wrapping_mul_hlp(self, y)\n    }\n}\n\nimpl WrappingMul for i64 {\n    fn wrapping_mul(self: i64, y: i64) -> i64 {\n        wrapping_mul_hlp(self, y)\n    }\n}\n\nimpl WrappingMul for u128 {\n    fn wrapping_mul(self: u128, y: u128) -> u128 {\n        wrapping_mul128_hlp(self, y)\n    }\n}\nimpl WrappingMul for Field {\n    fn wrapping_mul(self: Field, y: Field) -> Field {\n        self * y\n    }\n}\n\nfn wrapping_add_hlp<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n\nfn wrapping_sub_hlp<T>(x: T, y: T) -> Field\nwhere\n    T: AsPrimitive<Field>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    x.as_() + 340282366920938463463374607431768211456 - y.as_()\n}\n\nfn wrapping_mul_hlp<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\nglobal two_pow_64: u128 = 0x10000000000000000;\n/// Splits a 128 bits number into two 64 bits limbs\nunconstrained fn split64(x: u128) -> (u64, u64) {\n    let lo = x as u64;\n    let hi = (x / two_pow_64) as u64;\n    (lo, hi)\n}\n\n/// Split a 128 bits number into two 64 bits limbs\n/// It will fail if the number is more than 128 bits\nfn split_into_64_bit_limbs(x: u128) -> (u64, u64) {\n    // Safety: the limbs are constrained below\n    let (x_lo, x_hi) = unsafe { split64(x) };\n    assert(x as Field == x_lo as Field + x_hi as Field * two_pow_64 as Field);\n    (x_lo, x_hi)\n}\n\n#[field(bn254)]\nfn wrapping_mul128_hlp(x: u128, y: u128) -> u128 {\n    let (x_lo, x_hi) = split_into_64_bit_limbs(x);\n    let (y_lo, y_hi) = split_into_64_bit_limbs(y);\n    // Multiplication using the limbs:(x_lo + 2**64*x_hi)*(y_lo + 2**64*y_hi)=x_lo*y_lo+...\n    // and skipping the terms over 2**128\n    // Working with u64 limbs ensures that we cannot overflow the field modulus.\n    let low = x_lo as Field * y_lo as Field;\n    let lo = low as u64 as Field;\n    let carry = (low - lo) / two_pow_64 as Field;\n    let high = x_lo as Field * y_hi as Field + x_hi as Field * y_lo as Field + carry;\n    let hi = high as u64 as Field;\n    (lo + two_pow_64 as Field * hi) as u128\n}\n","path":"std/ops/arith.nr"},"50":{"source":"use airdrop::constants::{\n    MAX_OWNERSHIP_JSON_LEN, MAX_OWNERSHIP_RECORD_LEN, NODE_ID_LEN, OWNERSHIP_JSON_LEN,\n};\nuse airdrop::utils::{\n    check_encrypted_json_ownership, decrypt_record, encrypt_record, encrypt_substring,\n    get_proxy_pubkeys, JsonSlice, str_to_bounded_vec, verify_proxy_sig,\n};\nuse json_parser::{JSON, JSON512b};\n\npub struct SignaturePayload {\n    pub encrypted_record: BoundedVec<u8, MAX_OWNERSHIP_RECORD_LEN>,\n    pub encrypted_record_signed: [u8; 64],\n    pub proxy_pubkey_x: [u8; 32],\n    pub proxy_pubkey_y: [u8; 32],\n}\n\npub struct AirdropPayload {\n    pub node_id: str<NODE_ID_LEN>,\n    pub graphql_response: JsonSlice<MAX_OWNERSHIP_JSON_LEN>,\n}\n\nimpl SignaturePayload {\n    pub fn verify_proxy_sig(self) {\n        verify_proxy_sig(\n            self.encrypted_record,\n            self.proxy_pubkey_x,\n            self.proxy_pubkey_y,\n            self.encrypted_record_signed,\n        );\n    }\n}\n\nimpl AirdropPayload {\n    pub fn check_ownership(self) {\n        check_ownership(self.graphql_response.json, self.node_id);\n    }\n}\n\nfn main(\n    mut key: [u32; 8],\n    ctr: u32,\n    mut nonce: [u32; 3],\n    signature_payload: pub SignaturePayload,\n    airdrop_payload: pub AirdropPayload,\n) {\n    // 1. Verify encrypted_record comes from the trusted proxy.\n    signature_payload.verify_proxy_sig();\n\n    // 2. Encrypt the substring of the GraphQL response on the specific keystream offset (start of the JSON in the full encrypted record).\n    let encrypted_subtring: BoundedVec<u8, MAX_OWNERSHIP_JSON_LEN> = encrypt_substring(\n        key,\n        ctr,\n        nonce,\n        airdrop_payload.graphql_response.json,\n        airdrop_payload.graphql_response.start,\n    );\n\n    // 3. Check whether the encrypted substring (JSON) is present in the full encrypted record.\n    check_encrypted_json_ownership(\n        signature_payload.encrypted_record,\n        encrypted_subtring,\n        airdrop_payload.graphql_response.start,\n    );\n\n    // 4. Check for the node id in the GraphQL response.\n    airdrop_payload.check_ownership();\n}\n\nfn check_ownership(json_str: str<MAX_OWNERSHIP_JSON_LEN>, expected_node_id: str<NODE_ID_LEN>) {\n    /*\n    Expected JSON schema:\n    {\n        \"viewer\": {\n            \"id\": \"<node_id>\"\n        }\n    }\n    Where <node_id> is a 12 character string.\n    */\n\n    // Parse decrypted API response.\n    let json: JSON512b = JSON::parse_json_from_string(json_str);\n    let viewer: JSON512b = json.get_object_unchecked(\"viewer\".as_bytes());\n    let id: BoundedVec<u8, NODE_ID_LEN> = viewer.get_string_unchecked(\"id\".as_bytes());\n\n    // Assert `id` is the expected value.\n    let expected_node_id_vec: BoundedVec<u8, NODE_ID_LEN> = str_to_bounded_vec(expected_node_id);\n    assert(id == expected_node_id_vec);\n}\n\n#[test]\nfn test_main() {\n    let (mut key, ctr, mut nonce) = get_test_key_ctr_nonce();\n    let plaintext: str<MAX_OWNERSHIP_JSON_LEN> =\n        r#\"xxxxxxxxxxxxxxxx{\"viewer\":{\"id\":\"U_xxxxxxxxxx\"}}xxxxxxxxxxxxxxxx\"#;\n    let node_id: str<NODE_ID_LEN> = \"U_xxxxxxxxxx\";\n\n    // Calculate ciphertext.\n    let mut plaintext_vec: BoundedVec<u8, MAX_OWNERSHIP_RECORD_LEN> = BoundedVec::new();\n    plaintext_vec.extend_from_array(plaintext.as_bytes());\n    let encrypted_record = encrypt_record(key, ctr, nonce, plaintext_vec);\n\n    // DEV: we pad `json` with empty spaces because any other character will make JSON parsing [l. 55] fail.\n    let json: str<MAX_OWNERSHIP_JSON_LEN> =\n        r#\"{\"viewer\":{\"id\":\"U_xxxxxxxxxx\"}}                                \"#;\n    let start: u32 = 16; // Start index of the JSON in the decrypted response.\n    let end: u32 = OWNERSHIP_JSON_LEN + start; // End index of the JSON in the decrypted response.\n    let json_slice = JsonSlice { json, start, end };\n\n    let encrypted_record_signed: [u8; 64] = [\n        92, 173, 161, 226, 195, 196, 53, 2, 197, 191, 168, 22, 251, 159, 216, 5, 42, 194, 52, 252,\n        110, 42, 166, 8, 109, 44, 220, 202, 211, 216, 44, 76, 21, 57, 171, 183, 85, 250, 56, 254, 6,\n        224, 114, 154, 81, 6, 113, 85, 39, 119, 172, 122, 124, 140, 53, 164, 40, 157, 243, 53, 73,\n        86, 225, 79,\n    ]; // Removed the last 0x01 which is the recovery id.\n    let (proxy_pubkey_x, proxy_pubkey_y) = get_proxy_pubkeys();\n\n    let signature_payload = SignaturePayload {\n        encrypted_record,\n        encrypted_record_signed,\n        proxy_pubkey_x,\n        proxy_pubkey_y,\n    };\n\n    let airdrop_payload = AirdropPayload { graphql_response: json_slice, node_id };\n\n    main(key, ctr, nonce, signature_payload, airdrop_payload);\n}\n\n/*\n    Test helpers.\n*/\n\nfn get_test_key_ctr_nonce() -> ([u32; 8], u32, [u32; 3]) {\n    let key: [u32; 8] = [1, 2, 3, 4, 5, 6, 7, 8];\n    let ctr: u32 = 1;\n    let mut nonce: [u32; 3] = [1, 2, 3];\n    (key, ctr, nonce)\n}\n","path":"/home/runner/work/mono/mono/sentinel_sdk/src/prove/circuits/airdrop/ownership/src/main.nr"},"53":{"source":"use crate::constants::{\n    MAX_CONTRIBUTIONS_JSON_LEN, MAX_OWNERSHIP_JSON_LEN, OWNERSHIP_JSON_LEN, PROXY_PUBKEY_X,\n    PROXY_PUBKEY_Y,\n};\nuse chacha20::ChaCha20;\nuse keccak256::keccak256;\nuse std::ecdsa_secp256k1::verify_signature;\n\npub struct JsonSlice<let MAX_JSON_LEN: u32> {\n    json: str<MAX_JSON_LEN>,\n    start: u32,\n    end: u32,\n}\n\nfn verify_proxy_sig<let MAX_RECORD_LEN: u32>(\n    encrypted_record: BoundedVec<u8, MAX_RECORD_LEN>,\n    proxy_pubkey_x: [u8; 32],\n    proxy_pubkey_y: [u8; 32],\n    encrypted_record_signature: [u8; 64],\n) {\n    // DEV: Is using ciphertext.storage() safe?\n    let encrypted_record_hash = keccak256(encrypted_record.storage(), encrypted_record.len());\n    let is_verified = verify_signature(\n        proxy_pubkey_x,\n        proxy_pubkey_y,\n        encrypted_record_signature,\n        encrypted_record_hash,\n    );\n    assert(proxy_pubkey_x == PROXY_PUBKEY_X, \"Unexpected proxy public key X!\");\n    assert(proxy_pubkey_y == PROXY_PUBKEY_Y, \"Unexpected proxy public key Y!\");\n    assert(is_verified, \"proxy did not sign encrypted_record_hash!\");\n}\n\nfn encrypt_substring<let max_substring_len: u32>(\n    mut key: [u32; 8],\n    ctr: u32,\n    mut nonce: [u32; 3],\n    subtring: str<max_substring_len>,\n    keystream_offset: u32,\n) -> BoundedVec<u8, max_substring_len> {\n    let substring_vec: BoundedVec<u8, max_substring_len> = str_to_bounded_vec(subtring);\n    let chacha20 = ChaCha20::new(&mut key, ctr, &mut nonce);\n    let encrypted_substring: BoundedVec<u8, max_substring_len> =\n        chacha20.encrypt_with_offset(substring_vec, keystream_offset);\n\n    encrypted_substring\n}\n\nfn check_encrypted_json_ownership<let MAX_RECORD_LEN: u32>(\n    encrypted_record: BoundedVec<u8, MAX_RECORD_LEN>,\n    encrypted_json: BoundedVec<u8, MAX_OWNERSHIP_JSON_LEN>,\n    start: u32,\n) {\n    for i in 0..OWNERSHIP_JSON_LEN {\n        assert(\n            encrypted_record.get(i + start) == encrypted_json.get(i),\n            \"Encrypted JSON does not match expected value.\",\n        );\n    }\n}\n\nfn check_encrypted_json_contributions<let MAX_RECORD_LEN: u32>(\n    encrypted_record: BoundedVec<u8, MAX_RECORD_LEN>,\n    encrypted_json: BoundedVec<u8, MAX_CONTRIBUTIONS_JSON_LEN>,\n    start: u32,\n    end: u32,\n) {\n    for i in 0..MAX_CONTRIBUTIONS_JSON_LEN {\n        // Use boolean arithmetic to conditionally check\n        let should_check = (i + start < end) as u32;\n        let record_byte = encrypted_record.get(i + start);\n        let json_byte = encrypted_json.get(i);\n\n        // This will be 0 if bytes match OR if we shouldn't check\n        // Will be 1 only if bytes don't match AND we should check\n        let mismatch = should_check * ((record_byte != json_byte) as u32);\n\n        assert(mismatch == 0, \"Encrypted JSON does not match expected value.\");\n    }\n}\n\nfn decrypt_record<let MAX_RECORD_LEN: u32>(\n    mut key: [u32; 8],\n    ctr: u32,\n    mut nonce: [u32; 3],\n    encrypted_record: BoundedVec<u8, MAX_RECORD_LEN>,\n) -> BoundedVec<u8, MAX_RECORD_LEN> {\n    let chacha20 = ChaCha20::new(&mut key, ctr, &mut nonce);\n    let decrypted_record: BoundedVec<u8, MAX_RECORD_LEN> = chacha20.decrypt(encrypted_record);\n\n    decrypted_record\n}\n\nfn encrypt_record<let max_record_len: u32>(\n    mut key: [u32; 8],\n    ctr: u32,\n    mut nonce: [u32; 3],\n    record: BoundedVec<u8, max_record_len>,\n) -> BoundedVec<u8, max_record_len> {\n    let encrypted_record: BoundedVec<u8, max_record_len> = decrypt_record(key, ctr, nonce, record);\n    encrypted_record\n}\n\nfn get_proxy_pubkeys() -> ([u8; 32], [u8; 32]) {\n    (PROXY_PUBKEY_X, PROXY_PUBKEY_Y)\n}\n\nfn str_to_bounded_vec<let MAX_LEN: u32>(s: str<MAX_LEN>) -> BoundedVec<u8, MAX_LEN> {\n    let vec: BoundedVec<u8, MAX_LEN> = BoundedVec::from_array(s.as_bytes());\n\n    vec\n}\n\n#[test]\nfn test_check_encrypted_json_ownership() {\n    // Full encrypted record sample\n    let full_record: BoundedVec<u8, MAX_OWNERSHIP_JSON_LEN> = BoundedVec::from_array([\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,\n        18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    ]);\n\n    // Sample sub-encrypted record\n    let sub_record: BoundedVec<u8, MAX_OWNERSHIP_JSON_LEN> = BoundedVec::from_array([\n        1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,\n        26, 27, 28, 29, 30, 31, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    ]);\n    let start: u32 = 11; // Start index of the JSON in the encrypted response.\n    check_encrypted_json_ownership(full_record, sub_record, start);\n}\n","path":"/home/runner/work/mono/mono/sentinel_sdk/src/prove/circuits/airdrop/lib/src/utils.nr"},"54":{"source":"// DEV: Should this be refactored to a seperate folder at the same level with \"substring\" and \"airdrop\" called \"chacha20\" ?\n\nmod utils;\nmod test_vectors;\n\nglobal BLOCK_SIZE: u32 = 64; // In bytes.\nglobal STATE_SIZE: u32 = 16; // Each word is 4 bytes long.\nglobal DOUBLE_ROUNDS: u8 = 10;\n\nglobal MAX: u32 = 160;\n\n// Constants for \"expand 32-byte k\".\nglobal SIGMA_0: u32 = 0x61707865;\nglobal SIGMA_1: u32 = 0x3320646e;\nglobal SIGMA_2: u32 = 0x79622d32;\nglobal SIGMA_3: u32 = 0x6b206574;\n\npub struct ChaCha20 {\n    state: [u32; 16],\n    key: &mut [u32; 8],\n    ctr: u32,\n    nonce: &mut [u32; 3],\n}\n\nimpl ChaCha20 {\n    pub fn new(key: &mut [u32; 8], ctr: u32, nonce: &mut [u32; 3]) -> Self {\n        let state = [\n            SIGMA_0, SIGMA_1, SIGMA_2, SIGMA_3, key[0], key[1], key[2], key[3], key[4], key[5],\n            key[6], key[7], ctr, nonce[0], nonce[1], nonce[2],\n        ];\n\n        ChaCha20 { state, key, ctr, nonce }\n    }\n\n    pub fn encrypt<let MAX_CIRCUIT_LEN: u32>(\n        self,\n        plaintext: BoundedVec<u8, MAX_CIRCUIT_LEN>,\n    ) -> BoundedVec<u8, MAX_CIRCUIT_LEN> {\n        // plaintext should not be padded because the code below\n        // assumes that plaintext.len() != plaintext.max_len()\n\n        let mut out: BoundedVec<u8, MAX_CIRCUIT_LEN> = BoundedVec::new();\n\n        let full_blocks_max = MAX_CIRCUIT_LEN / BLOCK_SIZE;\n\n        for i in 0..full_blocks_max {\n            let key_stream = self.block(self.ctr + i);\n            let block_start = i * BLOCK_SIZE;\n\n            for j in 0..BLOCK_SIZE {\n                let indice_plain = block_start + j;\n                out.push(plaintext.get_unchecked(indice_plain) ^ key_stream[j]);\n            }\n        }\n\n        out\n    }\n\n    pub fn encrypt_with_offset<let MAX_SUBSTRING_LENGTH: u32>(\n        self,\n        plaintext: BoundedVec<u8, MAX_SUBSTRING_LENGTH>,\n        keystream_offset: u32,\n    ) -> BoundedVec<u8, MAX_SUBSTRING_LENGTH> {\n        let mut out: BoundedVec<u8, MAX_SUBSTRING_LENGTH> =\n            BoundedVec::from_array([0; MAX_SUBSTRING_LENGTH]);\n        // let initial_block_idx = keystream_offset / 64\n        let initial_block_idx = keystream_offset >> 6; // 2^6 = 64\n\n        // let initial_byte_idx = keystream_offset % 64;\n        let initial_byte_idx = keystream_offset & 63;\n\n        // let full_blocks_max = MAX_SUBSTRING_LENGTH / 64;\n        let full_blocks_max = MAX_SUBSTRING_LENGTH >> 6;\n\n        // This loop contains (full_blocks_max - 1) * BLOCK_SIZE = MAX_SUBSTRING_LENGTH - BLOCK_SIZE elements.\n        for block_idx_plaintext in 1..full_blocks_max {\n            let block_idx = block_idx_plaintext + initial_block_idx;\n            let keystream = self.block(self.ctr + block_idx);\n            let block_start = block_idx * BLOCK_SIZE;\n\n            for byte_idx in 0..BLOCK_SIZE {\n                let indice_plain = block_start + byte_idx - keystream_offset;\n                out.set_unchecked(indice_plain, plaintext.get(indice_plain) ^ keystream[byte_idx]);\n            }\n        }\n\n        let first_block_idx = initial_block_idx;\n        let first_keystream = self.block(self.ctr + first_block_idx);\n\n        let last_block_idx = full_blocks_max + initial_block_idx;\n        let last_keystream = self.block(self.ctr + last_block_idx);\n        let block_start = full_blocks_max * BLOCK_SIZE;\n\n        for byte_idx in 0..BLOCK_SIZE {\n            let indice_plain = block_start + byte_idx - initial_byte_idx;\n            let indice = indice_plain % MAX_SUBSTRING_LENGTH;\n\n            // let is_first_block = min(indice_plain / block_start, 1);\n            let is_first_block = (indice_plain >= block_start) as u8;\n            let keystream_byte_idx = is_first_block * first_keystream[byte_idx]\n                + (1 - is_first_block) * last_keystream[byte_idx];\n\n            out.set_unchecked(indice, plaintext.get(indice) ^ keystream_byte_idx);\n        }\n\n        out\n    }\n\n    pub fn decrypt<let MAX_CIRCUIT_LEN: u32>(\n        self,\n        ciphertext: BoundedVec<u8, MAX_CIRCUIT_LEN>,\n    ) -> BoundedVec<u8, MAX_CIRCUIT_LEN> {\n        self.encrypt(ciphertext)\n    }\n\n    fn block(self, ctr: u32) -> [u8; 64] {\n        let mut state = self.state;\n        state[12] = ctr;\n        let mut working_state = state;\n\n        for _ in 0..DOUBLE_ROUNDS {\n            inner_block(&mut working_state);\n        }\n        for i in 0..STATE_SIZE {\n            state[i] = utils::wrapping_add_32(state[i], working_state[i]);\n        }\n\n        serialize_state(&mut state)\n    }\n}\n\nfn inner_block(state: &mut [u32; 16]) {\n    // Column round.\n    quarter_round(state, 0, 4, 8, 12);\n    quarter_round(state, 1, 5, 9, 13);\n    quarter_round(state, 2, 6, 10, 14);\n    quarter_round(state, 3, 7, 11, 15);\n\n    // Diagonal round.\n    quarter_round(state, 0, 5, 10, 15);\n    quarter_round(state, 1, 6, 11, 12);\n    quarter_round(state, 2, 7, 8, 13);\n    quarter_round(state, 3, 4, 9, 14);\n}\n\nfn quarter_round(state: &mut [u32; 16], a: u32, b: u32, c: u32, d: u32) {\n    state[a] = utils::wrapping_add_32(state[a], state[b]);\n    state[d] ^= state[a];\n    state[d] = utils::rotl32(state[d], 16);\n\n    state[c] = utils::wrapping_add_32(state[c], state[d]);\n    state[b] ^= state[c];\n    state[b] = utils::rotl32(state[b], 12);\n\n    state[a] = utils::wrapping_add_32(state[a], state[b]);\n    state[d] ^= state[a];\n    state[d] = utils::rotl32(state[d], 8);\n\n    state[c] = utils::wrapping_add_32(state[c], state[d]);\n    state[b] ^= state[c];\n    state[b] = utils::rotl32(state[b], 7);\n}\n\nfn serialize_state(state: &mut [u32; 16]) -> [u8; 64] {\n    let mut serialized_state: [u8; 64] = [0; 64];\n\n    for i in 0..16 {\n        let bytes: [u8; 4] = (state[i] as Field).to_le_bytes();\n        serialized_state[i * 4] = bytes[0];\n        serialized_state[i * 4 + 1] = bytes[1];\n        serialized_state[i * 4 + 2] = bytes[2];\n        serialized_state[i * 4 + 3] = bytes[3];\n    }\n\n    serialized_state\n}\n\n/*\n    Tests.\n*/\n\n#[test]\nfn test_quarter_round() {\n    let test_cases = get_quarter_round_test_cases();\n\n    for case in test_cases {\n        let mut state = case.initial_state;\n        quarter_round(&mut state, case.a, case.b, case.c, case.d);\n        assert_arrays_eq(state, case.expected_state);\n    }\n}\n\n#[test]\nfn test_block() {\n    let test_cases = get_block_test_cases();\n\n    for case in test_cases {\n        run_block_test(case.key, case.counter, case.nonce, case.expected);\n    }\n}\n\n/*\nCommenting out this test since MAX has been\ndecreased from 512 to 160\n#[test]\nfn test_encrypt() {\n    let (case1, case2, case3, case4) = get_encrypt_test_cases();\n\n    run_encrypt_test(\n        case1.key,\n        case1.counter,\n        case1.nonce,\n        case1.plaintext,\n        case1.expected_ciphertext,\n    );\n\n    run_encrypt_test(\n        case2.key,\n        case2.counter,\n        case2.nonce,\n        case2.plaintext,\n        case2.expected_ciphertext,\n    );\n\n    run_encrypt_test(\n        case3.key,\n        case3.counter,\n        case3.nonce,\n        case3.plaintext,\n        case3.expected_ciphertext,\n    );\n\n    run_encrypt_test(\n        case4.key,\n        case4.counter,\n        case4.nonce,\n        case4.plaintext,\n        case4.expected_ciphertext,\n    );\n}\n*/\n\n/*\n    Test helpers.\n*/\n\nfn assert_vectors_eq(actual: BoundedVec<u8, MAX>, expected: BoundedVec<u8, MAX>) {\n    assert_eq(actual.len(), expected.len());\n\n    for i in 0..actual.len() {\n        assert_eq(actual.get(i), expected.get(i));\n    }\n}\n\nfn assert_arrays_eq<T, let MAX_CIRCUIT_LEN: u32>(\n    actual: [T; MAX_CIRCUIT_LEN],\n    expected: [T; MAX_CIRCUIT_LEN],\n)\nwhere\n    T: Eq,\n{\n    assert_eq(actual.len(), expected.len());\n\n    for i in 0..actual.len() {\n        assert_eq(actual[i], expected[i]);\n    }\n}\n\nfn run_block_test(key: [u32; 8], counter: u32, nonce: [u32; 3], expected: [u8; 64]) {\n    let mut key = key;\n    let mut nonce = nonce;\n    let chacha = ChaCha20::new(&mut key, counter, &mut nonce);\n\n    let actual = chacha.block(counter);\n    assert_arrays_eq(actual, expected);\n}\n\nfn run_encrypt_test(\n    key: [u32; 8],\n    counter: u32,\n    nonce: [u32; 3],\n    plaintext: BoundedVec<u8, MAX>,\n    expected: BoundedVec<u8, MAX>,\n) {\n    let mut key = key;\n    let mut nonce = nonce;\n    let chacha = ChaCha20::new(&mut key, counter, &mut nonce);\n\n    let encrypted = chacha.encrypt(plaintext);\n    assert_vectors_eq(encrypted, expected);\n    let decrypted = chacha.decrypt(encrypted);\n    assert_vectors_eq(decrypted, plaintext);\n}\n\npub struct QuarterRoundTest {\n    pub initial_state: [u32; 16],\n    pub a: u32,\n    pub b: u32,\n    pub c: u32,\n    pub d: u32,\n    pub expected_state: [u32; 16],\n}\n\npub struct BlockTest {\n    pub key: [u32; 8],\n    pub counter: u32,\n    pub nonce: [u32; 3],\n    pub expected: [u8; 64],\n}\n\npub struct EncryptTest {\n    pub key: [u32; 8],\n    pub counter: u32,\n    pub nonce: [u32; 3],\n    pub plaintext: BoundedVec<u8, MAX>,\n    pub expected_ciphertext: BoundedVec<u8, MAX>,\n}\n\npub fn get_quarter_round_test_cases() -> [QuarterRoundTest; 2] {\n    [\n        // Test Vector 2.1.1\n        QuarterRoundTest {\n            initial_state: test_vectors::get_quarter_round_test_state_0(),\n            a: 0,\n            b: 1,\n            c: 2,\n            d: 3,\n            expected_state: test_vectors::get_quarter_round_test_expected_0(),\n        },\n        // Test Vector 2.2.1\n        QuarterRoundTest {\n            initial_state: test_vectors::get_quarter_round_test_state_1(),\n            a: 2,\n            b: 7,\n            c: 8,\n            d: 13,\n            expected_state: test_vectors::get_quarter_round_test_expected_1(),\n        },\n    ]\n}\n\npub fn get_block_test_cases() -> [BlockTest; 6] {\n    [\n        // 2.3.2 Test Vector\n        BlockTest {\n            key: test_vectors::get_block_test_key_0(),\n            counter: 1,\n            nonce: test_vectors::get_block_test_nonce_0(),\n            expected: test_vectors::get_block_test_expected_state_0(),\n        },\n        // A.1 Test Vectors\n        BlockTest {\n            key: test_vectors::get_block_test_key_1(),\n            counter: 0,\n            nonce: test_vectors::get_block_test_nonce_1(),\n            expected: test_vectors::get_block_test_expected_state_1(),\n        },\n        BlockTest {\n            key: test_vectors::get_block_test_key_2(),\n            counter: 1,\n            nonce: test_vectors::get_block_test_nonce_2(),\n            expected: test_vectors::get_block_test_expected_state_2(),\n        },\n        BlockTest {\n            key: test_vectors::get_block_test_key_3(),\n            counter: 1,\n            nonce: test_vectors::get_block_test_nonce_3(),\n            expected: test_vectors::get_block_test_expected_state_3(),\n        },\n        BlockTest {\n            key: test_vectors::get_block_test_key_4(),\n            counter: 2,\n            nonce: test_vectors::get_block_test_nonce_4(),\n            expected: test_vectors::get_block_test_expected_state_4(),\n        },\n        BlockTest {\n            key: test_vectors::get_block_test_key_5(),\n            counter: 0,\n            nonce: test_vectors::get_block_test_nonce_5(),\n            expected: test_vectors::get_block_test_expected_state_5(),\n        },\n    ]\n}\n\npub fn get_encrypt_test_cases() -> (EncryptTest, EncryptTest, EncryptTest, EncryptTest) {\n    (\n        // Test Vector from Section 2.4.2 (114 bytes)\n        EncryptTest {\n            key: test_vectors::get_encrypt_test_key_0(),\n            counter: 1,\n            nonce: test_vectors::get_encrypt_test_nonce_0(),\n            plaintext: test_vectors::get_encrypt_test_plaintext_0(),\n            expected_ciphertext: test_vectors::get_encrypt_test_expected_ciphertext_0(),\n        },\n        // Test Vector #1 from A.2 (64 bytes)\n        EncryptTest {\n            key: test_vectors::get_encrypt_test_key_1(),\n            counter: 0,\n            nonce: test_vectors::get_block_test_nonce_1(),\n            plaintext: test_vectors::get_encrypt_test_plaintext_1(),\n            expected_ciphertext: test_vectors::get_encrypt_test_expected_ciphertext_1(),\n        },\n        // Test Vector #2 from A.2 (375 bytes)\n        EncryptTest {\n            key: test_vectors::get_encrypt_test_key_2(),\n            counter: 1,\n            nonce: test_vectors::get_encrypt_test_nonce_2(),\n            plaintext: test_vectors::get_encrypt_test_plaintext_2(),\n            expected_ciphertext: test_vectors::get_encrypt_test_expected_ciphertext_2(),\n        },\n        // Test Vector #3 from A.2 (127 bytes)\n        EncryptTest {\n            key: test_vectors::get_encrypt_test_key_3(),\n            counter: 42,\n            nonce: test_vectors::get_encrypt_test_nonce_3(),\n            plaintext: test_vectors::get_encrypt_test_plaintext_3(),\n            expected_ciphertext: test_vectors::get_encrypt_test_expected_ciphertext_3(),\n        },\n    )\n}\n\nfn generate_ciphertext<let MAX_LEN: u32>(\n    mut key: [u32; 8],\n    ctr: u32,\n    mut nonce: [u32; 3],\n    plaintext: BoundedVec<u8, MAX_LEN>,\n) -> BoundedVec<u8, MAX_LEN> {\n    let chacha = ChaCha20::new(&mut key, ctr, &mut nonce);\n    let plaintext = chacha.encrypt(plaintext);\n    plaintext\n}\n\nfn generate_ciphertext_with_offset<let MAX_LEN: u32>(\n    mut key: [u32; 8],\n    ctr: u32,\n    mut nonce: [u32; 3],\n    plaintext: BoundedVec<u8, MAX_LEN>,\n    keystream_offset: u32,\n) -> BoundedVec<u8, MAX_LEN> {\n    let chacha = ChaCha20::new(&mut key, ctr, &mut nonce);\n\n    let plaintext = chacha.encrypt_with_offset(plaintext, keystream_offset);\n    plaintext\n}\n\n#[cfg(test)]\nglobal OWNERSHIP_LEN: u32 = 64;\nglobal CONTRIBUTIONS_LEN: u32 = 192;\n\nglobal MAX_SUBSTRING_LENGTH: u32 = 64;\nglobal SUBSTRING_OFFSET: u32 = 35;\n\n#[test]\nfn test_generate_input() {\n    let (key, ctr, nonce) = get_test_key_ctr_nonce();\n\n    let plaintext_ownership_padded: str<OWNERSHIP_LEN> = get_ownership_plaintext();\n    let mut plaintext_ownership_vec: BoundedVec<u8, OWNERSHIP_LEN> = BoundedVec::new();\n    plaintext_ownership_vec.extend_from_array(plaintext_ownership_padded.as_bytes());\n\n    let ciphertext_ownership = generate_ciphertext(key, ctr, nonce, plaintext_ownership_vec);\n    println(\"\\n\\tEncrypted plaintext ownership:\");\n    println(ciphertext_ownership);\n\n    let plaintext_contributions: str<CONTRIBUTIONS_LEN> = get_contributions_plaintext();\n    let mut plaintext_contributions_vec: BoundedVec<u8, CONTRIBUTIONS_LEN> = BoundedVec::new();\n    plaintext_contributions_vec.extend_from_array(plaintext_contributions.as_bytes());\n\n    let ciphertext_contributions =\n        generate_ciphertext(key, ctr, nonce, plaintext_contributions_vec);\n    println(\"\\n\\tEncrypted plaintext contributions:\");\n    println(ciphertext_contributions);\n}\n\n#[test]\nfn test_encrypt_with_offset() {\n    let (key, ctr, nonce) = get_test_key_ctr_nonce();\n\n    let plaintext_contributions: str<CONTRIBUTIONS_LEN> = get_contributions_plaintext();\n    let mut plaintext_contributions_vec: BoundedVec<u8, CONTRIBUTIONS_LEN> = BoundedVec::new();\n    plaintext_contributions_vec.extend_from_array(plaintext_contributions.as_bytes());\n\n    let substring_contributions: str<MAX_SUBSTRING_LENGTH> = get_contributions_substring();\n    let mut substring_contributions_vec: BoundedVec<u8, MAX_SUBSTRING_LENGTH> = BoundedVec::new();\n    substring_contributions_vec.extend_from_array(substring_contributions.as_bytes());\n\n    let ciphertext_substring_contributions = generate_ciphertext_with_offset(\n        key,\n        ctr,\n        nonce,\n        substring_contributions_vec,\n        SUBSTRING_OFFSET,\n    );\n}\n\nfn get_test_key_ctr_nonce() -> ([u32; 8], u32, [u32; 3]) {\n    let key: [u32; 8] = [1, 2, 3, 4, 5, 6, 7, 8];\n    let ctr: u32 = 1;\n    let nonce: [u32; 3] = [1, 2, 3];\n    (key, ctr, nonce)\n}\n\nfn get_ownership_plaintext() -> str<OWNERSHIP_LEN> {\n    r#\"{\"data\":{\"viewer\":{\"id\":\"U_xxxxxxxxxx\"}}}xxxxxxxxxxxxxxxxxxxxxxx\"#\n}\n\nfn get_contributions_plaintext() -> str<CONTRIBUTIONS_LEN> {\n    r#\"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx{\"data\":{\"repository\":{\"name\":\"xxx\",\"owner\":{\"login\":\"xxx\"},\"defaultBranchRef\":{\"target\":{\"history\":{\"totalCount\":xxx}}}}}}xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"#\n}\n\nfn get_contributions_substring() -> str<MAX_SUBSTRING_LENGTH> {\n    r#\"{\"data\":{\"repository\":{\"name\":\"xxx\",\"owner\":{\"login\":\"xxx\"},\"def\"#\n}\n","path":"/home/runner/work/mono/mono/sentinel_sdk/src/prove/circuits/substring/lib/src/lib.nr"},"56":{"source":"global MAX_U32: u32 = 0xFFFFFFFF;\nglobal WORD_SIZE: u8 = 32;\n\npub fn wrapping_add_32(x: u32, y: u32) -> u32 {\n    std::ops::WrappingAdd::wrapping_add(x, y)\n}\n\npub fn rotl32(x: u32, n_bits: u8) -> u32 {\n    // In Noir, the bit count in a bit-shift operation must fit in a `u8`, hence `n_bits: u8`.\n    let l = x << n_bits & MAX_U32;\n    let r = x >> (WORD_SIZE - n_bits);\n    l | r\n}\n\n#[test(should_fail_with = \"Failed constraint\")]\nfn test_add() {\n    assert_eq(0xFFFFFFFF + 1, 0);\n}\n\n#[test]\nfn test_add_modulo_2_32() {\n    assert_eq(wrapping_add_32(0xFFFFFFFF, 1), 0);\n}\n\n#[test]\nfn test_rotl32_lt_32() {\n    assert_eq(rotl32(0x1000, 4), 0x10000);\n    /*\n        The test was initially asserting: assert_eq(rotl32(0x1000, 4), 0x0001); and was expected to fail.\n        However:\n            - 0x1000 is treated as a 32-bit value: 0x00001000.\n            - Rotating left by 4 bits gives: 0x00010000 (0x10000).\n            This is the correct behavior for 32-bit rotation, unlike the previous incorrect expectation of 0x0001.\n    */\n}\n\n#[test]\nfn test_rotl32() {\n    assert_eq(rotl32(0x00000001, 0), 0x00000001);\n\n    assert_eq(rotl32(0x00000000, 4), 0x00000000);\n    assert_eq(rotl32(0xFFFFFFFF, 4), 0xFFFFFFFF);\n\n    assert_eq(rotl32(0x10000000, 4), 0x00000001);\n    assert_eq(rotl32(0x00000001, 4), 0x00000010);\n}\n","path":"/home/runner/work/mono/mono/sentinel_sdk/src/prove/circuits/substring/lib/src/utils.nr"},"58":{"source":"mod tests;\n\nuse std::runtime::is_unconstrained;\nuse std::hash::keccak::keccakf1600;\n\nglobal BLOCK_SIZE_IN_BYTES: u32 = 136; //(1600 - BITS * 2) / WORD_SIZE;\nglobal WORD_SIZE: u32 = 8; // Limbs are made up of u64s so 8 bytes each.\nglobal LIMBS_PER_BLOCK: u32 = BLOCK_SIZE_IN_BYTES / WORD_SIZE;\nglobal NUM_KECCAK_LANES: u32 = 25;\n\n#[no_predicates]\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32] {\n    assert(N >= message_size);\n\n    // Copy input to block bytes. For that we'll need at least input bytes (N)\n    // but we want it to be padded to a multiple of BLOCK_SIZE_IN_BYTES.\n    let mut block_bytes = [0; ((N / BLOCK_SIZE_IN_BYTES) + 1) * BLOCK_SIZE_IN_BYTES];\n    if is_unconstrained() {\n        for i in 0..message_size {\n            block_bytes[i] = input[i];\n        }\n    } else {\n        for i in 0..N {\n            if i < message_size {\n                block_bytes[i] = input[i];\n            }\n        }\n    }\n\n    //1. format_input_lanes\n    let max_blocks = (N + BLOCK_SIZE_IN_BYTES) / BLOCK_SIZE_IN_BYTES;\n    //maximum number of bytes to hash\n    let real_max_blocks = (message_size + BLOCK_SIZE_IN_BYTES) / BLOCK_SIZE_IN_BYTES;\n    let real_blocks_bytes = real_max_blocks * BLOCK_SIZE_IN_BYTES;\n\n    block_bytes[message_size] = 1;\n    block_bytes[real_blocks_bytes - 1] = 0x80;\n\n    // populate a vector of 64-bit limbs from our byte array\n    let mut sliced_buffer =\n        [0; (((N / BLOCK_SIZE_IN_BYTES) + 1) * BLOCK_SIZE_IN_BYTES) / WORD_SIZE];\n    for i in 0..sliced_buffer.len() {\n        let limb_start = WORD_SIZE * i;\n\n        let mut sliced = 0;\n        let mut v = 1;\n        for k in 0..WORD_SIZE {\n            sliced += v * (block_bytes[limb_start + k] as Field);\n            v *= 256;\n        }\n\n        sliced_buffer[i] = sliced as u64;\n    }\n\n    //2. sponge_absorb\n    let mut state: [u64; NUM_KECCAK_LANES] = [0; NUM_KECCAK_LANES];\n    // When in an unconstrained runtime we can take advantage of runtime loop bounds,\n    // thus allowing us to simplify the loop body.\n    if is_unconstrained() {\n        for i in 0..real_max_blocks {\n            if (i == 0) {\n                for j in 0..LIMBS_PER_BLOCK {\n                    state[j] = sliced_buffer[j];\n                }\n            } else {\n                for j in 0..LIMBS_PER_BLOCK {\n                    state[j] = state[j] ^ sliced_buffer[i * LIMBS_PER_BLOCK + j];\n                }\n            }\n            state = keccakf1600(state);\n        }\n    } else {\n        // `real_max_blocks` is guaranteed to at least be `1`\n        // We peel out the first block as to avoid a conditional inside of the loop.\n        // Otherwise, a dynamic predicate can cause a blowup in a constrained runtime.\n        for j in 0..LIMBS_PER_BLOCK {\n            state[j] = sliced_buffer[j];\n        }\n        state = keccakf1600(state);\n        for i in 1..max_blocks {\n            if i < real_max_blocks {\n                for j in 0..LIMBS_PER_BLOCK {\n                    state[j] = state[j] ^ sliced_buffer[i * LIMBS_PER_BLOCK + j];\n                }\n                state = keccakf1600(state);\n            }\n        }\n    }\n\n    //3. sponge_squeeze\n    let mut result = [0; 32];\n    for i in 0..4 {\n        let lane = state[i] as Field;\n        let lane_le: [u8; 8] = lane.to_le_bytes();\n        for j in 0..8 {\n            result[8 * i + j] = lane_le[j];\n        }\n    }\n    result\n}\n","path":"/home/runner/nargo/github.com/noir-lang/keccak256/v0.1.0/src/keccak256.nr"},"60":{"source":"/*\n\nwhen iterating from 0 to N, validate i < M efficiently\nwe have an array of flags that describe whether entry is valid\nflags start at 1 and at 0 more or less\n\nwe check:\n1. flag starts at 0 or 1\n2. flag transition cannot be 0 -> 1 i.e. new_flag * (1 - old_flag) == 0\n3. flag ends at 0 or 1\n\nthe above validates that only one transition point occurs\nwe still need to test the transition point\n\ntransition happens when we get 1 -> 0 i.e. tx = i * (old_flag * (1 - new_flag))\nin this case, i == M\n\n// o * (1 - n) = o - on\n// n * (1 - o) = n - on\n// i*(o - on) * (1/i) - o + n\n*/\n\n/**\n * @brief helper method that provides an array of Field elements `flags`, where `flags[i] = i < boundary`\n * @description this method is cheaper than querying `i < boundary` for `u16` and `u32` types\n *              cost = 3 gates + 2 gates per iteration \n **/\npub fn get_validity_flags<let N: u32>(boundary: u32) -> [Field; N] {\n    //@Safety: The constraining is happening inside get_validity_flags_inner\n    let flags: [Field; N] = unsafe { __get_validity_flags(boundary) };\n    get_validity_flags_inner(boundary, flags)\n}\n\nunconstrained fn __get_validity_flags<let N: u32>(boundary: u32) -> [Field; N] {\n    let mut result: [Field; N] = [0; N];\n    for i in 0..N {\n        if i < boundary {\n            result[i] = 1;\n        }\n    }\n    result\n}\n\n/**\n * @brief implementation of `get_validity_flags`\n * @description Given an array of `flags`, we apply the following checks to build an inductive proof about the validity of the flags array:\n *              1. the first element `flags[0]` is in the range [0,1]\n *              2. the last element `flags[N-1]` is in the range [0,1]\n *              3. for any two flags `old, new` where `old = flags[i-1], new = flags[i]` and `i>0, i <N`, we validate the following:\n *                  a. if `old` is 0, `new` *cannot* equal 1\n *                  b. if `old` is 1 and `new` is 0, set `transition_index = i`\n *  The value of `transition_index` will equal the value `i` where `i = boundary` (or `N` if `boundary > N`)\n *              4. we finally validate `transition_index == boundary` to prove the location where `flags[i-1] = 1` and `flags[i] = 0`\n *                 aligns with what is expected from testing `i < boundary`\n *  N.B. this method will revert if `boundary > N`\n **/\nfn get_validity_flags_inner<let N: u32>(boundary: u32, flags: [Field; N]) -> [Field; N] {\n    let initial_flag = flags[0];\n    let final_flag = flags[N - 1];\n\n    // check first and last flags are in the range [0, 1]\n    assert(initial_flag * initial_flag == initial_flag);\n    assert(final_flag * final_flag == final_flag);\n\n    let mut transition_index = 0;\n\n    for i in 1..N {\n        let old_flag = flags[i - 1];\n        let new_flag = flags[i];\n        assert(new_flag == old_flag * new_flag);\n\n        // old = a, new = b\n        let idx = (old_flag * (1 - new_flag)) * (i as Field);\n        transition_index = transition_index + idx;\n        std::as_witness(transition_index);\n    }\n\n    assert(transition_index == boundary as Field);\n    flags\n}\n\n#[test]\nfn test_get_validity_flags() {\n    for i in 0..32 {\n        let flags: [Field; 32] = get_validity_flags(i);\n        for j in 0..32 {\n            assert(flags[j] == (j < i) as Field);\n        }\n    }\n}\n\n#[test(should_fail)]\nfn test_get_validity_flags_fail() {\n    let _ = get_validity_flags(33);\n}\n\n#[test(should_fail)]\nfn test_get_validity_flags_bad_index_fail_a() {\n    let bad_flags: [Field; 10] = [1, 1, 1, 0, 0, 0, 1, 0, 0, 0];\n    let _ = get_validity_flags_inner(3, bad_flags);\n}\n#[test(should_fail)]\nfn test_get_validity_flags_bad_index_fail_b() {\n    let bad_flags: [Field; 10] = [1, 1, 1, 1, 0, 0, 0, 0, 0, 0];\n    let _ = get_validity_flags_inner(3, bad_flags);\n}\n\n#[test(should_fail)]\nfn test_get_validity_flags_bad_index_fail_c() {\n    let bad_flags: [Field; 10] = [1, 1, 0, 0, 0, 0, 0, 0, 0, 0];\n    let _ = get_validity_flags_inner(3, bad_flags);\n}\n\n#[test]\nfn test_get_validity_flags_good_index_d() {\n    let bad_flags: [Field; 10] = [1, 1, 1, 0, 0, 0, 0, 0, 0, 0];\n    let _ = get_validity_flags_inner(3, bad_flags);\n}\n\n#[test(should_fail)]\nfn test_get_validity_flags_bad_index_fail_e() {\n    let bad_flags: [Field; 10] = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1];\n    let _ = get_validity_flags_inner(11, bad_flags);\n}\n\n// this test uses bad flags but manipulates transition_index to be satisfiable\n// nevertheless test will fail because our transition test (old * new = new) will fail\n#[test(should_fail)]\nfn test_get_validity_flags_bad_index_fail_f() {\n    let mut bad_flags: [Field; 10] = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n\n    let fake_index_a = 2;\n    let fake_value_a = 100;\n\n    let fake_index_b = 4;\n    // 4 * Y = -2 * X\n    let fake_value_b = (-fake_value_a * fake_index_a) / fake_index_b;\n\n    bad_flags[fake_index_a] = fake_value_a;\n    bad_flags[fake_index_b] = fake_value_b;\n    let _ = get_validity_flags_inner(0, bad_flags);\n}\n","path":"/home/runner/nargo/github.com/noir-lang/noir_json_parser/v0.4.0/src/_comparison_tools/bounds_checker.nr"},"61":{"source":"/**\n * @file helper methods that evaluate comparison operations on Field elements that are known to be of a fixed size (e.g. <2^16)\n **/\npub unconstrained fn get_lt_predicate_f(x: Field, y: Field) -> bool {\n    let a = x as u32;\n    let b = y as u32;\n    let r = a < b;\n    r\n}\n\npub unconstrained fn get_lte_predicate_large(x: Field, y: Field) -> bool {\n    let r = x.lt(y) | (x == y);\n    r\n}\n\npub fn lte_field_240_bit(x: Field, y: Field) -> bool {\n    //@Safety: check the comments below\n    let predicate = unsafe { get_lte_predicate_large(x, y) };\n    let delta = y as Field - x as Field;\n\n    // (x - y) * predicate\n    // if true, y - x >= 0\n    // if false, x <= y is wrong therefore x > y => x - y > 0 => x - y + 1 >= 0\n    // (y - x) * p + (1 - p) * (x - y + 1)\n    // (y - x) * p + x - y + 1 + p * (y - x)\n    let lt_parameter = 2 * (predicate as Field) * delta - predicate as Field - delta + 1;\n    // checks that the bit length of lt_parameter is 240\n    // i.e. checks the sign of lt_parameter\n    lt_parameter.assert_max_bit_size::<240>();\n\n    predicate\n}\n\npub fn assert_lte_240_bit(x: Field, y: Field) {\n    let delta = y as Field - x as Field;\n\n    // (x - y) * predicate\n    // if true, y - x >= 0\n    // if false, x <= y is wrong therefore x > y => x - y > 0 => x - y + 1 >= 0\n    // (y - x) * p + (1 - p) * (x - y + 1)\n    // (y - x) * p + x - y + 1 + p * (y - x)\n    delta.assert_max_bit_size::<240>();\n}\n\npub fn lt_field_16_bit(x: Field, y: Field) -> bool {\n    //@Safety: check the comments below\n    let predicate = unsafe { get_lt_predicate_f(x, y) };\n    let delta = y as Field - x as Field;\n    let lt_parameter = 2 * (predicate as Field) * delta - predicate as Field - delta;\n    // checks that the bit length of lt_parameter is 16\n    // i.e. checks the sign of lt_parameter\n    lt_parameter.assert_max_bit_size::<16>();\n\n    predicate\n}\n\npub fn lt_field_8_bit(x: Field, y: Field) -> bool {\n    //@Safety: check the comments below\n    let predicate = unsafe { get_lt_predicate_f(x, y) };\n    let delta = y as Field - x as Field;\n    let lt_parameter = 2 * (predicate as Field) * delta - predicate as Field - delta;\n    // checks that the bit length of lt_parameter is 8\n    // i.e. checks the sign of lt_parameter\n    lt_parameter.assert_max_bit_size::<8>();\n\n    predicate\n}\n\npub fn assert_gt_240_bit(lhs: Field, rhs: Field) {\n    // lhs > rhs\n    // -> lhs - rhs > 0\n    // -> lhs - rhs - 1 >= 0\n    let diff = lhs - rhs - 1;\n    diff.assert_max_bit_size::<240>();\n}\n\npub fn assert_lt_240_bit(lhs: Field, rhs: Field) {\n    // lhs < rhs\n    // -> rhs - lhs > 0\n    // -> rhs - lhs - 1 >= 0\n    let diff = rhs - lhs - 1;\n    diff.assert_max_bit_size::<240>();\n}\n","path":"/home/runner/nargo/github.com/noir-lang/noir_json_parser/v0.4.0/src/_comparison_tools/lt.nr"},"64":{"source":"global PLO: Field = 0x2833E84879B9709143E1F593F0000001;\nglobal PHI: Field = 0x30644E72E131A029B85045B68181585D;\n\nglobal PLO_200_felt: Field = 0x29B85045B68181585D2833E84879B9709143E1F593F0000001;\nglobal PHI_54_felt: Field = 0x30644E72E131A0;\nglobal TWO_POW_200: Field = 0x100000000000000000000000000000000000000000000000000;\nstruct Slice200 {\n    hihi: u64, // 7 bytes\n    hilo: u64, // 7 bytes\n    lohi: u64, // 7 bytes\n    lolo: u32, // 4 bytes\n}\nglobal PHI_54: u64 = 0x30644E72E131A0;\nglobal PLO_200: Slice200 = Slice200 {\n    hihi: 0x29B85045B68181,\n    hilo: 0x585D2833E84879,\n    lohi: 0xB9709143E1F593,\n    lolo: 0xF0000001,\n};\n\nunconstrained fn __slice_200_bits_from_field(f: Field) -> (Field, Field, bool) {\n    let b: [u8; 32] = f.to_be_bytes();\n\n    let mut res200: Slice200 = Slice200 { hihi: 0, hilo: 0, lohi: 0, lolo: 0 };\n    let mut res54: u64 = 0;\n    for i in 0..7 {\n        res200.hihi <<= 8;\n        res200.hilo <<= 8;\n        res200.lohi <<= 8;\n        res200.hihi += b[i + 7] as u64;\n        res200.hilo += b[i + 14] as u64;\n        res200.lohi += b[i + 21] as u64;\n    }\n    for i in 0..4 {\n        res200.lolo <<= 8;\n        res200.lolo += b[28 + i] as u32;\n    }\n    for i in 0..7 {\n        res54 <<= 8;\n        res54 += b[i] as u64;\n    }\n\n    let mut lo: Field = res200.hihi as Field; // 56 bits\n    lo *= 0x100000000000000; // 56 + 56 bits\n    lo += res200.hilo as Field; // 56 + 56 bits\n    lo *= 0x100000000000000; // 56 + 56 + 56 bits\n    lo += res200.lohi as Field; // 56 + 56 + 56 bits = 168 bits\n    lo *= 0x100000000; // 56 + 56 + 56 + 32 bits = 200 bits?\n    lo += res200.lolo as Field;\n\n    let mut hi = res54 as Field;\n\n    let mut PLO = PLO_200;\n    let mut borrow: bool = false;\n    // p - x\n    borrow = PLO.lolo < res200.lolo;\n    PLO.lohi -= borrow as u64;\n    borrow = PLO.lohi < res200.lohi;\n    PLO.hilo -= borrow as u64;\n    borrow = PLO.hilo < res200.hilo;\n    PLO.hihi -= borrow as u64;\n    borrow = PLO.hihi < res200.hihi;\n    (lo, hi, borrow)\n}\n\npub fn slice_200_bits_from_field(f: Field) -> Field {\n    //@Safety: check the comments below\n    let (lo, hi, borrow) = unsafe { __slice_200_bits_from_field(f) };\n    // checks that lo and hi are the correct slices of f\n    assert(hi * TWO_POW_200 + lo == f);\n    // checks that lo and hi are the correct bit sizes\n    lo.assert_max_bit_size::<200>();\n    hi.assert_max_bit_size::<56>();\n    let lo_diff = PLO_200_felt - lo + (borrow as Field * TWO_POW_200);\n    let hi_diff = PHI_54_felt - hi - borrow as Field;\n    lo_diff.assert_max_bit_size::<200>();\n    hi_diff.assert_max_bit_size::<56>();\n    lo\n}\n","path":"/home/runner/nargo/github.com/noir-lang/noir_json_parser/v0.4.0/src/_string_tools/slice_field.nr"},"65":{"source":"/**\n * @file methods to extract data efficiently from Field elements that represent 31 bytes of packed data\n **/\n\n// #############################################################\n// ### GLOBAL VARIABLES AND LOOKUP TABLES\n// #############################################################\nglobal two_pow_128: Field = 0x100000000000000000000000000000000;\nglobal two_pow_64: Field = 0x10000000000000000;\nglobal two_pow_32: Field = 0x100000000;\nglobal two_pow_16: Field = 0x10000;\n\nglobal path_multipliers_chunk4: [Field; 32] = [\n    /* 0  (00000) */ 0,\n    /* 1  (00001) */ 0,\n    /* 2  (00010) */ 0,\n    /* 3  (00011) */ 0,\n    /* 4  (00100) */ 0,\n    /* 5  (00101) */ 0,\n    /* 6  (00110) */ 0,\n    /* 7  (00111) */ 0,\n    /* 8  (01000) */ 0,\n    /* 9  (01001) */ 0,\n    /* 10 (01010) */ 0,\n    /* 11 (01011) */ 0,\n    /* 12 (01100) */ 0,\n    /* 13 (01101) */ 0,\n    /* 14 (01110) */ 0,\n    /* 15 (01111) */ 0,\n    /* 16 (10000) */ 1,\n    /* 17 (10001) */ 1,\n    /* 18 (10010) */ 1,\n    /* 19 (10011) */ 1,\n    /* 20 (10100) */ 1,\n    /* 21 (10101) */ 1,\n    /* 22 (10110) */ 1,\n    /* 23 (10111) */ 1,\n    /* 24 (11000) */ 1,\n    /* 25 (11001) */ 1,\n    /* 26 (11010) */ 1,\n    /* 27 (11011) */ 1,\n    /* 28 (11100) */ 1,\n    /* 29 (11101) */ 1,\n    /* 30 (11110) */ 1,\n    /* 31 (11111) */ 1,\n];\n\n// this represents an 8 byte chunk. what do we multiply by?\nglobal path_multipliers_chunk3: [Field; 32] = [\n    /* 0  (00000) */ 0,\n    /* 1  (00001) */ 0,\n    /* 2  (00010) */ 0,\n    /* 3  (00011) */ 0,\n    /* 4  (00100) */ 0,\n    /* 5  (00101) */ 0,\n    /* 6  (00110) */ 0,\n    /* 7  (00111) */ 0,\n    /* 8  (01000) */ 1,\n    /* 9  (01001) */ 1,\n    /* 10 (01010) */ 1,\n    /* 11 (01011) */ 1,\n    /* 12 (01100) */ 1,\n    /* 13 (01101) */ 1,\n    /* 14 (01110) */ 1,\n    /* 15 (01111) */ 1,\n    /* 16 (10000) */ 0,\n    /* 17 (10001) */ 0,\n    /* 18 (10010) */ 0,\n    /* 19 (10011) */ 0,\n    /* 20 (10100) */ 0,\n    /* 21 (10101) */ 0,\n    /* 22 (10110) */ 0,\n    /* 23 (10111) */ 0,\n    /* 24 (11000) */ two_pow_128,\n    /* 25 (11001) */ two_pow_128,\n    /* 26 (11010) */ two_pow_128,\n    /* 27 (11011) */ two_pow_128,\n    /* 28 (11100) */ two_pow_128,\n    /* 29 (11101) */ two_pow_128,\n    /* 30 (11110) */ two_pow_128,\n    /* 31 (11111) */ two_pow_128,\n];\n\n// what do we multiply 4 byte chunk by\nglobal path_multipliers_chunk2: [Field; 32] = [\n    /* 0  (00000) */ 0,\n    /* 1  (00001) */ 0,\n    /* 2  (00010) */ 0,\n    /* 3  (00011) */ 0,\n    /* 4  (00100) */ 1,\n    /* 5  (00101) */ 1,\n    /* 6  (00110) */ 1,\n    /* 7  (00111) */ 1,\n    /* 8  (01000) */ 0,\n    /* 9  (01001) */ 0,\n    /* 10 (01010) */ 0,\n    /* 11 (01011) */ 0,\n    /* 12 (01100) */ two_pow_64,\n    /* 13 (01101) */ two_pow_64,\n    /* 14 (01110) */ two_pow_64,\n    /* 15 (01111) */ two_pow_64,\n    /* 16 (10000) */ 0,\n    /* 17 (10001) */ 0,\n    /* 18 (10010) */ 0,\n    /* 19 (10011) */ 0,\n    /* 20 (10100) */ two_pow_128,\n    /* 21 (10101) */ two_pow_128,\n    /* 22 (10110) */ two_pow_128,\n    /* 23 (10111) */ two_pow_128,\n    /* 24 (11000) */ 0,\n    /* 25 (11001) */ 0,\n    /* 26 (11010) */ 0,\n    /* 27 (11011) */ 0,\n    /* 28 (11100) */ two_pow_128 * two_pow_64,\n    /* 29 (11101) */ two_pow_128 * two_pow_64,\n    /* 30 (11110) */ two_pow_128 * two_pow_64,\n    /* 31 (11111) */ two_pow_128 * two_pow_64,\n];\n\n// what do we multiply 2 byte chunk by\nglobal path_multipliers_chunk1: [Field; 32] = [\n    /* 0  (00000) */ 0,\n    /* 1  (00001) */ 0,\n    /* 2  (00010) */ 1,\n    /* 3  (00011) */ 1,\n    /* 4  (00100) */ 0,\n    /* 5  (00101) */ 0,\n    /* 6  (00110) */ two_pow_32,\n    /* 7  (00111) */ two_pow_32,\n    /* 8  (01000) */ 0,\n    /* 9  (01001) */ 0,\n    /* 10 (01010) */ two_pow_64,\n    /* 11 (01011) */ two_pow_64,\n    /* 12 (01100) */ 0,\n    /* 13 (01101) */ 0,\n    /* 14 (01110) */ two_pow_64 * two_pow_32,\n    /* 15 (01111) */ two_pow_64 * two_pow_32,\n    /* 16 (10000) */ 0,\n    /* 17 (10001) */ 0,\n    /* 18 (10010) */ two_pow_128,\n    /* 19 (10011) */ two_pow_128,\n    /* 20 (10100) */ 0,\n    /* 21 (10101) */ 0,\n    /* 22 (10110) */ two_pow_128 * two_pow_32,\n    /* 23 (10111) */ two_pow_128 * two_pow_32,\n    /* 24 (11000) */ 0,\n    /* 25 (11001) */ 0,\n    /* 26 (11010) */ two_pow_128 * two_pow_64,\n    /* 27 (11011) */ two_pow_128 * two_pow_64,\n    /* 28 (11100) */ 0,\n    /* 29 (11101) */ 0,\n    /* 30 (11110) */ two_pow_128 * two_pow_64 * two_pow_32,\n    /* 31 (11111) */ two_pow_128 * two_pow_64 * two_pow_32,\n];\n\n// what do we multiply 1 byte chunk by\nglobal path_multipliers_chunk0: [Field; 32] = [\n    /* 0  (00000) */ 0,\n    /* 1  (00001) */ 1,\n    /* 2  (00010) */ 0,\n    /* 3  (00011) */ two_pow_16,\n    /* 4  (00100) */ 0,\n    /* 5  (00101) */ two_pow_32,\n    /* 6  (00110) */ 0,\n    /* 7  (00111) */ two_pow_16 * two_pow_32,\n    /* 8  (01000) */ 0,\n    /* 9  (01001) */ two_pow_64,\n    /* 10 (01010) */ 0,\n    /* 11 (01011) */ two_pow_64 * two_pow_16,\n    /* 12 (01100) */ 0,\n    /* 13 (01101) */ two_pow_64 * two_pow_32,\n    /* 14 (01110) */ 0,\n    /* 15 (01111) */ two_pow_64 * two_pow_32 * two_pow_16,\n    /* 16 (10000) */ 0,\n    /* 17 (10001) */ two_pow_128,\n    /* 18 (10010) */ 0,\n    /* 19 (10011) */ two_pow_128 * two_pow_16,\n    /* 20 (10100) */ 0,\n    /* 21 (10101) */ two_pow_128 * two_pow_32,\n    /* 22 (10110) */ 0,\n    /* 23 (10111) */ two_pow_128 * two_pow_32 * two_pow_16,\n    /* 24 (11000) */ 0,\n    /* 25 (11001) */ two_pow_128 * two_pow_64,\n    /* 26 (11010) */ 0,\n    /* 27 (11011) */ two_pow_128 * two_pow_64 * two_pow_16,\n    /* 28 (11100) */ 0,\n    /* 29 (11101) */ two_pow_128 * two_pow_64 * two_pow_32,\n    /* 30 (11110) */ 0,\n    /* 31 (11111) */ two_pow_128 * two_pow_64 * two_pow_32 * two_pow_16,\n];\n\n// these are `head_path_multipliers` but in reverse order\nglobal tail_path_multipliers_chunk3: [Field; 32] = [\n    0x0100000000000000000000000000000000,\n    0x0100000000000000000000000000000000,\n    0x0100000000000000000000000000000000,\n    0x0100000000000000000000000000000000,\n    0x0100000000000000000000000000000000,\n    0x0100000000000000000000000000000000,\n    0x0100000000000000000000000000000000,\n    0x0100000000000000000000000000000000,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x01,\n    0x01,\n    0x01,\n    0x01,\n    0x01,\n    0x01,\n    0x01,\n    0x01,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n];\nglobal tail_path_multipliers_chunk2: [Field; 32] = [\n    0x01000000000000000000000000000000000000000000000000,\n    0x01000000000000000000000000000000000000000000000000,\n    0x01000000000000000000000000000000000000000000000000,\n    0x01000000000000000000000000000000000000000000000000,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x0100000000000000000000000000000000,\n    0x0100000000000000000000000000000000,\n    0x0100000000000000000000000000000000,\n    0x0100000000000000000000000000000000,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x010000000000000000,\n    0x010000000000000000,\n    0x010000000000000000,\n    0x010000000000000000,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n    0x01,\n    0x01,\n    0x01,\n    0x01,\n    0x00,\n    0x00,\n    0x00,\n    0x00,\n];\nglobal tail_path_multipliers_chunk1: [Field; 32] = [\n    0x0100000000000000000000000000000000000000000000000000000000,\n    0x0100000000000000000000000000000000000000000000000000000000,\n    0x00,\n    0x00,\n    0x01000000000000000000000000000000000000000000000000,\n    0x01000000000000000000000000000000000000000000000000,\n    0x00,\n    0x00,\n    0x010000000000000000000000000000000000000000,\n    0x010000000000000000000000000000000000000000,\n    0x00,\n    0x00,\n    0x0100000000000000000000000000000000,\n    0x0100000000000000000000000000000000,\n    0x00,\n    0x00,\n    0x01000000000000000000000000,\n    0x01000000000000000000000000,\n    0x00,\n    0x00,\n    0x010000000000000000,\n    0x010000000000000000,\n    0x00,\n    0x00,\n    0x0100000000,\n    0x0100000000,\n    0x00,\n    0x00,\n    0x01,\n    0x01,\n    0x00,\n    0x00,\n];\nglobal tail_path_multipliers_chunk0: [Field; 32] = [\n    0x01000000000000000000000000000000000000000000000000000000000000,\n    0x00,\n    0x0100000000000000000000000000000000000000000000000000000000,\n    0x00,\n    0x010000000000000000000000000000000000000000000000000000,\n    0x00,\n    0x01000000000000000000000000000000000000000000000000,\n    0x00,\n    0x0100000000000000000000000000000000000000000000,\n    0x00,\n    0x010000000000000000000000000000000000000000,\n    0x00,\n    0x01000000000000000000000000000000000000,\n    0x00,\n    0x0100000000000000000000000000000000,\n    0x00,\n    0x010000000000000000000000000000,\n    0x00,\n    0x01000000000000000000000000,\n    0x00,\n    0x0100000000000000000000,\n    0x00,\n    0x010000000000000000,\n    0x00,\n    0x01000000000000,\n    0x00,\n    0x0100000000,\n    0x00,\n    0x010000,\n    0x00,\n    0x01,\n    0x00,\n];\n\nglobal LIMB_VALID_PATH: [Field; 35] = [\n    0x000000000, // 0 0 0 0 0 0 0 0 0\n    0x000000001, // 0 0 0 0 0 0 0 0 1\n    0x000000003, // 0 0 0 0 0 0 0 1 1\n    0x000000007, // 0 0 0 0 0 0 1 1 1\n    0x000000008, // 0 0 0 0 0 1 1 1 1\n    0x000000010, // 0 0 0 0 1 0 0 0 0\n    0x000000020, // 0 0 0 1 0 0 0 0 0\n    0x000000040, // 0 0 1 0 0 0 0 0 0\n    0x000000080, // 0 1 0 0 0 0 0 0 0\n    0x000000100, // 1 0 0 0 0 0 0 0 0\n    0x000000200, // 0 0 0 0 0 0 0 1 0\n    0x000000400, // 0 0 0 0 0 0 1 0 0\n    0x000000800, // 0 0 0 0 0 1 0 0 0\n    0x000001000, // 0 0 0 0 1 0 0 0 0\n    0x000002000, // 0 0 0 1 0 0 0 0 0\n    0x000004000, // 0 0 1 0 0 0 0 0 0\n    0x000008000, // 0 1 0 0 0 0 0 0 0\n    0x000010000, // 0 0 0 0 0 0 0 0 1\n    0x000020000, // 0 0 0 0 0 0 0 1 0\n    0x000040000, // 0 0 0 0 0 0 1 0 0\n    0x000080000, // 0 0 0 0 0 1 0 0 0\n    0x000100000, // 0 0 0 0 1 0 0 0 0\n    0x000200000, // 0 0 0 1 0 0 0 0 0\n    0x000400000, // 0 0 1 0 0 0 0 0 0\n    0x000800000, // 0 1 0 0 0 0 0 0 0\n    0x001000000, // 0 0 0 0 0 0 0 0 1\n    0x002000000, // 0 0 0 0 0 0 0 1 0\n    0x004000000, // 0 0 0 0 0 0 1 0 0\n    0x008000000, // 0 0 0 0 0 1 0 0 0\n    0x010000000, // 0 0 0 0 1 0 0 0 0\n    0x020000000, // 0 0 0 1 0 0 0 0 0\n    0x040000000, // 0 0 1 0 0 0 0 0 0\n    0x080000000, // 0 1 0 0 0 0 0 0 0\n    0x100000000,\n    0x200000000,\n];\n\n// these path variables describe the location of a limb in an array\n// e.g. LAST_LIMB_PATH[5] produces 2^{5-1},\n// which is decomposed into 1 0 0 0 0, and the decompositions turned into an array M\n// M[4] = 1 i.e. the limbs[4] should contain the last limb\n// array extends to 0x200000000 which is 2^33 => 33 31 byte limbs = 1,023 bytes\n// this puts a hard limit on the max size of a key that this program supports.\nglobal LAST_LIMB_PATH: [Field; 36] = [\n    0x000000000, // 0 0 0 0 0 0 0 0 0 <-- edge case because sometimes array index is -1, so we offset by 1 TODO explain better\n    0x000000000, // 0 0 0 0 0 0 0 0 1\n    0x000000001, // 0 0 0 0 0 0 0 1 0\n    0x000000003, // 0 0 0 0 0 0 1 0 0\n    0x000000007, // 0 0 0 0 0 1 0 0 0\n    0x00000000f, // 0 0 0 0 1 0 0 0 0\n    0x00000001f, // 0 0 0 1 0 0 0 0 0\n    0x00000003f, // 0 0 1 0 0 0 0 0 0\n    0x00000007f, // 0 1 0 0 0 0 0 0 0\n    0x0000000ff, // 1 0 0 0 0 0 0 0 0\n    0x0000001ff, // 0 0 0 0 0 0 0 1 0\n    0x0000003ff, // 0 0 0 0 0 0 1 0 0\n    0x0000007ff, // 0 0 0 0 0 1 0 0 0\n    0x000000fff, // 0 0 0 0 1 0 0 0 0\n    0x000001fff, // 0 0 0 1 0 0 0 0 0\n    0x000003fff, // 0 0 1 0 0 0 0 0 0\n    0x000007fff, // 0 1 0 0 0 0 0 0 0\n    0x00000ffff, // 0 0 0 0 0 0 0 0 1\n    0x00001ffff, // 0 0 0 0 0 0 0 1 0\n    0x00003ffff, // 0 0 0 0 0 0 1 0 0\n    0x00007ffff, // 0 0 0 0 0 1 0 0 0\n    0x0000fffff, // 0 0 0 0 1 0 0 0 0\n    0x0001fffff, // 0 0 0 1 0 0 0 0 0\n    0x0003fffff, // 0 0 1 0 0 0 0 0 0\n    0x0007fffff, // 0 1 0 0 0 0 0 0 0\n    0x000ffffff, // 0 0 0 0 0 0 0 0 1\n    0x001ffffff, // 0 0 0 0 0 0 0 1 0\n    0x003ffffff, // 0 0 0 0 0 0 1 0 0\n    0x007ffffff, // 0 0 0 0 0 1 0 0 0\n    0x00fffffff, // 0 0 0 0 1 0 0 0 0\n    0x01fffffff, // 0 0 0 1 0 0 0 0 0\n    0x03fffffff, // 0 0 1 0 0 0 0 0 0\n    0x07fffffff, // 0 1 0 0 0 0 0 0 0\n    0x0ffffffff,\n    0x1ffffffff,\n    0x3ffffffff,\n];\n\nglobal INTEGER_UP_TO_62_IS_GREATER_THAN_31: [Field; 63] = [\n    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n];\nglobal NUM_BYTES_MOD_31_IS_ZERO: [Field; 31] =\n    [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\nglobal BYTE_SHIFT: [Field; 32] = [\n    1,\n    0x1000000000000000000000000000000000000000000000000000000000000,\n    0x10000000000000000000000000000000000000000000000000000000000,\n    0x100000000000000000000000000000000000000000000000000000000,\n    0x1000000000000000000000000000000000000000000000000000000,\n    0x10000000000000000000000000000000000000000000000000000,\n    0x100000000000000000000000000000000000000000000000000,\n    0x1000000000000000000000000000000000000000000000000,\n    0x10000000000000000000000000000000000000000000000,\n    0x100000000000000000000000000000000000000000000,\n    0x1000000000000000000000000000000000000000000,\n    0x10000000000000000000000000000000000000000,\n    0x100000000000000000000000000000000000000,\n    0x1000000000000000000000000000000000000,\n    0x10000000000000000000000000000000000,\n    0x100000000000000000000000000000000,\n    0x1000000000000000000000000000000,\n    0x10000000000000000000000000000,\n    0x100000000000000000000000000,\n    0x1000000000000000000000000,\n    0x10000000000000000000000,\n    0x100000000000000000000,\n    0x1000000000000000000,\n    0x10000000000000000,\n    0x100000000000000,\n    0x1000000000000,\n    0x10000000000,\n    0x100000000,\n    0x1000000,\n    0x10000,\n    0x100,\n    1,\n];\n\nglobal PATH_LOOKUP: [[bool; 5]; 32] = [\n    [false, false, false, false, false],\n    [true, false, false, false, false],\n    [false, true, false, false, false],\n    [true, true, false, false, false],\n    [false, false, true, false, false],\n    [true, false, true, false, false],\n    [false, true, true, false, false],\n    [true, true, true, false, false],\n    [false, false, false, true, false],\n    [true, false, false, true, false],\n    [false, true, false, true, false],\n    [true, true, false, true, false],\n    [false, false, true, true, false],\n    [true, false, true, true, false],\n    [false, true, true, true, false],\n    [true, true, true, true, false],\n    [false, false, false, false, true],\n    [true, false, false, false, true],\n    [false, true, false, false, true],\n    [true, true, false, false, true],\n    [false, false, true, false, true],\n    [true, false, true, false, true],\n    [false, true, true, false, true],\n    [true, true, true, false, true],\n    [false, false, false, true, true],\n    [true, false, false, true, true],\n    [false, true, false, true, true],\n    [true, true, false, true, true],\n    [false, false, true, true, true],\n    [true, false, true, true, true],\n    [false, true, true, true, true],\n    [true, true, true, true, true],\n];\n\n// #############################################################\n// ### METHODS\n// #############################################################\n\n/**\n * slice a field that represents bytes [0, ..., 31] into 5 chunks where:\n * chunk[0] = 1 byte\n * chunk[1] = 2 bytes\n * chunk[2] = 4 bytes\n * chunk[3] = 8 bytes\n * chunk[4] = 16 bytes\n *\n * some of the chunks will describe the bytes [0, ..., num_bytes - 1]\n * some of the chunks will describe the bytes [num_bytes, ..., 31]\n **/\nunconstrained fn __slice_field(f: Field, num_bytes: Field) -> [Field; 5] {\n    let head_path = PATH_LOOKUP[num_bytes];\n    let bytes: [u8; 32] = f.to_be_bytes();\n    let bytes = bytes.map(|b: u8| b as Field);\n\n    let mut chunks: [Field; 5] = [0; 5];\n    let mut head_ptr = 1;\n    let mut tail_ptr = num_bytes + 1;\n    if head_path[0] {\n        chunks[0] = bytes[head_ptr] as Field;\n        head_ptr += 1;\n    } else {\n        chunks[0] = bytes[tail_ptr] as Field;\n        tail_ptr += 1;\n    }\n    if head_path[1] {\n        chunks[1] = bytes[head_ptr] * 0x100 + bytes[head_ptr + 1];\n        head_ptr += 2;\n    } else {\n        chunks[1] = bytes[tail_ptr] * 0x100 + bytes[tail_ptr + 1];\n        tail_ptr += 2;\n    }\n    if head_path[2] {\n        chunks[2] = bytes[head_ptr] * 0x1000000\n            + bytes[head_ptr + 1] * 0x10000\n            + bytes[head_ptr + 2] * 0x100\n            + bytes[head_ptr + 3];\n        head_ptr += 4;\n    } else {\n        chunks[2] = bytes[tail_ptr] * 0x1000000\n            + bytes[tail_ptr + 1] * 0x10000\n            + bytes[tail_ptr + 2] * 0x100\n            + bytes[tail_ptr + 3];\n        tail_ptr += 4;\n    }\n    if head_path[3] {\n        chunks[3] = bytes[head_ptr] * 0x100000000000000\n            + bytes[head_ptr + 1] * 0x1000000000000\n            + bytes[head_ptr + 2] * 0x10000000000\n            + bytes[head_ptr + 3] * 0x100000000\n            + bytes[head_ptr + 4] * 0x1000000\n            + bytes[head_ptr + 5] * 0x10000\n            + bytes[head_ptr + 6] * 0x100\n            + bytes[head_ptr + 7];\n        head_ptr += 8;\n    } else {\n        chunks[3] = bytes[tail_ptr] * 0x100000000000000\n            + bytes[tail_ptr + 1] * 0x1000000000000\n            + bytes[tail_ptr + 2] * 0x10000000000\n            + bytes[tail_ptr + 3] * 0x100000000\n            + bytes[tail_ptr + 4] * 0x1000000\n            + bytes[tail_ptr + 5] * 0x10000\n            + bytes[tail_ptr + 6] * 0x100\n            + bytes[tail_ptr + 7];\n        tail_ptr += 8;\n    }\n    if head_path[4] {\n        chunks[4] = bytes[head_ptr] * 0x1000000000000000000000000000000\n            + bytes[head_ptr + 1] * 0x10000000000000000000000000000\n            + bytes[head_ptr + 2] * 0x100000000000000000000000000\n            + bytes[head_ptr + 3] * 0x1000000000000000000000000\n            + bytes[head_ptr + 4] * 0x10000000000000000000000\n            + bytes[head_ptr + 5] * 0x100000000000000000000\n            + bytes[head_ptr + 6] * 0x1000000000000000000\n            + bytes[head_ptr + 7] * 0x10000000000000000\n            + bytes[head_ptr + 8] * 0x100000000000000\n            + bytes[head_ptr + 9] * 0x1000000000000\n            + bytes[head_ptr + 10] * 0x10000000000\n            + bytes[head_ptr + 11] * 0x100000000\n            + bytes[head_ptr + 12] * 0x1000000\n            + bytes[head_ptr + 13] * 0x10000\n            + bytes[head_ptr + 14] * 0x100\n            + bytes[head_ptr + 15];\n    } else {\n        chunks[4] = bytes[tail_ptr] * 0x1000000000000000000000000000000\n            + bytes[tail_ptr + 1] * 0x10000000000000000000000000000\n            + bytes[tail_ptr + 2] * 0x100000000000000000000000000\n            + bytes[tail_ptr + 3] * 0x1000000000000000000000000\n            + bytes[tail_ptr + 4] * 0x10000000000000000000000\n            + bytes[tail_ptr + 5] * 0x100000000000000000000\n            + bytes[tail_ptr + 6] * 0x1000000000000000000\n            + bytes[tail_ptr + 7] * 0x10000000000000000\n            + bytes[tail_ptr + 8] * 0x100000000000000\n            + bytes[tail_ptr + 9] * 0x1000000000000\n            + bytes[tail_ptr + 10] * 0x10000000000\n            + bytes[tail_ptr + 11] * 0x100000000\n            + bytes[tail_ptr + 12] * 0x1000000\n            + bytes[tail_ptr + 13] * 0x10000\n            + bytes[tail_ptr + 14] * 0x100\n            + bytes[tail_ptr + 15];\n    }\n\n    chunks\n}\n\nunconstrained fn __divmod(numerator: Field, denominator: Field) -> (Field, Field) {\n    let quotient = numerator as u32 / denominator as u32;\n    let remainder = numerator as u32 % denominator as u32;\n    (quotient as Field, remainder as Field)\n}\n\n/**\n * @brief cheeky divmod method for dividing a u16 by 31\n *        we know the quotient will fit into a 14 bit range check which will save us some fractional gates\n **/\nfn divmod_31(numerator: Field) -> (Field, Field) {\n    //@Safety: we check the bit lengths of qf and rf and their relation to the numerator with assertions later\n    let (quotient, remainder) = unsafe { __divmod(numerator, 31) };\n\n    let qf = quotient as Field;\n    let rf = remainder as Field;\n\n    // note: these range checks are because we know the denominator is 31\n    // TODO: need more checks, atm remainder could equal 31\n    qf.assert_max_bit_size::<14>();\n    rf.assert_max_bit_size::<5>();\n\n    // n / d = q\n    // d * q + r = n\n    assert(qf * 31 as Field + rf == numerator as Field);\n    (quotient, remainder)\n}\n\n/**\n * @brief converts a 16 bit value into 16 fake bools (Field elements that are 0 or 1)\n **/\nunconstrained fn decompose(val: Field) -> [Field; 16] {\n    let mut r: [Field; 16] = [0; 16];\n\n    let mut it = val as u32;\n    for i in 0..16 {\n        r[i] = (it & 1) as Field;\n        it >>= 1;\n    }\n    r\n}\n\n// 5 gates?\npub fn get_last_limb_path<let OutputFields: u32>(last_limb_index: Field) -> [Field; OutputFields] {\n    // TODO we offset by 1 explain why (0 byte length produces 0 - 1 which = invalid array index. we just add 1 and increase array length by 1 to compensate)\n    let path = LAST_LIMB_PATH[last_limb_index + 1]; // 2\n    //@Safety: check the comments below\n    let path_valid_bits = unsafe { decompose(path) };\n    let mut path_valid_sum: Field = 0;\n    let mut path_valid_output: [Field; OutputFields] = [0; OutputFields];\n    for i in 0..OutputFields {\n        // we check that the path valid bits are binary\n        assert(path_valid_bits[i] * path_valid_bits[i] - path_valid_bits[i] == 0);\n        path_valid_sum += (path_valid_bits[i] * (1 << i as u8) as Field);\n        path_valid_output[i] = path_valid_bits[i];\n    }\n    // we check that the path valid bits sum to the path\n    assert(path_valid_sum == path);\n    path_valid_output\n}\n\n/**\n * @brief slice a Field `f`, that represents 31-bytes, into two outputs `head, tail`\n *        where `head = f.slice(0, num_bytes)`, `tail = f.slice(num_bytes, 31)`\n * @details cost 46 gates\n **/\npub fn slice_field(f: Field, num_bytes: Field) -> (Field, Field) {\n    //@Safety: we check the bit lengths of the chunks with assertions later\n    let chunks = unsafe { __slice_field(f, num_bytes) };\n    chunks[0].assert_max_bit_size::<8>(); // 1.25 gates\n    chunks[1].assert_max_bit_size::<16>(); // 1.5 gates\n    chunks[2].assert_max_bit_size::<32>(); // 1.75 gates\n    chunks[3].assert_max_bit_size::<64>(); // 3.25 gates\n    chunks[4].assert_max_bit_size::<128>(); // 7.5 gates\n    let mut head: Field = 0;\n    let mut tail: Field = 0;\n\n    // 15 gates\n    let temp = path_multipliers_chunk4[num_bytes];\n    head = chunks[4] * temp;\n    std::as_witness(head);\n    head += chunks[3] * path_multipliers_chunk3[num_bytes];\n    std::as_witness(head);\n    head += chunks[2] * path_multipliers_chunk2[num_bytes];\n    std::as_witness(head);\n    head += chunks[1] * path_multipliers_chunk1[num_bytes];\n    std::as_witness(head);\n    head += chunks[0] * path_multipliers_chunk0[num_bytes];\n\n    // 13 gates\n    tail = chunks[4] * (1 - temp);\n    std::as_witness(tail);\n    tail += chunks[3] * tail_path_multipliers_chunk3[num_bytes];\n    std::as_witness(tail);\n    tail += chunks[2] * tail_path_multipliers_chunk2[num_bytes];\n    std::as_witness(tail);\n    tail += chunks[1] * tail_path_multipliers_chunk1[num_bytes];\n    std::as_witness(tail);\n    tail += chunks[0] * tail_path_multipliers_chunk0[num_bytes];\n    std::as_witness(tail);\n\n    // 3 gates\n    let total = tail + head * BYTE_SHIFT[num_bytes];\n    assert(total == f);\n\n    // total 46.25 gates\n    (head, tail)\n}\n\n/**\n * @brief Given an array of fields that pack 31 bytes, return an array that slices the packed byte array at a given index for a given number of bytes\n * @description Some serious dark black magic nonsense going on here. TODO: document\n **/\npub fn slice_fields<let InputFields: u32, let OutputFields: u32>(\n    data: [Field; InputFields],\n    start_byte: Field,\n    num_bytes: Field,\n) -> [Field; OutputFields] {\n    // 3.5\n    let (start_index, start_mod_31) = divmod_31(start_byte);\n    let num_underflow_bytes = start_mod_31;\n    // 3.5, 7\n    let (num_bytes_div_31, num_bytes_mod_31) = divmod_31(num_bytes);\n\n    // 2, 9\n    let num_bytes_mod_31_is_0 = NUM_BYTES_MOD_31_IS_ZERO[num_bytes_mod_31];\n    // 2, 11\n    let num_bytes_div_31_is_0 = NUM_BYTES_MOD_31_IS_ZERO[num_bytes_div_31];\n\n    // 1, 12\n    let lookup = (-num_bytes_div_31_is_0 * num_bytes) - start_mod_31 + 62;\n    std::as_witness(lookup);\n    // 3, 15\n    let bytes_fit_into_limb = INTEGER_UP_TO_62_IS_GREATER_THAN_31[lookup] * num_bytes_div_31_is_0;\n    std::as_witness(bytes_fit_into_limb);\n\n    // 2, 17\n    let num_unused_bytes_in_start_limb =\n        (num_bytes + start_mod_31 - 31) * bytes_fit_into_limb + (31 - start_mod_31);\n    std::as_witness(num_unused_bytes_in_start_limb);\n    let num_remaining_bytes = num_bytes - num_unused_bytes_in_start_limb;\n\n    // 4.5, 21.5\n    let mut (num_whole_limbs, num_overflow_bytes) = divmod_31(num_remaining_bytes);\n    // 44, 65.5\n    let (_, tail) = slice_field(data[start_index], num_underflow_bytes);\n\n    let mut previous = tail;\n\n    let mut result = [0; OutputFields];\n\n    // 4, 69.5\n    let extra_head_section = INTEGER_UP_TO_62_IS_GREATER_THAN_31[num_overflow_bytes - start_mod_31\n        + 31]\n        * (1 - bytes_fit_into_limb);\n\n    // 1, 70.5\n    let index_of_output_limb: Field = (num_bytes_div_31 - num_bytes_mod_31_is_0);\n    // 5, 75.5\n    let path_valid_output: [Field; OutputFields] = get_last_limb_path(index_of_output_limb);\n\n    // 2, 77.5\n    let tail_shift = BYTE_SHIFT[num_unused_bytes_in_start_limb];\n\n    // 51, 128.5\n    for i in 0..(OutputFields - 1) {\n        // 0\n        let slice_valid = path_valid_output[i];\n        // 1\n        let data_index = (start_index + 1 + i as Field);\n        // 2, 3\n        let input_slice = data[data_index];\n        // 44, 47\n        let (head, tail) = slice_field(input_slice, num_underflow_bytes);\n        // 1, 48\n        let combined = previous * tail_shift + head;\n        // 1, 49\n        result[i] = combined * slice_valid;\n        // 2, 51\n        previous = (tail - previous) * slice_valid + previous;\n    }\n\n    // 2, 130.5\n    let slice_size = (num_bytes + start_mod_31) * bytes_fit_into_limb + num_overflow_bytes;\n\n    // 1, 131.5\n    let use_previous_for_last_limb: Field = extra_head_section + bytes_fit_into_limb;\n\n    // 1, 132.5\n    let mut index_of_overflow_limb = start_index + num_whole_limbs + 1;\n    // 2, 134.5\n    let last_limb_from_data = data[index_of_overflow_limb];\n    // 2, 136.5\n    let slice_source =\n        (previous - last_limb_from_data) * use_previous_for_last_limb + last_limb_from_data;\n\n    // 44, 180.5\n    let (head, _) = slice_field(slice_source, slice_size);\n\n    // 3, 183.5\n    let previous_shift = BYTE_SHIFT[31 - num_overflow_bytes]; // could save 1 gate by making different shift table\n    // 2, 185.5\n    let last_limb_shift = BYTE_SHIFT[num_bytes_mod_31];\n    // 1, 186.5\n    let mut last_limb = (previous * previous_shift);\n    std::as_witness(last_limb);\n    // 1, 187.5\n    last_limb = last_limb * (-use_previous_for_last_limb) + last_limb + head;\n    std::as_witness(last_limb);\n    // 1, 188.5\n    last_limb = last_limb * last_limb_shift;\n    std::as_witness(last_limb);\n\n    let mut path: [Field; OutputFields] = [0; OutputFields];\n    // 2, 190.5\n    for i in 1..OutputFields {\n        path[i] = path_valid_output[i] * -path_valid_output[i - 1] + path_valid_output[i - 1];\n    }\n    // 1, 191.5\n    path[0] = (1 - path_valid_output[0]);\n\n    // 4, 195.5\n    // actual valud = 182, missing gates?\n    for i in 0..OutputFields {\n        // 2\n        result[i] = (last_limb - result[i]) * path[i] + result[i];\n        // std::as_witness(result[i]);\n    }\n    // actual value = 182?\n    result\n}\n\nmod test {\n    use crate::_string_tools::slice_packed_field::slice_field;\n    use crate::_string_tools::slice_packed_field::slice_fields;\n\n    unconstrained fn build_slices_for_test<let N: u32>(\n        bytes: [u8; N],\n        start: u32,\n        num_bytes: u32,\n    ) -> [Field; 3] {\n        let mut slices: [Field; 3] = [0; 3];\n        for i in 0..3 {\n            for k in 0..31 {\n                let mut idx = i * 31 + k;\n                slices[i] *= 0x100;\n                if (idx < num_bytes) {\n                    slices[i] += bytes[idx + start] as Field;\n                }\n            }\n        }\n        slices\n    }\n\n    #[test]\n    fn test_slice_fields_nolength() {\n        let text: [u8; 1405] = \"Charlie is genius, right. He's made from a million pieces of old bubble gum. Imagine that! In the summer of 1976, on his way home from an Alice Cooper concert, Charlie started to melt onto the pavement. It was too hot in L.A., and he melted like a pink bitch. Luckily though, there was Eric Phillips, a local crocodile who dabbled in black magic. He took pity on Charlie and scraped him off the floor with a pair of fish slicers. He poured him into an antique soup ladle, and boarded his magic carpet. Destination: Alaska! Eric Phillips decided to refreeze Charlie, but in his cold-blooded reptilian haste, he refroze him into to the shape of a Hoover. Charlie wasn't fazed though, he just zoomed about the place, sucking up Inuits. Ha ha! Oh. The Inuits didn't mind; they loved it in Charlie's pink, tight warm belly pouch, and they refused to come out. Charlie said, \\\"I'm cool with that,\\\" and set fire to a posh hammer to make it official. he downside was that the Inuits suffocated immediately. It was air-tight in there. Charlie panicked and fired the tiny Inuit bullets into Eric's crocodile peepers. The green shape was frozen. After a quick drink, Charlie stole Eric Phillips's magic carpet and left for Seattle. Charlie was racked with guilt: he'd killed 50 Inuits, noone needs that. He decided to spend the rest of his life putting small hairstyles onto boots, monkey nuts, trumpets and spanners.\"\n            .as_bytes();\n        println(f\"text = {text}\");\n        let mut slices: [Field; 46 + 3] = [0; 46 + 3];\n        for i in 0..46 {\n            for j in 0..31 {\n                let mut idx = i * 31 + j;\n                slices[i] *= 0x100;\n                if (idx < 1405) {\n                    slices[i] += text[idx] as Field;\n                }\n            }\n        }\n        // let start_byte = 26;\n        let num_bytes = 0;\n        let start_byte: u32 = 0;\n        //@Safety: this is a test\n        let mut expected_slices: [Field; 3] =\n            unsafe { build_slices_for_test(text, start_byte, num_bytes) };\n        let result_slices: [Field; 3] =\n            slice_fields(slices, start_byte as Field, num_bytes as Field);\n        assert(result_slices == expected_slices);\n    }\n\n    #[test]\n    fn test_slice_fields() {\n        let text: [u8; 1405] = \"Charlie is genius, right. He's made from a million pieces of old bubble gum. Imagine that! In the summer of 1976, on his way home from an Alice Cooper concert, Charlie started to melt onto the pavement. It was too hot in L.A., and he melted like a pink bitch. Luckily though, there was Eric Phillips, a local crocodile who dabbled in black magic. He took pity on Charlie and scraped him off the floor with a pair of fish slicers. He poured him into an antique soup ladle, and boarded his magic carpet. Destination: Alaska! Eric Phillips decided to refreeze Charlie, but in his cold-blooded reptilian haste, he refroze him into to the shape of a Hoover. Charlie wasn't fazed though, he just zoomed about the place, sucking up Inuits. Ha ha! Oh. The Inuits didn't mind; they loved it in Charlie's pink, tight warm belly pouch, and they refused to come out. Charlie said, \\\"I'm cool with that,\\\" and set fire to a posh hammer to make it official. he downside was that the Inuits suffocated immediately. It was air-tight in there. Charlie panicked and fired the tiny Inuit bullets into Eric's crocodile peepers. The green shape was frozen. After a quick drink, Charlie stole Eric Phillips's magic carpet and left for Seattle. Charlie was racked with guilt: he'd killed 50 Inuits, noone needs that. He decided to spend the rest of his life putting small hairstyles onto boots, monkey nuts, trumpets and spanners.\"\n            .as_bytes();\n        println(f\"text = {text}\");\n        let mut slices: [Field; 46 + 3] = [0; 46 + 3];\n        for i in 0..46 {\n            for j in 0..31 {\n                let mut idx = i * 31 + j;\n                slices[i] *= 0x100;\n                if (idx < 1405) {\n                    slices[i] += text[idx] as Field;\n                }\n            }\n        }\n        // let start_byte = 26;\n        let byte_sizes: [u32; 10] = [0, 1, 5, 30, 31, 32, 47, 61, 62, 90];\n\n        let byte_positions: [u32; 18] =\n            [0, 1, 14, 15, 16, 20, 28, 29, 30, 31, 32, 33, 38, 40, 55, 60, 61, 62];\n\n        for i in 0..10 {\n            let num_bytes = byte_sizes[i];\n            for j in 0..18 {\n                let start_byte: u32 = byte_positions[j];\n                let mut expected_slices: [Field; 3] =\n                //@Safety: this is a test\n                    unsafe { build_slices_for_test(text, start_byte, num_bytes) };\n                let result_slices: [Field; 3] =\n                //@Safety: this is a test\n                    unsafe { slice_fields(slices, start_byte as Field, num_bytes as Field) };\n                assert(result_slices == expected_slices);\n            }\n\n            for j in 0..18 {\n                let start_byte: u32 = text.len() - num_bytes - byte_positions[j];\n                let mut expected_slices: [Field; 3] =\n                //@Safety: this is a test\n                    unsafe { build_slices_for_test(text, start_byte, num_bytes) };\n                let result_slices: [Field; 3] =\n                    slice_fields(slices, start_byte as Field, num_bytes as Field);\n                assert(result_slices == expected_slices);\n            }\n        }\n    }\n\n    #[test]\n    fn test_slice_field() {\n        let input = 0xffeebbccbbaa99887766554433221100112233445566778899aabbccddeeff;\n\n        let input_bytes: [u8; 32] = input.to_be_bytes();\n\n        for i in 0..32 {\n            println(f\"i = {i}\");\n            let num_bytes = i as Field;\n            let (head, tail) = slice_field(input, num_bytes);\n            let mut expected_head: Field = 0;\n            let mut expected_tail: Field = 0;\n            for j in 0..num_bytes as u32 {\n                expected_head *= 0x100;\n                expected_head += input_bytes[j + 1] as Field;\n            }\n            for j in 0..(31 - num_bytes as u32) {\n                expected_tail *= 0x100;\n                expected_tail += input_bytes[j as Field + num_bytes + 1] as Field;\n            }\n            assert(expected_head == head);\n            assert(expected_tail == tail);\n        }\n        let (head, tail) = slice_field(input, 11);\n        let head_expected = 0xffeebbccbbaa9988776655;\n        let tail_expected = 0x4433221100112233445566778899aabbccddeeff;\n        assert(head_expected == head);\n        assert(tail_expected == tail);\n    }\n}\n","path":"/home/runner/nargo/github.com/noir-lang/noir_json_parser/v0.4.0/src/_string_tools/slice_packed_field.nr"},"66":{"source":"use crate::_string_tools::slice_packed_field::slice_fields;\n\nstruct StringChopper<let NeedlePackedFields: u32> {}\n\nimpl<let NeedlePackedFields: u32> StringChopper<NeedlePackedFields> {\n    fn slice_string<let StringBytes: u32, let HaystackPackedFields: u32>(\n        _: Self,\n        haystack: [Field; HaystackPackedFields],\n        start_bytes: Field,\n        num_bytes: Field,\n    ) -> [u8; StringBytes] {\n        let mut parsed_string: [u8; StringBytes] = [0; StringBytes];\n\n        let sliced: [Field; NeedlePackedFields] = slice_fields(haystack, start_bytes, num_bytes);\n\n        let sliced_bytes = sliced.map(|x: Field| {\n            let r: [u8; 31] = x.to_be_bytes();\n            r\n        });\n\n        let num_slices = StringBytes / 31;\n        let overflow = StringBytes % 31;\n        for i in 0..num_slices {\n            for j in 0..31 {\n                parsed_string[i * 31 + j] = sliced_bytes[i][j];\n            }\n        }\n        for j in 0..overflow {\n            parsed_string[num_slices * 31 + j] = sliced_bytes[num_slices][j];\n        }\n        parsed_string\n    }\n}\n","path":"/home/runner/nargo/github.com/noir-lang/noir_json_parser/v0.4.0/src/_string_tools/string_chopper.nr"},"75":{"source":"use crate::_comparison_tools::lt::lt_field_16_bit;\nuse crate::enums::Layer::{ARRAY_LAYER, OBJECT_LAYER};\nuse crate::enums::Token::END_OBJECT_TOKEN;\nuse crate::getters::JSONValue;\nuse crate::json::JSON;\nuse crate::json_entry::JSONEntry;\n\n/**\n * @brief getter methods for extracting object types out of a JSON struct\n **/\nimpl<let NumBytes: u32, let NumPackedFields: u32, let MaxNumTokens: u32, let MaxNumValues: u32, let MaxKeyFields: u32> JSON<NumBytes, NumPackedFields, MaxNumTokens, MaxNumValues, MaxKeyFields> {\n\n    /**\n     * @brief if the root JSON is an object, extract a child object given by `key`\n     * @description returns an Option<JSON> where, if the object exists, the JSON object will have the requested object as its root value  \n     **/\n    fn get_object<let KeyBytes: u32>(self, key: [u8; KeyBytes]) -> Option<Self> {\n        assert(self.layer_type_of_root != ARRAY_LAYER, \"cannot extract array elements via a key\");\n\n        let (exists, key_index) = self.key_exists_impl(key);\n        let entry: JSONEntry = self.json_entries_packed[key_index].into();\n        assert(\n            (entry.entry_type - END_OBJECT_TOKEN) * exists as Field == 0,\n            \"get_object: entry exists but is not an object!\",\n        );\n\n        let mut r = self;\n        r.layer_type_of_root = entry.parent_index;\n        r.root_id = entry.id;\n        r.layer_type_of_root = OBJECT_LAYER;\n        r.root_index_in_transcript = key_index;\n        Option { _is_some: exists, _value: r }\n    }\n\n    /**\n     * @brief if the root JSON is an object, extract a child object given by `key`\n     * @description will revert if the requested object does not exist\n     **/\n    fn get_object_unchecked<let KeyBytes: u32>(self, key: [u8; KeyBytes]) -> Self {\n        assert(self.layer_type_of_root != ARRAY_LAYER, \"cannot extract array elements via a key\");\n        let (entry, key_index) = self.get_json_entry_unchecked_with_key_index(key);\n        let entry: JSONEntry = self.json_entries_packed[key_index].into();\n        assert(\n            entry.entry_type == END_OBJECT_TOKEN,\n            \"get_object: entry exists but is not an object!\",\n        );\n\n        let mut r = self;\n        r.layer_type_of_root = entry.parent_index;\n        r.root_id = entry.id;\n        r.layer_type_of_root = OBJECT_LAYER;\n        r.root_index_in_transcript = key_index;\n        r\n    }\n\n    /**\n     * @brief same as `get_object` for where the key length may be less than KeyBytes\n     **/\n    fn get_object_var<let KeyBytes: u32>(self, key: BoundedVec<u8, KeyBytes>) -> Option<Self> {\n        assert(self.layer_type_of_root != ARRAY_LAYER, \"cannot extract array elements via a key\");\n\n        let (exists, key_index) = self.key_exists_impl_var(key);\n        let entry: JSONEntry = self.json_entries_packed[key_index].into();\n        assert(\n            (entry.entry_type - END_OBJECT_TOKEN) * exists as Field == 0,\n            \"get_object: entry exists but is not an object!\",\n        );\n\n        let mut r = self;\n        r.layer_type_of_root = entry.parent_index;\n        r.root_id = entry.id;\n        r.layer_type_of_root = OBJECT_LAYER;\n        r.root_index_in_transcript = key_index;\n        Option { _is_some: exists, _value: r }\n    }\n\n    /**\n     * @brief same as `get_object_unchecked` for where the key length may be less than KeyBytes\n     **/\n    fn get_object_unchecked_var<let KeyBytes: u32>(self, key: BoundedVec<u8, KeyBytes>) -> Self {\n        assert(self.layer_type_of_root != ARRAY_LAYER, \"cannot extract array elements via a key\");\n        let (entry, key_index) = self.get_json_entry_unchecked_with_key_index_var(key);\n        let entry: JSONEntry = self.json_entries_packed[key_index].into();\n        assert(\n            entry.entry_type == END_OBJECT_TOKEN,\n            \"get_object: entry exists but is not an object!\",\n        );\n\n        let mut r = self;\n        r.layer_type_of_root = entry.parent_index;\n        r.root_id = entry.id;\n        r.layer_type_of_root = OBJECT_LAYER;\n        r.root_index_in_transcript = key_index;\n        r\n    }\n\n    /**\n     * @brief if the root JSON is an array, extract an object given by the position of the target in the source array\n     * @description returns an Option<JSON> where, if the object exists, the JSON object will have the requested object as its root value  \n     **/\n    fn get_object_from_array(self, array_index: Field) -> Option<Self> {\n        assert(\n            self.layer_type_of_root == ARRAY_LAYER,\n            \"can only acceess array elements from array\",\n        );\n\n        let parent_entry: JSONEntry =\n            self.json_entries_packed[self.root_index_in_transcript].into();\n\n        let valid = lt_field_16_bit(array_index, parent_entry.num_children);\n        let entry_index = (parent_entry.child_pointer + array_index) * valid as Field;\n\n        let entry: JSONEntry = self.json_entries_packed[entry_index].into();\n\n        assert(\n            (entry.entry_type - END_OBJECT_TOKEN) * valid as Field == 0,\n            \"get_object_from_array: entry exists but is not an object!\",\n        );\n\n        let mut r = self;\n        r.layer_type_of_root = entry.parent_index;\n        r.root_id = entry.id;\n        r.layer_type_of_root = OBJECT_LAYER;\n        r.root_index_in_transcript = entry_index;\n\n        Option { _is_some: valid, _value: r }\n    }\n\n    /**\n     * @brief if the root JSON is an array, extract an object given by the position of the target in the source array\n     * @description will revert if the object does not exist\n     **/\n    fn get_object_from_array_unchecked(self, array_index: Field) -> Self {\n        assert(\n            self.layer_type_of_root == ARRAY_LAYER,\n            \"can only acceess array elements from array\",\n        );\n\n        let parent_entry: JSONEntry =\n            self.json_entries_packed[self.root_index_in_transcript].into();\n\n        let valid = lt_field_16_bit(array_index, parent_entry.num_children);\n        assert(valid, \"array overflow\");\n        let entry_index = (parent_entry.child_pointer + array_index);\n\n        let entry: JSONEntry = self.json_entries_packed[entry_index].into();\n        assert(\n            entry.entry_type == END_OBJECT_TOKEN,\n            \"get_object_from_array_unchecked: entry exists but is not an object!\",\n        );\n\n        let mut r = self;\n        r.layer_type_of_root = entry.parent_index;\n        r.root_id = entry.id;\n        r.layer_type_of_root = OBJECT_LAYER;\n        r.root_index_in_transcript = entry_index;\n        r\n    }\n}\n\n#[test]\nfn test_object() {\n    let text = \"{ \\\"foo\\\": [ [1,{ \\\"bartholomew tony Harrison III\\\": { \\\"hello\\\": \\\"world\\\" }},3], [[3,4]], [[]], [], { \\\"bar\\\": [\\\"b\\\", \\\"a\\\", \\\"z\\\" ]} ]}\";\n\n    let mut json: JSON<123, 7, 60, 60, 2> = JSON::parse_json_from_string(text);\n\n    let first = json.get_array_unchecked(\"foo\".as_bytes());\n    assert(first.get_length() == 5);\n\n    let A = first.get_array_from_array_unchecked(0);\n    assert(A.get_length() == 3);\n\n    let B = A.get_object_from_array_unchecked(1);\n    let B_alt = A.get_object_from_array(1);\n    assert(B == B_alt.unwrap());\n\n    let C = B.get_object_unchecked(\"bartholomew tony Harrison III\".as_bytes());\n    assert(JSONEntry::from(C.json_entries_packed[C.root_index_in_transcript]).num_children == 1);\n\n    let not_real = B.get_object(\"bartholomew tony Harrison IV\".as_bytes());\n    assert(not_real.is_some() == false);\n\n    let C = B.get_object_unchecked_var(\n        BoundedVec { storage: \"bartholomew tony Harrison III\".as_bytes(), len: 29 },\n    );\n    assert(JSONEntry::from(C.json_entries_packed[C.root_index_in_transcript]).num_children == 1);\n\n    let C = B.get_object_var(\n        BoundedVec { storage: \"bartholomew tony Harrison III\".as_bytes(), len: 28 },\n    );\n    assert(C.is_some() == false);\n\n    let C = B.get_object_var(\n        BoundedVec { storage: \"bartholomew tony Harrison IIIekurfgaeoiurh\".as_bytes(), len: 29 },\n    );\n    assert(C.is_some() == true);\n\n    let second = first.get_object_from_array_unchecked(4);\n\n    let third = second.get_array_unchecked(\"bar\".as_bytes());\n\n    let E: BoundedVec<u8, 1> = third.get_string_from_array_unchecked(0);\n    let F: BoundedVec<u8, 1> = third.get_string_from_array_unchecked(1);\n    let G: BoundedVec<u8, 1> = third.get_string_from_array_unchecked(2);\n    assert(E.storage == \"b\".as_bytes());\n    assert(F.storage == \"a\".as_bytes());\n    assert(G.storage == \"z\".as_bytes());\n}\n","path":"/home/runner/nargo/github.com/noir-lang/noir_json_parser/v0.4.0/src/get_object.nr"},"76":{"source":"use crate::_comparison_tools::lt::lt_field_16_bit;\nuse crate::enums::Layer::{ARRAY_LAYER, OBJECT_LAYER};\nuse crate::enums::Token::STRING_TOKEN;\nuse crate::getters::JSONValue;\nuse crate::json::JSON;\nuse crate::json_entry::JSONEntry;\nuse crate::json_tables::{\n    ESCAPE_SEQUENCE_END_CHARS, ESCAPE_SEQUENCE_REPLACEMENT, ESCAPE_SEQUENCE_START_CHARS,\n};\n\nunconstrained fn to_u8(f: Field) -> u8 {\n    f as u8\n}\nfn process_escape_sequences<let N: u32>(input: BoundedVec<u8, N>) -> BoundedVec<u8, N> {\n    let string = input.storage;\n    let mut result: [u8; N] = [0; N];\n    let mut result_ptr = 0;\n    let mut character = string[0];\n    let mut skip = 0;\n    let mut cached_byte: Field = 0;\n    for i in 1..N {\n        let next_character = string[i];\n        let escape_sequence_start_candidate = ESCAPE_SEQUENCE_START_CHARS[character];\n        let escape_sequence_end_candidate = ESCAPE_SEQUENCE_END_CHARS[next_character];\n        let escape_sequence_replacement_candidate = ESCAPE_SEQUENCE_REPLACEMENT[next_character];\n        let mut is_escape_sequence =\n            (escape_sequence_start_candidate & escape_sequence_end_candidate) as Field;\n        is_escape_sequence = is_escape_sequence * (1 - skip);\n        let mut written_byte = is_escape_sequence * escape_sequence_replacement_candidate as Field\n            + (1 - is_escape_sequence) * character as Field;\n\n        written_byte = written_byte * (1 - skip) + cached_byte * skip;\n        //@Safety: we assert that the casting is done correctly\n        let written_byte_u8 = unsafe { to_u8(written_byte) };\n        assert(written_byte_u8 as Field == written_byte);\n\n        result[result_ptr] = written_byte_u8;\n        result_ptr += (1 - is_escape_sequence);\n        cached_byte = written_byte;\n        skip = is_escape_sequence;\n        character = next_character;\n    }\n\n    let written_byte: Field = character as Field * (1 - skip) + cached_byte * skip;\n    //@Safety: we assert that the casting is done correctly\n    let written_byte_u8 = unsafe { to_u8(written_byte) };\n    assert(written_byte_u8 as Field == written_byte);\n    result[result_ptr] = written_byte_u8;\n    result_ptr += 1;\n\n    let num_removed_chars = N as Field - result_ptr;\n    let new_length = input.len as Field - num_removed_chars;\n    BoundedVec { storage: result, len: new_length as u32 }\n}\n\n#[test]\nfn test_process_escape_sequence_2() {\n    let text = BoundedVec::from_array(\"\\\\\\\"Ade\\\\nel Solangi\\\\\\\"\".as_bytes());\n    let mut expected = text;\n    expected = BoundedVec::from_array(\"\\\"Ade\\nel Solangi\\\"\".as_bytes());\n    let result: BoundedVec<u8, 19> = process_escape_sequences(text);\n    assert(result == expected);\n}\n#[test]\nfn test_process_escape_sequence() {\n    // end with escape sequence\n    {\n        let text = BoundedVec::from_array(\"the qulick brown fox said \\\\\\\"why hello there\\\\\\\"  \\\\\\\\\"\n            .as_bytes());\n\n        let expected: BoundedVec<u8, 49> = BoundedVec::from_array(\n            \"the qulick brown fox said \\\"why hello there\\\"  \\\\\".as_bytes(),\n        );\n\n        let result: BoundedVec<u8, 49> = process_escape_sequences(text);\n\n        assert(result == expected);\n    }\n    // end without escape sequence\n    {\n        let text = BoundedVec::from_array(\n            \"\\\\\\\"he qulick brown fox said \\\\n \\\\r \\\\\\\"why hello there\\\\\\\"  \\\\\\\\\".as_bytes(),\n        );\n\n        let expected: BoundedVec<u8, 56> = BoundedVec::from_array(\n            \"\\\"he qulick brown fox said \\n \\r \\\"why hello there\\\"  \\\\\".as_bytes(),\n        );\n\n        let result = process_escape_sequences(text);\n\n        assert(result == expected);\n    }\n}\n\n/**\n * @brief getter methods for extracting string values out of a JSON struct\n * @note returned strings will have escape sequences converted into the relevant ASCII characters.\n *       If you want to avoid this, use `get_value` instead of `get_string`\n **/\nimpl<let NumBytes: u32, let NumPackedFields: u32, let MaxNumTokens: u32, let MaxNumValues: u32, let MaxKeyFields: u32> JSON<NumBytes, NumPackedFields, MaxNumTokens, MaxNumValues, MaxKeyFields> {\n\n    /**\n     * @brief if the root JSON is an object, extract a string given by `key`\n     * @description returns an Option<BoundedVec> which will be null if the key does not exist\n     * @note the `StringBytes` parameter defines the maximum allowable length of the returned string\n     **/\n    fn get_string<let KeyBytes: u32, let StringBytes: u32>(\n        self,\n        key: [u8; KeyBytes],\n    ) -> Option<BoundedVec<u8, StringBytes>> {\n        let (exists, entry) = self.get_json_entry(key);\n        assert(\n            (entry.entry_type - STRING_TOKEN) * exists as Field == 0,\n            \"get_string: entry exists but is not a string!\",\n        );\n        let mut parsed_string: [u8; StringBytes] = self.extract_string_entry(entry);\n\n        let parsed_string: BoundedVec<u8, StringBytes> = process_escape_sequences(\n            BoundedVec { storage: parsed_string, len: entry.json_length as u32 },\n        );\n        Option { _is_some: exists, _value: parsed_string }\n    }\n\n    /**\n     * @brief if the root JSON is an object, extract a string given by `key`\n     * @description will revert if the string does not exist\n     * @note the `StringBytes` parameter defines the maximum allowable length of the returned string\n     **/\n    fn get_string_unchecked<let KeyBytes: u32, let StringBytes: u32>(\n        self,\n        key: [u8; KeyBytes],\n    ) -> BoundedVec<u8, StringBytes> {\n        let entry = self.get_json_entry_unchecked(key);\n        assert(\n            entry.entry_type == STRING_TOKEN,\n            \"get_string_unchecked: entry exists but is not a string!\",\n        );\n        let parsed_string =\n            BoundedVec { storage: self.extract_string_entry(entry), len: entry.json_length as u32 };\n        process_escape_sequences(parsed_string)\n    }\n\n    /**\n     * @brief same as `get_string` for where the key length may be less than KeyBytes\n     **/\n    fn get_string_var<let KeyBytes: u32, let StringBytes: u32>(\n        self,\n        key: BoundedVec<u8, KeyBytes>,\n    ) -> Option<BoundedVec<u8, StringBytes>> {\n        let (exists, entry) = self.get_json_entry_var(key);\n        assert(\n            (entry.entry_type - STRING_TOKEN) * exists as Field == 0,\n            \"get_string: entry exists but is not a string!\",\n        );\n        let mut parsed_string: [u8; StringBytes] = self.extract_string_entry(entry);\n        let parsed_string: BoundedVec<u8, StringBytes> = process_escape_sequences(\n            BoundedVec { storage: parsed_string, len: entry.json_length as u32 },\n        );\n        Option { _is_some: exists, _value: parsed_string }\n    }\n\n    /**\n     * @brief same as `get_string_unchecked` for where the key length may be less than KeyBytes\n     **/\n    fn get_string_unchecked_var<let KeyBytes: u32, let StringBytes: u32>(\n        self,\n        key: BoundedVec<u8, KeyBytes>,\n    ) -> BoundedVec<u8, StringBytes> {\n        let entry = self.get_json_entry_unchecked_var(key);\n        assert(\n            entry.entry_type == STRING_TOKEN,\n            \"get_string_unchecked: entry exists but is not a string!\",\n        );\n        let parsed_string =\n            BoundedVec { storage: self.extract_string_entry(entry), len: entry.json_length as u32 };\n        process_escape_sequences(parsed_string)\n    }\n\n    /**\n     * @brief if the root JSON is an array, extract a string given by the position of the target in the source array\n     * @description returns an Option<BoundedVec> which will be null if the string does not exist\n     **/\n    fn get_string_from_array<let StringBytes: u32>(\n        self,\n        array_index: Field,\n    ) -> Option<BoundedVec<u8, StringBytes>> {\n        assert(\n            self.layer_type_of_root == ARRAY_LAYER,\n            \"can only acceess array elements from array\",\n        );\n\n        let parent_entry: JSONEntry =\n            self.json_entries_packed[self.root_index_in_transcript].into();\n\n        let valid = lt_field_16_bit(array_index, parent_entry.num_children);\n        let entry_index = (parent_entry.child_pointer + array_index) * valid as Field;\n\n        let entry: JSONEntry = self.json_entries_packed[entry_index].into();\n\n        assert(\n            (entry.entry_type - STRING_TOKEN) * valid as Field == 0,\n            \"get_array_element_as_string: entry exists but is not a string!\",\n        );\n\n        let mut parsed_string: [u8; StringBytes] = self.extract_string_entry(entry);\n        let parsed_string: BoundedVec<u8, StringBytes> = process_escape_sequences(\n            BoundedVec { storage: parsed_string, len: entry.json_length as u32 },\n        );\n        Option { _is_some: valid, _value: parsed_string }\n    }\n\n    /**\n     * @brief if the root JSON is an array, extract a string given by the position of the target in the source array\n     * @description will revert if the string does not exist\n     **/\n    fn get_string_from_array_unchecked<let StringBytes: u32>(\n        self,\n        array_index: Field,\n    ) -> BoundedVec<u8, StringBytes> {\n        assert(\n            self.layer_type_of_root == ARRAY_LAYER,\n            \"can only acceess array elements from array\",\n        );\n\n        let parent_entry: JSONEntry =\n            self.json_entries_packed[self.root_index_in_transcript].into();\n\n        let valid = lt_field_16_bit(array_index, parent_entry.num_children);\n        assert(valid, \"array overflow\");\n        let entry_index = (parent_entry.child_pointer + array_index);\n\n        let entry: JSONEntry = self.json_entries_packed[entry_index].into();\n\n        assert(\n            entry.entry_type == STRING_TOKEN,\n            \"get_string_from_array_unchecked: entry exists but is not a string!\",\n        );\n\n        let mut parsed_string: [u8; StringBytes] = self.extract_string_entry(entry);\n        process_escape_sequences(\n            BoundedVec { storage: parsed_string, len: entry.json_length as u32 },\n        )\n    }\n\n    /**\n     * @brief if the root JSON is an object, get a nested string out of the JSON, which may be several keys deep\n     **/\n    fn get_string_from_path<let KeyBytes: u32, let StringBytes: u32, let PathDepth: u32>(\n        self,\n        keys: [BoundedVec<u8, KeyBytes>; PathDepth],\n    ) -> Option<BoundedVec<u8, StringBytes>> {\n        let mut target = self;\n        let mut valid = true;\n        for i in 0..PathDepth - 1 {\n            let child = self.get_object_var(keys[i]);\n\n            target = child._value;\n            valid = valid & child._is_some;\n        }\n\n        let mut final = target.get_string_var(keys[PathDepth - 1]);\n        final._is_some = final._is_some & valid;\n        final\n    }\n\n    /**\n     * @brief if the root JSON is an object, extract a JSONValue given by `key`\n     * @description returns an Option<JSONValue> which will be null if the key does not exist\n     * @note the `StringBytes` parameter defines the maximum allowable length of the returned value\n     **/\n    fn get_value<let KeyBytes: u32, let StringBytes: u32>(\n        self,\n        key: [u8; KeyBytes],\n    ) -> Option<JSONValue<StringBytes>> {\n        let (exists, entry) = self.get_json_entry(key);\n        let mut parsed_string: [u8; StringBytes] = self.extract_string_entry(entry);\n\n        let parsed_string: BoundedVec<u8, StringBytes> =\n            BoundedVec { storage: parsed_string, len: entry.json_length as u32 };\n        Option {\n            _is_some: exists,\n            _value: JSONValue { value: parsed_string, value_type: entry.entry_type },\n        }\n    }\n\n    /**\n     * @brief if the root JSON is an object, extract a JSONValue given by `key`\n     * @description will revert if the string does not exist\n     * @note the `StringBytes` parameter defines the maximum allowable length of the returned value\n     **/\n    fn get_value_unchecked<let KeyBytes: u32, let StringBytes: u32>(\n        self,\n        key: [u8; KeyBytes],\n    ) -> JSONValue<StringBytes> {\n        let entry = self.get_json_entry_unchecked(key);\n        JSONValue {\n            value: BoundedVec {\n                len: entry.json_length as u32,\n                storage: self.extract_string_entry(entry),\n            },\n            value_type: entry.entry_type,\n        }\n    }\n\n    /**\n     * @brief same as `get_value` for where the key length may be less than KeyBytes\n     **/\n    fn get_value_var<let KeyBytes: u32, let StringBytes: u32>(\n        self,\n        key: BoundedVec<u8, KeyBytes>,\n    ) -> Option<JSONValue<StringBytes>> {\n        let (exists, entry) = self.get_json_entry_var(key);\n        let mut parsed_string: [u8; StringBytes] = self.extract_string_entry(entry);\n\n        let parsed_string: BoundedVec<u8, StringBytes> =\n            BoundedVec { storage: parsed_string, len: entry.json_length as u32 };\n        Option {\n            _is_some: exists,\n            _value: JSONValue { value: parsed_string, value_type: entry.entry_type },\n        }\n    }\n\n    /**\n     * @brief same as `get_value_unchecked` for where the key length may be less than KeyBytes\n     **/\n    fn get_value_unchecked_var<let KeyBytes: u32, let StringBytes: u32>(\n        self,\n        key: BoundedVec<u8, KeyBytes>,\n    ) -> JSONValue<StringBytes> {\n        let entry = self.get_json_entry_unchecked_var(key);\n        JSONValue {\n            value: BoundedVec {\n                len: entry.json_length as u32,\n                storage: self.extract_string_entry(entry),\n            },\n            value_type: entry.entry_type,\n        }\n    }\n\n    /**\n     * @brief if the root JSON is an array, extract a value given by the position of the target in the source array\n     * @description returns an Option<BoundedVec> which will be null if the value does not exist\n     **/\n    fn get_value_from_array<let StringBytes: u32>(\n        self,\n        array_index: Field,\n    ) -> Option<JSONValue<StringBytes>> {\n        assert(\n            self.layer_type_of_root == ARRAY_LAYER,\n            \"can only acceess array elements from array\",\n        );\n\n        let parent_entry: JSONEntry =\n            self.json_entries_packed[self.root_index_in_transcript].into();\n\n        let valid = lt_field_16_bit(array_index, parent_entry.num_children);\n        let entry_index = (parent_entry.child_pointer + array_index) * valid as Field;\n\n        let entry: JSONEntry = self.json_entries_packed[entry_index].into();\n\n        assert(\n            (entry.entry_type - STRING_TOKEN) * valid as Field == 0,\n            \"get_array_element_as_string: entry exists but is not a string!\",\n        );\n\n        let mut parsed_string: [u8; StringBytes] = self.extract_string_entry(entry);\n        Option {\n            _is_some: valid,\n            _value: JSONValue {\n                value: BoundedVec { len: entry.json_length as u32, storage: parsed_string },\n                value_type: entry.entry_type,\n            },\n        }\n    }\n\n    /**\n     * @brief if the root JSON is an array, extract a value given by the position of the target in the source array\n     * @description will revert if the value does not exist\n     **/\n    fn get_value_from_array_unchecked<let StringBytes: u32>(\n        self,\n        array_index: Field,\n    ) -> JSONValue<StringBytes> {\n        assert(\n            self.layer_type_of_root == ARRAY_LAYER,\n            \"can only acceess array elements from array\",\n        );\n\n        let parent_entry: JSONEntry =\n            self.json_entries_packed[self.root_index_in_transcript].into();\n\n        let valid = lt_field_16_bit(array_index, parent_entry.num_children);\n        assert(valid, \"array overflow\");\n        let entry_index = (parent_entry.child_pointer + array_index);\n\n        let entry: JSONEntry = self.json_entries_packed[entry_index].into();\n\n        assert(\n            entry.entry_type == STRING_TOKEN,\n            \"get_string_from_array_unchecked: entry exists but is not a string!\",\n        );\n\n        let mut parsed_string: [u8; StringBytes] = self.extract_string_entry(entry);\n        JSONValue {\n            value: BoundedVec { len: entry.json_length as u32, storage: parsed_string },\n            value_type: entry.entry_type,\n        }\n    }\n\n    /**\n     * @brief if the root JSON is an object, get a nested value out of the JSON, which may be several keys deep\n     **/\n    fn get_value_from_path<let KeyBytes: u32, let StringBytes: u32, let PathDepth: u32>(\n        self,\n        keys: [BoundedVec<u8, KeyBytes>; PathDepth],\n    ) -> Option<JSONValue<StringBytes>> {\n        let mut target = self;\n        let mut valid = true;\n        for i in 0..PathDepth - 1 {\n            let child = self.get_object_var(keys[i]);\n\n            target = child._value;\n            valid = valid & child._is_some;\n        }\n\n        let mut final = target.get_value_var(keys[PathDepth - 1]);\n        final._is_some = final._is_some & valid;\n\n        final\n    }\n}\n","path":"/home/runner/nargo/github.com/noir-lang/noir_json_parser/v0.4.0/src/get_string.nr"},"77":{"source":"use crate::_comparison_tools::lt::{assert_gt_240_bit, assert_lt_240_bit, lt_field_16_bit};\nuse crate::_string_tools::slice_packed_field::slice_fields;\nuse crate::_string_tools::string_chopper::StringChopper;\nuse crate::enums::Layer::{ARRAY_LAYER, OBJECT_LAYER};\nuse crate::enums::Token::{LITERAL_TOKEN, NUMERIC_TOKEN, STRING_TOKEN};\nuse crate::json::JSON;\nuse crate::json::JSONValue;\nuse crate::json_entry::JSONEntry;\nuse crate::keyhash::ByteHasher;\nuse crate::keymap::KeyIndexData;\nuse crate::transcript_entry::TranscriptEntry;\n/**\n * @brief records data used to reason about whether a key exists in a json blob\n **/\npub struct KeySearchResult {\n    found: bool, // does the key exist?\n    target_lt_smallest_entry: bool, // is the target keyhash smaller than the smallest keyhash in self.key_hashes?\n    target_gt_largest_entry: bool, // is the target keyhash larger than the largest keyhash in self.key_hashes?\n    lhs_index: Field, // either the index of the key being searched for, or the index of the keyhash in self.key_hashes that is closest to keyhash (hash > lhs_index_hash)\n    rhs_index: Field, // either the index of the key being searched for, or the index of the keyhash in self.key_hashes that is closest to keyhash (hash < rhs_index_hash)\n}\n\n/**\n * @brief helper methods for extracting data out of a processed JSON object\n **/\nimpl<let NumBytes: u32, let NumPackedFields: u32, let MaxNumTokens: u32, let MaxNumValues: u32, let MaxKeyFields: u32> JSON<NumBytes, NumPackedFields, MaxNumTokens, MaxNumValues, MaxKeyFields> {\n\n    /**\n     * @brief If the root JSON is an object, extract a JSONEntry that describes an array, object or value that maps to a given key\n     * @description returns an Option<JSONEntry> which will be null if the entry does not exist\n     **/\n    fn get_json_entry<let KeyBytes: u32>(self, key: [u8; KeyBytes]) -> (bool, JSONEntry) {\n        // let key_index = self.find_key_in_map(keyhash);\n        // assert(self.key_hashes[key_index] == keyhash);\n        assert(self.layer_type_of_root != ARRAY_LAYER, \"cannot extract array elements via a key\");\n\n        let (exists, key_index) = self.key_exists_impl(key);\n        let entry: JSONEntry = self.json_entries_packed[key_index].into();\n        (exists, entry)\n    }\n\n    /**\n     * @brief If the root JSON is an object, extract a JSONEntry that describes an array, object or value that maps to a given key\n     * @note will revert if the key does not exist\n     **/\n    fn get_json_entry_unchecked<let KeyBytes: u32>(self, key: [u8; KeyBytes]) -> JSONEntry {\n        assert(self.layer_type_of_root != ARRAY_LAYER, \"cannot extract array elements via a key\");\n\n        let hasher: ByteHasher<MaxKeyFields> = ByteHasher {};\n        let keyhash = hasher.get_keyhash_var(key, 0, KeyBytes);\n        let two_pow_216 = 0x100000000000000000000000000000000000000000000000000000000;\n\n        let keyhash = keyhash + self.root_id * two_pow_216;\n\n        //@Safety: The assertion below checks that the keyhash is stored in the the index returned by the unconstrained function\n        let key_index = unsafe { self.find_key_in_map(keyhash) };\n\n        assert(self.key_hashes[key_index] == keyhash, \"get_json_entry_unchecked: key not found\");\n        let entry: JSONEntry = self.json_entries_packed[key_index].into();\n\n        entry\n    }\n\n    /**\n     * @brief same as `get_json_entry` but the key length may be less than KeyBytes\n     **/\n    fn get_json_entry_var<let KeyBytes: u32>(\n        self,\n        key: BoundedVec<u8, KeyBytes>,\n    ) -> (bool, JSONEntry) {\n        // let key_index = self.find_key_in_map(keyhash);\n        // assert(self.key_hashes[key_index] == keyhash);\n        assert(self.layer_type_of_root != ARRAY_LAYER, \"cannot extract array elements via a key\");\n\n        let (exists, key_index) = self.key_exists_impl_var(key);\n        let entry: JSONEntry = self.json_entries_packed[key_index].into();\n        (exists, entry)\n    }\n\n    /**\n     * @brief same as `get_json_entry_unchecked` but the key length may be less than KeyBytes\n     **/\n    fn get_json_entry_unchecked_var<let KeyBytes: u32>(\n        self,\n        key: BoundedVec<u8, KeyBytes>,\n    ) -> JSONEntry {\n        assert(self.layer_type_of_root != ARRAY_LAYER, \"cannot extract array elements via a key\");\n\n        let hasher: ByteHasher<MaxKeyFields> = ByteHasher {};\n        let keyhash = hasher.get_keyhash_var(key.storage, 0, key.len as u32);\n        let two_pow_216 = 0x100000000000000000000000000000000000000000000000000000000;\n\n        let keyhash = keyhash + self.root_id * two_pow_216;\n\n        //@Safety: The assertion below checks that the keyhash is stored in the the index returned by the unconstrained function\n        let key_index = unsafe { self.find_key_in_map(keyhash) };\n\n        assert(self.key_hashes[key_index] == keyhash, \"get_json_entry_unchecked: key not found\");\n        let entry: JSONEntry = self.json_entries_packed[key_index].into();\n\n        entry\n    }\n\n    /**\n     * @brief same as `get_json_entry_unchecked_var` but also returns the position of the JSONEntry in `self.json_entries_packed`\n     **/\n    fn get_json_entry_unchecked_with_key_index<let KeyBytes: u32>(\n        self,\n        key: [u8; KeyBytes],\n    ) -> (JSONEntry, Field) {\n        assert(self.layer_type_of_root != ARRAY_LAYER, \"cannot extract array elements via a key\");\n\n        let hasher: ByteHasher<MaxKeyFields> = ByteHasher {};\n        let keyhash = hasher.get_keyhash_var(key, 0, KeyBytes);\n        let two_pow_216 = 0x100000000000000000000000000000000000000000000000000000000;\n\n        let keyhash = keyhash + self.root_id * two_pow_216;\n\n        //@Safety: The assertion below checks that the keyhash is stored in the the index returned by the unconstrained function\n        let key_index = unsafe { self.find_key_in_map(keyhash) };\n\n        assert(self.key_hashes[key_index] == keyhash, \"get_json_entry_unchecked: key not found\");\n        let entry: JSONEntry = self.json_entries_packed[key_index].into();\n\n        (entry, key_index)\n    }\n    /**\n     * @brief same as `get_json_entry_unchecked_var` but also returns the position of the JSONEntry in `self.json_entries_packed`\n     **/\n    fn get_json_entry_unchecked_with_key_index_var<let KeyBytes: u32>(\n        self,\n        key: BoundedVec<u8, KeyBytes>,\n    ) -> (JSONEntry, Field) {\n        assert(self.layer_type_of_root != ARRAY_LAYER, \"cannot extract array elements via a key\");\n\n        let hasher: ByteHasher<MaxKeyFields> = ByteHasher {};\n        let keyhash = hasher.get_keyhash_var(key.storage, 0, key.len as u32);\n        let two_pow_216 = 0x100000000000000000000000000000000000000000000000000000000;\n\n        let keyhash = keyhash + self.root_id * two_pow_216;\n\n        //@Safety: The assertion below checks that the keyhash is stored in the the index returned by the unconstrained function\n        let key_index = unsafe { self.find_key_in_map(keyhash) };\n\n        assert(self.key_hashes[key_index] == keyhash, \"get_json_entry_unchecked: key not found\");\n        let entry: JSONEntry = self.json_entries_packed[key_index].into();\n\n        (entry, key_index)\n    }\n\n    /**\n     * @brief helper method that will extract an array of bytes that describes the value associated with a JSONEntry object\n     * @description e.g. if the JSONEntry describes \"foo\" : \"bar\" in the JSON, `extract_string_entry` will return \"foo\"\n     **/\n    fn extract_string_entry<let StringBytes: u32>(self, entry: JSONEntry) -> [u8; StringBytes] {\n        // todo can we make this faster? witness gen for this method is slow\n        // TODO: document that StringBytes parameter includes non-escaped characters\n        assert(\n            lt_field_16_bit(entry.json_length, StringBytes as Field + 1),\n            \"get_string, string size is larger than StringBytes\",\n        );\n\n        let mut result: [u8; StringBytes] = [0; StringBytes];\n        if (StringBytes <= 31) {\n            let s: StringChopper<1> = StringChopper {};\n            result = s.slice_string(self.json_packed, entry.json_pointer, entry.json_length);\n        } else if (StringBytes <= 62) {\n            let s: StringChopper<2> = StringChopper {};\n            result = s.slice_string(self.json_packed, entry.json_pointer, entry.json_length);\n        } else if (StringBytes <= 93) {\n            let s: StringChopper<3> = StringChopper {};\n            result = s.slice_string(self.json_packed, entry.json_pointer, entry.json_length);\n        } else if (StringBytes <= 124) {\n            let s: StringChopper<4> = StringChopper {};\n            result = s.slice_string(self.json_packed, entry.json_pointer, entry.json_length);\n        } else if (StringBytes <= 155) {\n            let s: StringChopper<5> = StringChopper {};\n            result = s.slice_string(self.json_packed, entry.json_pointer, entry.json_length);\n        } else if (StringBytes <= 186) {\n            let s: StringChopper<6> = StringChopper {};\n            result = s.slice_string(self.json_packed, entry.json_pointer, entry.json_length);\n        } else if (StringBytes <= 217) {\n            let s: StringChopper<7> = StringChopper {};\n            result = s.slice_string(self.json_packed, entry.json_pointer, entry.json_length);\n        } else if (StringBytes <= 248) // 8\n        {\n            let s: StringChopper<8> = StringChopper {};\n            result = s.slice_string(self.json_packed, entry.json_pointer, entry.json_length);\n        } else if (StringBytes <= 496) // 16\n        {\n            let s: StringChopper<16> = StringChopper {};\n            result = s.slice_string(self.json_packed, entry.json_pointer, entry.json_length);\n        } else if (StringBytes <= 992) // 32\n        {\n            let s: StringChopper<32> = StringChopper {};\n            result = s.slice_string(self.json_packed, entry.json_pointer, entry.json_length);\n        } else if (StringBytes <= 1984) {\n            let s: StringChopper<64> = StringChopper {};\n            result = s.slice_string(self.json_packed, entry.json_pointer, entry.json_length);\n        } else if (StringBytes <= 3968) {\n            let s: StringChopper<128> = StringChopper {};\n            result = s.slice_string(self.json_packed, entry.json_pointer, entry.json_length);\n        } else if (StringBytes <= 7936) {\n            let s: StringChopper<256> = StringChopper {};\n            result = s.slice_string(self.json_packed, entry.json_pointer, entry.json_length);\n        } else if (StringBytes <= 15872) {\n            let s: StringChopper<512> = StringChopper {};\n            result = s.slice_string(self.json_packed, entry.json_pointer, entry.json_length);\n        } else if (StringBytes <= 31774) {\n            let s: StringChopper<1024> = StringChopper {};\n            result = s.slice_string(self.json_packed, entry.json_pointer, entry.json_length);\n        } else {\n            // max 16 bits = 65535 = 2115 31-byte slices\n            let s: StringChopper<2115> = StringChopper {};\n            result = s.slice_string(self.json_packed, entry.json_pointer, entry.json_length);\n        }\n        result\n    }\n\n    unconstrained fn find_key_in_map(self, target: Field) -> Field {\n        let mut found_index: Field = 0;\n        let mut found: bool = false;\n        for i in 0..MaxNumValues {\n            let key_hash = self.key_hashes[i];\n            if (key_hash == target) {\n                found_index = i as Field;\n                found = true;\n                break;\n            }\n        }\n        assert(found, \"find_key_in_map, key not found\");\n        found_index\n    }\n\n    /**\n     * @brief figures out if `target` exists as a key in `self.key_hashes`\n     * @details if `target` does not exist, we return the two indicies of adjacent\n     *          entries in `self.key_hashes`, lhs_index, rhs_index, where\n     *          lhs_index < key_hash < rhs_index\n     **/\n    unconstrained fn search_for_key_in_map(self, target: Field) -> KeySearchResult {\n        let mut found_index: Field = 0;\n        let mut found: bool = false;\n\n        let mut lhs_maximum: Field = 0;\n        let mut rhs_minimum: Field = -1;\n        let mut lhs_maximum_index: Field = 0;\n        let mut rhs_minimum_index: Field = 0;\n        for i in 0..MaxNumValues {\n            let key_hash = self.key_hashes[i];\n            if (key_hash == target) {\n                found_index = i as Field;\n                found = true;\n                break;\n            } else {\n                if key_hash.lt(target) & (lhs_maximum.lt(key_hash)) {\n                    lhs_maximum = key_hash;\n                    lhs_maximum_index = i as Field;\n                }\n                if (target.lt(key_hash)) & (key_hash.lt(rhs_minimum)) {\n                    rhs_minimum = key_hash;\n                    rhs_minimum_index = i as Field;\n                }\n            }\n        }\n        let target_lt_smallest_entry = target.lt(self.key_hashes[0]);\n        let target_gt_largest_entry = self.key_hashes[MaxNumValues - 1].lt(target);\n\n        let result_not_first_or_last =\n            !target_lt_smallest_entry & !target_gt_largest_entry & !found;\n\n        let mut lhs_index = result_not_first_or_last as Field * lhs_maximum_index;\n        let mut rhs_index = result_not_first_or_last as Field * rhs_minimum_index;\n\n        // if target_lt_smallest_entry, rhs_index = 0\n        // if target_gt_largest_entry, lhs_index = TranscriptEntries - 1\n        rhs_index = rhs_index * (1 - target_lt_smallest_entry as Field);\n\n        // we rely here on the fact that target_gt_largest_entry and result_not_first_or_last are mutually exclusive\n        lhs_index = lhs_index + target_gt_largest_entry as Field * (MaxNumValues as Field - 1);\n\n        // If target is FOUND, we want the following:\n        // keyhash[target_index] - 1 < hash < keyhash[target_index] + 1\n        lhs_index = lhs_index + found as Field * found_index;\n        rhs_index = rhs_index + found as Field * found_index;\n\n        KeySearchResult {\n            found,\n            target_lt_smallest_entry,\n            target_gt_largest_entry,\n            lhs_index,\n            rhs_index,\n        }\n    }\n\n    /**\n     * @brief returns a bool that describes whether a given key exists at the root of the JSON\n     **/\n    fn key_exists<let KeyBytes: u32>(self, key: BoundedVec<u8, KeyBytes>) -> bool {\n        self.key_exists_impl_var(key).0\n    }\n\n    /**\n     * @brief implementation of `key_exists`. returns both a boolean and also the position in `self.json_entries_packed` of the key\n     * @description algorithm is O(1) because of the preprocessing we have done\n     *              Method computes a key hash and checks whether key hash exists in the list of sorted preprocessed key hashes\n     *              If it does *not* exist, we can find two adjacent entries in `key_hashes` where `key_hashes[i]` < target_key_hash < `key_hashes[i+1]`\n     **/\n    fn key_exists_impl<let KeyBytes: u32>(self, key: [u8; KeyBytes]) -> (bool, Field) {\n        /*\n            Option A: key exists\n            Option B: key does NOT exist\n        If key does NOT exist. 3 cases\n            case 1: keyhash < first entry\n            case 2: keyhash > last entry\n            case 3: entry A > keyhash > entryB\n        */\n        let hasher: ByteHasher<MaxKeyFields> = ByteHasher {};\n        let keyhash = hasher.get_keyhash_var(key, 0, KeyBytes);\n\n        let HASH_MAXIMUM = 0x1000000000000000000000000000000000000000000000000000000000000 - 1;\n        let two_pow_216 = 0x100000000000000000000000000000000000000000000000000000000;\n\n        let keyhash = keyhash + self.root_id * two_pow_216;\n\n        //@Safety: The assertion below checks that the keyhash is stored in the the index returned by the unconstrained function\n        let search_result = unsafe { self.search_for_key_in_map(keyhash) };\n        let found = search_result.found as Field;\n\n        let target_lt_smallest_entry = search_result.target_lt_smallest_entry as Field;\n        let target_gt_largest_entry = search_result.target_gt_largest_entry as Field;\n\n        assert(((search_result.lhs_index - search_result.rhs_index) * found) == 0);\n\n        // only one of \"found\", \"target_lt_smallest_entry\", \"target_gt_largest_entry\" can be true\n        let exclusion_test = found + target_gt_largest_entry + target_lt_smallest_entry;\n        assert(exclusion_test * exclusion_test == exclusion_test);\n\n        let mut lhs = self.key_hashes[search_result.lhs_index];\n        let mut rhs = self.key_hashes[search_result.rhs_index];\n\n        // case where hash < self.key_hashes[0]\n        // 0 < hash < hashes[0]\n        lhs = lhs * (1 - target_lt_smallest_entry);\n\n        // case where hash > self.key_hashes[last]\n        // largest < x < -1\n        rhs = rhs * (1 - target_gt_largest_entry) + target_gt_largest_entry * HASH_MAXIMUM;\n\n        // case where hash == self.key_hashes[found_index]\n        lhs = lhs - found;\n        rhs = rhs + found;\n\n        assert_gt_240_bit(keyhash, lhs);\n        assert_lt_240_bit(keyhash, rhs);\n\n        (search_result.found, search_result.lhs_index)\n    }\n\n    /**\n     * @brief implementation of `key_exists`. returns both a boolean and also the position in `self.json_entries_packed` of the key\n     * @description algorithm is O(1) because of the preprocessing we have done\n     *              Method computes a key hash and checks whether key hash exists in the list of sorted preprocessed key hashes\n     *              If it does *not* exist, we can find two adjacent entries in `key_hashes` where `key_hashes[i]` < target_key_hash < `key_hashes[i+1]`\n     **/\n    fn key_exists_impl_var<let KeyBytes: u32>(\n        self,\n        key: BoundedVec<u8, KeyBytes>,\n    ) -> (bool, Field) {\n        /*\n            Option A: key exists\n            Option B: key does NOT exist\n        If key does NOT exist. 3 cases\n            case 1: keyhash < first entry\n            case 2: keyhash > last entry\n            case 3: entry A > keyhash > entryB\n        */\n        let hasher: ByteHasher<MaxKeyFields> = ByteHasher {};\n        let keyhash = hasher.get_keyhash_var(key.storage, 0, key.len as u32);\n\n        let HASH_MAXIMUM = 0x1000000000000000000000000000000000000000000000000000000000000 - 1;\n        let two_pow_216 = 0x100000000000000000000000000000000000000000000000000000000;\n\n        let keyhash = keyhash + self.root_id * two_pow_216;\n\n        //@Safety: the assertion (search_result.lhs_index - search_result.rhs_index) * found == 0 constraints this function\n        let search_result = unsafe { self.search_for_key_in_map(keyhash) };\n        let found = search_result.found as Field;\n\n        let target_lt_smallest_entry = search_result.target_lt_smallest_entry as Field;\n        let target_gt_largest_entry = search_result.target_gt_largest_entry as Field;\n\n        assert(((search_result.lhs_index - search_result.rhs_index) * found) == 0);\n\n        // only one of \"found\", \"target_lt_smallest_entry\", \"target_gt_largest_entry\" can be true\n        let exclusion_test = found + target_gt_largest_entry + target_lt_smallest_entry;\n        assert(exclusion_test * exclusion_test == exclusion_test);\n\n        let mut lhs = self.key_hashes[search_result.lhs_index];\n        let mut rhs = self.key_hashes[search_result.rhs_index];\n\n        // case where hash < self.key_hashes[0]\n        // 0 < hash < hashes[0]\n        lhs = lhs * (1 - target_lt_smallest_entry);\n\n        // case where hash > self.key_hashes[last]\n        // largest < x < -1\n        rhs = rhs * (1 - target_gt_largest_entry) + target_gt_largest_entry * HASH_MAXIMUM;\n\n        // case where hash == self.key_hashes[found_index]\n        lhs = lhs - found;\n        rhs = rhs + found;\n\n        assert_gt_240_bit(keyhash, lhs);\n        assert_lt_240_bit(keyhash, rhs);\n\n        (search_result.found, search_result.lhs_index)\n    }\n\n    unconstrained fn __get_keys_at_root<let MaxNumKeys: u32>(\n        self,\n    ) -> BoundedVec<Field, MaxNumKeys> {\n        let mut result: BoundedVec<Field, MaxNumKeys> =\n            BoundedVec { len: 0, storage: [0; MaxNumKeys] };\n\n        let root_object: JSONEntry =\n            JSONEntry::from(self.json_entries_packed[self.root_index_in_transcript]);\n\n        let mut result_ptr = 0;\n        for i in 0..MaxNumValues {\n            let target_entry: JSONEntry = JSONEntry::from(self.unsorted_json_entries_packed[i]);\n            if (target_entry.parent_index == self.root_id) {\n                result.storage[result_ptr] = i as Field;\n                result_ptr += 1;\n            }\n        }\n        assert(result_ptr == root_object.num_children);\n        result.len = result_ptr as u32;\n        result\n    }\n    fn get_keys_at_root<let MaxNumKeys: u32, let MaxKeyBytes: u32>(\n        self,\n    ) -> BoundedVec<BoundedVec<u8, MaxKeyBytes>, MaxNumKeys> {\n        let root_object: JSONEntry =\n            JSONEntry::from(self.json_entries_packed[self.root_index_in_transcript]);\n        //@Safety: the length of the index is constrained later.\n        let key_indices: BoundedVec<Field, MaxNumKeys> = unsafe { self.__get_keys_at_root() };\n\n        assert(key_indices.len as Field == root_object.num_children);\n\n        let mut result: BoundedVec<BoundedVec<u8, MaxKeyBytes>, MaxNumKeys> = BoundedVec {\n            len: 0,\n            storage: [BoundedVec { len: 0, storage: [0; MaxKeyBytes] }; MaxNumKeys],\n        };\n        for i in 0..MaxNumKeys {\n            let key = KeyIndexData::from_field(self.key_data[key_indices.storage[i]]);\n            // just a workaround to the interface for `extract_string_entry`\n            let mut fake_entry = JSONEntry::new();\n            fake_entry.json_pointer = key.json_index;\n            fake_entry.json_length = key.json_length;\n            result.storage[i].storage = self.extract_string_entry(fake_entry);\n            result.storage[i].len = key.json_length as u32;\n        }\n        result.len = key_indices.len;\n        result\n    }\n}\n\n#[test]\nfn test_get_keys_at_root() {\n    let s = \"{ \\\"A\\\": 1, \\\"foo\\\": false, \\\"bar\\\": { \\\"one\\\" : \\\"A\\\", \\\"two\\\" : \\\"B\\\"}, \\\"baz\\\": \\\"12345\\\"  }\";\n\n    let json: JSON<77, 6, 30, 30, 2> = JSON::parse_json_from_string(s);\n\n    let keys: BoundedVec<BoundedVec<u8, 5>, 5> = json.get_keys_at_root();\n\n    assert(keys.len == 4);\n    assert(keys.storage[0] == BoundedVec::from_array(\"A\".as_bytes()));\n    assert(keys.storage[1] == BoundedVec::from_array(\"foo\".as_bytes()));\n    assert(keys.storage[2] == BoundedVec::from_array(\"bar\".as_bytes()));\n    assert(keys.storage[3] == BoundedVec::from_array(\"baz\".as_bytes()));\n}\n","path":"/home/runner/nargo/github.com/noir-lang/noir_json_parser/v0.4.0/src/getters.nr"},"78":{"source":"use crate::_comparison_tools::bounds_checker;\nuse crate::_comparison_tools::bounds_checker::get_validity_flags;\nuse crate::enums::Layer::{ARRAY_LAYER, OBJECT_LAYER, SINGLE_VALUE_LAYER};\nuse crate::enums::ScanMode::{GRAMMAR_SCAN, LITERAL_SCAN, NUMERIC_SCAN, STRING_SCAN};\nuse crate::enums::Token::{\n    BEGIN_ARRAY_TOKEN, BEGIN_OBJECT_TOKEN, END_ARRAY_TOKEN, END_OBJECT_TOKEN, KEY_SEPARATOR_TOKEN,\n    KEY_TOKEN, LITERAL_TOKEN, NUM_TOKENS, NUMERIC_TOKEN, STRING_TOKEN, VALUE_SEPARATOR_TOKEN,\n};\nuse crate::get_literal::JSONLiteral;\nuse crate::json_entry::{JSONContextStackEntry, JSONEntry, JSONEntryPacked};\nuse crate::json_tables::{\n    JSON_CAPTURE_TABLE, PROCESS_RAW_TRANSCRIPT_TABLE, TOKEN_FLAGS_TABLE,\n    TOKEN_IS_ARRAY_OBJECT_OR_VALUE, TOKEN_IS_STRING, TOKEN_VALIDATION_TABLE,\n};\nuse crate::token_flags::TokenFlags;\nuse crate::transcript_entry::{\n    PostProcessScanData, RawTranscriptEntry, ScanData, TranscriptEntry, ValidationFlags,\n};\n\n/**\n * @brief records a value in a json blob\n **/\npub struct JSONValue<let MaxLength: u32> {\n    value: BoundedVec<u8, MaxLength>, // raw bytes that constitute the json value entry\n    value_type: Field, // either STRING_TOKEN, NUMERIC_TOKEN or LITERAL_TOKEN\n}\n\nimpl<let MaxLength: u32> JSONValue<MaxLength> {\n    fn is_string(self) -> bool {\n        self.value_type == STRING_TOKEN\n    }\n    fn is_number(self) -> bool {\n        self.value_type == NUMERIC_TOKEN\n    }\n    fn is_literal(self) -> bool {\n        self.value_type == LITERAL_TOKEN\n    }\n}\n\n/**\n * @brief It's a JSON struct! Contains the raw and processed information required to extract data from a json blob\n * @description The \"root\" of the JSON refers to the parent object or array (or a value if the json is just a single value e.g. text = \"\\\"foo\\\": \\\"bar\\\"\")\n * @note text that describes just a single JSON value is not yet fully supported. Only use this library for processing objects or arrays for now\n **/\npub struct JSON<let NumBytes: u32, let NumPackedFields: u32, let MaxNumTokens: u32, let MaxNumValues: u32, let MaxKeyFields: u32> {\n    json: [u8; NumBytes], // the raw json bytes\n    json_packed: [Field; NumPackedFields], // raw bytes, but packed into 31-byte Field elements\n    raw_transcript: [Field; MaxNumTokens], // transcript of json tokens after basic processing\n    transcript: [Field; MaxNumTokens], // complete transcript of json tokens\n    transcript_length: u32, // how big is the transcript?\n    key_data: [Field; MaxNumValues], // description of each key, packed into a Field element\n    key_hashes: [Field; MaxNumValues], // a sorted list of key hashes\n    unsorted_json_entries_packed: [JSONEntryPacked; MaxNumValues], // a list of all the processed json values (objects, arrays, numerics, literals, strings)\n    json_entries_packed: [JSONEntryPacked; MaxNumValues], // a sorted list of all the processed json values (objects, arrays, numerics, literals, strings)\n    layer_type_of_root: Field, // is the root an OBJECT_LAYER, ARRAY_LAYER or SINGLE_VALUE_LAYER?\n    root_id: Field, // the unique identifier of the root (if an object or array)\n    root_index_in_transcript: Field, // location in json_entries_packed of the root\n}\n\n/**\n * @brief are two JSON objects equal?\n * @note VERY EXPENSIVE! Currently only used in tests\n **/\nimpl<let NumBytes: u32, let NumPackedFields: u32, let MaxNumTokens: u32, let MaxNumValues: u32, let MaxKeyFields: u32> std::cmp::Eq for JSON<NumBytes, NumPackedFields, MaxNumTokens, MaxNumValues, MaxKeyFields> {\n    fn eq(self, other: Self) -> bool {\n        (self.json == other.json)\n            & (self.raw_transcript == other.raw_transcript)\n            & (self.transcript == other.transcript)\n            & (self.transcript_length == other.transcript_length)\n            & (self.key_data == other.key_data)\n            & (self.key_hashes == other.key_hashes)\n            & (self.layer_type_of_root == other.layer_type_of_root)\n            & (self.root_id == other.root_id)\n            & (self.root_index_in_transcript == other.root_index_in_transcript)\n            & (self.json_entries_packed == other.json_entries_packed)\n            & (self.json_packed == other.json_packed)\n    }\n}\n\n// TODO: casting entry_ptr to u16 is kind of expensive when generating witnesses, can we fix?\nunconstrained fn __check_entry_ptr_bounds(entry_ptr: Field, max: u32) {\n    // n.b. even though this assert is in an unconstrained function, an out of bounds error will be triggered when writing into self.key_data[entry_ptr]\n    assert(entry_ptr as u32 < max - 1, \"create_json_entries: MaxNumValues limit exceeded!\");\n}\n\nimpl<let NumBytes: u32, let NumPackedFields: u32, let MaxNumTokens: u32, let MaxNumValues: u32, let MaxKeyFields: u32> JSON<NumBytes, NumPackedFields, MaxNumTokens, MaxNumValues, MaxKeyFields> {\n\n    /**\n     * @brief pack the json bytes into Field elements, where each Field element represents 31 bytes\n     * @description we do this because we need to extract substrings from the json bytes, where the position and length of the substring are witness values.\n     *              Doing this on packed Field elements using `slice_string` is cheaper than the direct method of iterating byte-by-byte.\n     *              Also, by extracting data at unknown locations exclusively from the packed json, we do not need to represent the raw bytes `self.json` as a ROM table\n     *              (which would have an expensive initialization cost of 2*NumBytes gates)\n     **/\n    fn compute_json_packed(&mut self) {\n        let NumWholeLimbs = NumBytes / 31;\n        for i in 0..NumWholeLimbs {\n            let mut limb: Field = 0;\n            for j in 0..31 {\n                limb *= 0x100;\n                limb += self.json[i * 31 + j] as Field;\n            }\n            std::as_witness(limb);\n            self.json_packed[i] = limb;\n        }\n        let NumRemainingBytes = NumBytes - NumWholeLimbs * 31;\n        let mut limb: Field = 0;\n        for j in 0..NumRemainingBytes {\n            limb *= 0x100;\n            limb += self.json[NumWholeLimbs * 31 + j] as Field;\n        }\n        for _ in NumRemainingBytes..31 {\n            limb *= 0x100;\n        }\n        std::as_witness(limb);\n        self.json_packed[NumWholeLimbs + (NumRemainingBytes == 0) as u32] = limb;\n    }\n\n    // TODO: when impl is more mature, merge this into create_json_entries\n    fn keyswap(&mut self) {\n        // TODO: this won't work if 1st entry is a key!\n        let mut current = TranscriptEntry::from_field(self.transcript[0]);\n        let mut next: TranscriptEntry = TranscriptEntry::new();\n\n        for i in 0..MaxNumTokens - 1 {\n            next = TranscriptEntry::from_field(self.transcript[i + 1]);\n\n            let next_is_key = (next.token == KEY_SEPARATOR_TOKEN) as Field;\n\n            let valid_token = TOKEN_IS_STRING[current.token];\n            assert(\n                (valid_token * next_is_key) + (1 - next_is_key) == 1,\n                \"Cannot find key/value straddling KEY_DELIMITER_TOKEN\",\n            );\n\n            let old_transcript = self.transcript[i];\n            let new_transcript = TranscriptEntry::to_field(\n                TranscriptEntry { token: KEY_TOKEN, index: current.index, length: current.length },\n            );\n            let updated_transcript =\n                (new_transcript - old_transcript) * next_is_key + old_transcript;\n            self.transcript[i] = updated_transcript;\n\n            current = next;\n        }\n    }\n\n    /**\n     * @brief Once we have processed the json into a transcript of tokens, validate these tokens represent valid JSON!\n     * @description To avoid a lot of painful if/else statements, we construct a state transition function out of the lookup table TOKEN_VALIDATION_TABLE\n     *              The inputs to TOKEN_VALIDATION_TABLE are:\n     *                  1. The current token (at some position `i` i.e. `self.transcript[i])\n     *                  2. The previous token (`self.transcript[i-1]`)\n     *                  3. The context of the previous token (i.e. is it within an object or an array?)\n     *              The lookup table maps these inputs into the following outputs:\n     *                  1. Are we moving into a new context? i.e. is current token a `{` or `[` character?\n     *                  2. If so, what context are we moving into? (`OBJECT_LAYER` or `ARRAY_LAYER`)\n     *                  3. Are we exiting from the current context? i.e. is the current token a `}` or `]` character?\n     *                  4. Have we entered an error state? e.g. a `[` token followed by a `,` token would be invalid JSON\n     * \n     * @note To shave some gates, we represent the error state in a nonstandard way.\n     *       If we have entered an error state, the value of `push_layer` will be 0x1000000\n     *       This will then update `depth` to a value that exceeds the size of `parent_layer_stack` (32),\n     *       which will trigger an out-of-bounds array access, which creates unsatisfiable constraints\n     **/\n    fn validate_tokens(self, tokens: [Field; MaxNumTokens]) {\n        let mut current_layer = self.layer_type_of_root;\n        let mut parent_layer_stack: [Field; 32] = [0; 32];\n        let mut depth = 0;\n        let mut previous_token = tokens[0];\n        let NN = NUM_TOKENS * NUM_TOKENS;\n\n        let is_object = previous_token == BEGIN_OBJECT_TOKEN;\n        let is_array = previous_token == BEGIN_ARRAY_TOKEN;\n\n        depth = is_object as Field + is_array as Field;\n\n        // todo is this correct?\n        parent_layer_stack[0] = is_object as Field * OBJECT_LAYER + is_array as Field * ARRAY_LAYER;\n        assert(\n            TOKEN_IS_ARRAY_OBJECT_OR_VALUE[previous_token] == 1,\n            \"first json token does not describe an object, array or key\",\n        );\n\n        // 17 gates per iteration?\n        for i in 1..MaxNumTokens {\n            // 0 gates\n            let current_token = tokens[i];\n\n            // 1 gate\n            let index = current_layer * (NN as Field)\n                + previous_token * (NUM_TOKENS as Field)\n                + current_token;\n\n            // 5 gates\n            let ValidationFlags { push_layer, push_layer_type_of_root, pop_layer } =\n                ValidationFlags::from_field(TOKEN_VALIDATION_TABLE[index]);\n\n            // 3.5 gates\n            parent_layer_stack[depth] = current_layer;\n\n            // 1 gate\n            // we encode an error flag into `push_layer` by making its value such that `depth` will exceed the size of `parent_layer_stack`\n            depth = depth + push_layer - pop_layer;\n            std::as_witness(depth);\n\n            // 6.5 gates\n            let parent_layer = parent_layer_stack[depth];\n            let mut updated_layer = (1 - pop_layer - push_layer);\n            std::as_witness(updated_layer);\n            updated_layer = updated_layer * current_layer + push_layer_type_of_root;\n            std::as_witness(updated_layer);\n            updated_layer = updated_layer + parent_layer * pop_layer;\n            std::as_witness(updated_layer);\n            current_layer = updated_layer;\n\n            previous_token = current_token;\n        }\n        assert(depth == 0, \"validate_tokens: unclosed objects or arrays\");\n    }\n\n    /**\n     * @brief given a processed transcript of json tokens, compute a list of json entries that describes the values within the JSON blob\n     * @details a 'value' here is either an Object, Array, String, Numeric or Literal.\n     *          e.g. \"[ 1, 2, 3 ]\" contains 4 values (3 Numeric types and the Array that contains them)\n     *\n     *          To avoid branches and if statements, we construct a state transition function out of the lookup table TOKEN_FLAGS_TABLE\n     *          This table takes as an input the following:\n     *              1. The token value of an element in the transcript\n     *              2. The layer type the previous token is located in (i.e. are we in an array or an object?)\n     *          The table outputs the following data:\n     *              1. Should we create a new json entry? (i.e. is the token a STRING_TOKEN, LITERAL_TOKEN, NUMERIC_TOKEN, END_ARRAY_TOKEN, END_OBJECT_TOKEN)\n     *              2. Is the token `}` or `]`?\n     *              3. Is the token `{` or `[`?\n     *              4. Given the current layer type and the token being queried, what should the new layer type be?\n     *              5. Is the token `KEY_TOKEN`?\n     *              6. Is the token a `STRING_TOKEN`, `NUMERIC_TOKEN` OR `VALUE_TOKEN`?\n     *              7. Is the token one that we should skip over? `,` or `:`\n     **/\n    fn create_json_entries(&mut self) {\n        let mut entry_ptr = 0;\n        let mut depth: Field = 1;\n        let mut num_entries_at_current_depth: Field = 0;\n        let mut next_identity_value: Field = 1;\n        let mut current_identity_value: Field = 0;\n        let mut context = OBJECT_LAYER;\n\n        let mut current_key_index_and_length: Field = 0;\n\n        let mut parent_context_stack: [Field; 32] = [0; 32];\n        let mut tokens: [Field; MaxNumTokens] = [0; MaxNumTokens];\n        //  maybe 71.75 gates per iteration\n        for i in 0..MaxNumTokens {\n            //@Safety: check the comments below\n            unsafe { __check_entry_ptr_bounds(entry_ptr, MaxNumValues) };\n            // 5.25 gates\n            let TranscriptEntry { token, index, length } =\n                TranscriptEntry::from_field(self.transcript[i]);\n\n            tokens[i] = token;\n            // 13 gates\n            let TokenFlags {\n    create_json_entry,\n    is_end_of_object_or_array,\n    is_start_of_object_or_array,\n    new_context,\n    is_key_token: update_key,\n    is_value_token,\n    preserve_num_entries,} =\n                TokenFlags::from_field(TOKEN_FLAGS_TABLE[token + context * (NUM_TOKENS as Field)]);\n\n            // 2 gates\n            let diff = (index + length * 0x10000) - current_key_index_and_length;\n            std::as_witness(diff);\n            current_key_index_and_length = diff * update_key + current_key_index_and_length;\n            std::as_witness(current_key_index_and_length);\n\n            // 2 gates\n            let new_context_stack_entry = JSONContextStackEntry::to_field(\n                JSONContextStackEntry {\n                    num_entries: num_entries_at_current_depth,\n                    context,\n                    current_key_index_and_length,\n                    json_index: index,\n                    current_identity: current_identity_value,\n                },\n            );\n            // subtotal 22.25\n            // 1 gate\n            let depth_index: Field = (depth - 1);\n            // 3.5 gates\n            let previous_stack_entry_packed = parent_context_stack[depth_index];\n\n            // 9.5 gates\n            let previous_stack_entry =\n                JSONContextStackEntry::from_field(previous_stack_entry_packed);\n\n            let object_or_array_entry: JSONEntry = JSONEntry {\n                array_pointer: previous_stack_entry.num_entries,\n                entry_type: token,\n                child_pointer: 0,\n                num_children: num_entries_at_current_depth,\n                json_pointer: previous_stack_entry.json_index,\n                json_length: length,\n                parent_index: previous_stack_entry.current_identity,\n                id: current_identity_value,\n            };\n            // 0\n            let value_entry: JSONEntry = JSONEntry {\n                array_pointer: num_entries_at_current_depth,\n                entry_type: token,\n                child_pointer: 0,\n                num_children: 0,\n                json_pointer: index,\n                json_length: length,\n                parent_index: current_identity_value,\n                id: 0,\n            };\n\n            // 3 gates\n            let object_or_array_entry_packed = object_or_array_entry.to_field();\n            // 2 gates\n            let value_entry_packed = value_entry.to_field();\n\n            // 2 gates\n            let diff = object_or_array_entry_packed - value_entry_packed;\n            std::as_witness(diff);\n            let new_entry = diff * is_end_of_object_or_array + value_entry_packed;\n            std::as_witness(new_entry);\n\n            // 3 gates\n            // subtotal 24 + 22.25 = 46.25\n            let old = current_identity_value;\n            current_identity_value = (next_identity_value * is_start_of_object_or_array);\n            std::as_witness(current_identity_value);\n            current_identity_value = current_identity_value\n                + (previous_stack_entry.current_identity * is_end_of_object_or_array);\n            std::as_witness(current_identity_value);\n            current_identity_value = current_identity_value + old * preserve_num_entries;\n            std::as_witness(current_identity_value);\n\n            // 2 gates\n            num_entries_at_current_depth =\n                num_entries_at_current_depth * preserve_num_entries + is_value_token;\n            std::as_witness(num_entries_at_current_depth);\n            num_entries_at_current_depth = num_entries_at_current_depth\n                + (previous_stack_entry.num_entries + 1) * is_end_of_object_or_array;\n            std::as_witness(num_entries_at_current_depth);\n\n            // 1 gate\n            // if `is_end_of_object_or_array == 1`, `new_context = 0` so we can do something cheaper than a conditional select:\n            context = previous_stack_entry.context * is_end_of_object_or_array + new_context;\n            std::as_witness(context);\n            // 3 gates\n            let common_term = current_identity_value\n                + context * (num_entries_at_current_depth - 1) * 0x1000000000000;\n            std::as_witness(common_term);\n            let mut new_key_data =\n                current_key_index_and_length * is_value_token * 0x10000 + common_term;\n            std::as_witness(new_key_data);\n            new_key_data = new_key_data\n                + previous_stack_entry.current_key_index_and_length\n                    * is_end_of_object_or_array\n                    * 0x10000;\n            std::as_witness(new_key_data);\n\n            // 3.5 gates\n            self.key_data[entry_ptr] = new_key_data * create_json_entry;\n\n            // 3.5 gates\n            parent_context_stack[depth] = new_context_stack_entry;\n\n            // 4.5 gates\n            self.json_entries_packed[entry_ptr] =\n                JSONEntryPacked { value: new_entry * create_json_entry };\n\n            // 1 gate\n            next_identity_value = next_identity_value + is_start_of_object_or_array;\n            std::as_witness(next_identity_value);\n\n            // 1 gate\n            depth = depth + is_start_of_object_or_array - is_end_of_object_or_array;\n\n            // 1 gate\n            // 2105 + 46.25\n            // subtotal 66.75?\n            entry_ptr += create_json_entry;\n            std::as_witness(entry_ptr);\n        }\n        self.validate_tokens(tokens);\n    }\n\n    /**\n     * @brief Perform the 1st transcript processing step as an unconstrained function\n     *        We will validate this transcript is correct via a constrained function\n     *        This is a bit cheaper than doing everything in a constrained function,\n     *        because we can use ROM arrays instead of RAM arrays\n     *        (i.e. we're only reading from our arrays, we don't write to them in constrained functions)\n     **/\n    unconstrained fn __build_transcript(self) -> [Field; MaxNumTokens] {\n        let mut raw_transcript: [Field; MaxNumTokens] = [0; MaxNumTokens];\n        let mut transcript_ptr: u32 = 0;\n        let mut scan_mode = GRAMMAR_SCAN as Field;\n        let mut length: Field = 0;\n        let mut previous_was_potential_escape_sequence = 0;\n        for i in 0..NumBytes {\n            // while this assert is in an unconstrained function, the out of bounds accesss `raw_transcript[transcript_ptr]` in build_transcript also generates failing constraints\n            assert(transcript_ptr < MaxNumTokens, \"build_transcript: MaxNumTokens limit exceeded!\");\n            let ascii = self.json[i];\n\n            let encoded_ascii =\n                previous_was_potential_escape_sequence * 1024 + scan_mode * 256 + ascii as Field;\n            let ScanData { scan_token, push_transcript, increase_length, is_potential_escape_sequence } =\n                ScanData::from_field(JSON_CAPTURE_TABLE[encoded_ascii]);\n            let mut push_transcript = push_transcript;\n            let mut scan_token = scan_token;\n            let mut increase_length = increase_length;\n\n            let new_entry = RawTranscriptEntry::to_field(\n                RawTranscriptEntry { encoded_ascii, index: i as Field - length, length },\n            );\n\n            raw_transcript[transcript_ptr] = new_entry;\n            length = length * (1 - push_transcript) + increase_length;\n            transcript_ptr += (push_transcript as bool) as u32;\n\n            previous_was_potential_escape_sequence = is_potential_escape_sequence;\n\n            scan_mode = scan_token;\n        }\n\n        // if we end in a scan mode where we're searching for a number, string or a literal (true/false/null), we have an incomplete token and this is invalid JSON\n        // NOTE: if we upgrade this parser to be able to process single-value JSON (e,g, \"999\" or \"\"hello\" : \"world\"\" this logic needs to be upgraded)\n        assert(\n            scan_mode == GRAMMAR_SCAN as Field,\n            \"build_transcript: incomplete token (number, string or literal)\",\n        );\n\n        // ensure an error isn't hiding in the last scanned token\n        scan_mode.assert_max_bit_size::<2>();\n        raw_transcript\n    }\n\n    /**\n     * @brief Construct a token transcript by iterating through self.json and using a lookup table `JSON_CAPTURE_TABLE` to define a state transition function\n     * @details JSON_CAPTURE_TABLE takes the following as input:\n     *          1. the ascii byte at the current location in the json\n     *          2. the current scan mode (are we searching for grammar, strings, numbers or literals?)\n     *          3. could this byte potentially be an escape sequence? (i.e. the previous byte was a backslash character \"\\\" and scan_mode == STRING_SCAN)\n     *          The table outputs the following flags:\n     *          1. what token have we scanned? (listed in enums::Token)\n     *          2. should we push this token to the transcript (no push if token == NO_TOKEN)\n     *          3. should we increase the length of the current entry we're evaluating?\n     *              (i.e. if token == STRING_TOKEN and scan_mode == STRING_SCAN, then increase the length because we're in the process of scanning a string)\n     *          4. is this scanned ascii character a potential escape sequence? i.e. scan_mode == STRING_SCAN and ascii = \"\\\"\n     *          5. have we entered an error state? (i.e. invalid grammar e.g. \":\" is followed by \"}\")\n     *\n     * NOTE: we represent error states in a nonstandard way to reduce gate count. Instead of handling an error flag,\n     *       an error state will increase the value of `scan_token` by 0x100000000. This will cause the next access into `JSON_CAPTURE_TABLE` to trigger an out of bounds error\n     *\n     * NOTE: the scanned transcript will be missing some edge cases that are caught via `swap_keys` and `capture_missing_tokens`:\n     *          1. If the scan mode is NUMERIC_SCAN or LITERAL_SCAN and the next character is a \",\" or \"}\" or \"]\",\n     *             we will push a NUMERIC_TOKEN or LITERAL_TOKEN into the transcript but we will MISS the VALUE_SEPARATOR_TOKEN, END_OBJECT_TOKEN or END_ARRAY_TOKEN\n     *             (accomodating this edge case requires conditionally pushing two transcript entries per iteration, so we do this in a separate step where we iterate over the transcript and not the json bytes)\n     *          2. We can't yet tell if an entry is a KEY_TOKEN or a STRING_TOKEN. All keys are represented as STRING_TOKEN. This gets fixed after `swap_keys` is evaluated\n     **/\n    fn build_transcript(self) -> Self {\n        let mut raw_transcript: [Field; MaxNumTokens] = [0; MaxNumTokens];\n        let mut transcript_ptr: Field = 0;\n        let mut scan_mode = GRAMMAR_SCAN;\n        let mut length: Field = 0;\n\n        //@Safety: check the comments below\n        let raw_transcript = unsafe { self.__build_transcript() };\n\n        // 14 gates per iteration, plus fixed cost for initing 2,048 size lookup table (4,096 gates)\n        let mut previous_was_potential_escape_sequence = 0;\n        for i in 0..NumBytes {\n            let ascii = self.json[i];\n\n            // 1 gate\n            let encoded_ascii =\n                previous_was_potential_escape_sequence * 1024 + scan_mode * 256 + ascii as Field;\n            std::as_witness(encoded_ascii);\n\n            // 2 gates\n            let capture_flags = JSON_CAPTURE_TABLE[encoded_ascii];\n            // 5 gates\n            let ScanData { scan_token, push_transcript, increase_length, is_potential_escape_sequence } =\n                ScanData::from_field(capture_flags);\n\n            // 2 gates\n            let raw = raw_transcript[transcript_ptr];\n\n            // 1 gate\n            let diff = raw\n                - RawTranscriptEntry::to_field(\n                    RawTranscriptEntry { encoded_ascii, index: i as Field - length, length },\n                );\n            std::as_witness(diff);\n            // 1 gate\n            assert(diff * push_transcript == 0);\n\n            // 1 gate\n            length = length * (1 - push_transcript) + increase_length;\n            std::as_witness(length);\n\n            // 1 gate\n            transcript_ptr += push_transcript;\n\n            previous_was_potential_escape_sequence = is_potential_escape_sequence;\n            scan_mode = scan_token;\n        }\n\n        // we encode error flag into the scan_token value, which must be less than 4\n        // the lookup into JSON_CAPTURE_TABLE applies an implicit 2-bit range check on `scan_token`\n        // however this does not get triggered if the final byte scanned produces an error state\n        length.assert_max_bit_size::<2>();\n\n        JSON {\n            json: self.json,\n            raw_transcript,\n            transcript: self.transcript,\n            transcript_length: transcript_ptr as u32,\n            key_data: self.key_data,\n            key_hashes: self.key_hashes,\n            layer_type_of_root: self.layer_type_of_root,\n            root_id: 1,\n            root_index_in_transcript: 0,\n            json_entries_packed: self.json_entries_packed,\n            unsorted_json_entries_packed: self.unsorted_json_entries_packed,\n            json_packed: self.json_packed,\n        }\n    }\n\n    /**\n     * @brief We compute the output of `capture_missing_tokens` via an unconstrained function, then validate the result is correct.\n     *        Saves some gates for same reason as in __build_transcript\n     **/\n    unconstrained fn __capture_missing_tokens(self) -> [Field; MaxNumTokens] {\n        let mut updated_transcript: [Field; MaxNumTokens] = [0; MaxNumTokens];\n        let mut transcript_ptr: u32 = 0;\n        // TODO: do we need a null transcript value?!?!\n        for i in 0..MaxNumTokens {\n            let RawTranscriptEntry { encoded_ascii, index, length } =\n                RawTranscriptEntry::from_field(self.raw_transcript[i]);\n\n            let PostProcessScanData { token, new_grammar, scan_token } =\n                PostProcessScanData::from_field(PROCESS_RAW_TRANSCRIPT_TABLE[encoded_ascii]);\n\n            let entry = TranscriptEntry::to_field(TranscriptEntry { token, index, length });\n            updated_transcript[transcript_ptr] = entry;\n\n            let index_valid: u32 = (i < self.transcript_length) as u32;\n            transcript_ptr += index_valid;\n\n            let index_of_possible_grammar = (index + length);\n            let new_entry =\n                TranscriptEntry { token: scan_token, index: index_of_possible_grammar, length: 0 };\n\n            let update = new_grammar * index_valid as Field;\n            let new_transcript = TranscriptEntry::to_field(new_entry);\n            assert(\n                transcript_ptr < MaxNumTokens,\n                \"capture_missing_tokens: MaxNumTokens limit exceeded!\",\n            );\n            updated_transcript[transcript_ptr] = new_transcript;\n            transcript_ptr += update as bool as u32;\n        }\n        updated_transcript\n    }\n\n    /**\n     * @brief Check for missing tokens that we could have missed in `build_transcript`\n     * @details If we had a json string where a NUMERIC_TOKEN or LITERAL_TOKEN is directly succeeded by a VALUE_SEPARATOR_TOKEN, END_OBJECT_TOKEN, END_ARRAY_TOKEN,\n     *          we will have missed the latter token.\n     *          We pick these up via the lookup table PROCESS_RAW_TRANSCRIPT_TABLE\n     **/\n    fn capture_missing_tokens(&mut self) {\n        let mut transcript_ptr: Field = 0;\n        // hmm probably need a null transcript value?!?!\n        //@Safety: check the comments below\n        let updated_transcript = unsafe { self.__capture_missing_tokens() };\n        // 26? gates per iteration\n        let range_valid: [Field; MaxNumTokens] = get_validity_flags(self.transcript_length);\n        for i in 0..MaxNumTokens {\n            // 5.25 gates\n            let RawTranscriptEntry { encoded_ascii, index, length } =\n                RawTranscriptEntry::from_field(self.raw_transcript[i]);\n            // 6.75 gates\n            let PostProcessScanData { token, new_grammar, scan_token } =\n                PostProcessScanData::from_field(PROCESS_RAW_TRANSCRIPT_TABLE[encoded_ascii]);\n            // 2 gates\n            let index_valid: Field = range_valid[i];\n            // 1 gate\n            let entry = TranscriptEntry::to_field(TranscriptEntry { token, index, length });\n            // 2 gates\n            let diff = updated_transcript[transcript_ptr] - entry;\n            std::as_witness(diff);\n            assert(diff * index_valid == 0);\n            // 1 gate\n            transcript_ptr += index_valid;\n            // 0 gate (merged into TranscriptEntry::to_field)\n            let index_of_possible_grammar = (index + length);\n            // 0 gates\n            let new_entry =\n                TranscriptEntry { token: scan_token, index: index_of_possible_grammar, length: 0 };\n            // 2 gates\n            let update = new_grammar as Field * index_valid;\n            std::as_witness(update);\n            // 1 gate\n            let new_transcript = TranscriptEntry::to_field(new_entry);\n            // 4 gates\n            let diff = updated_transcript[transcript_ptr] - new_transcript;\n            std::as_witness(diff);\n            assert(diff * update == 0);\n            // 1 gate\n            transcript_ptr += update;\n        }\n        self.transcript = updated_transcript;\n\n        // TODO we could make this more efficient...probably not a big deal though\n        let first = TranscriptEntry::from_field(self.transcript[0]);\n        if (first.token == BEGIN_OBJECT_TOKEN) {\n            self.layer_type_of_root = OBJECT_LAYER;\n        } else if (first.token == BEGIN_ARRAY_TOKEN) {\n            self.layer_type_of_root = ARRAY_LAYER;\n        } else if (first.token == STRING_TOKEN) {\n            self.layer_type_of_root = SINGLE_VALUE_LAYER as Field;\n        }\n    }\n\n    fn parse_json<let StringBytes: u32>(stringbytes: [u8; StringBytes]) -> Self {\n        assert(StringBytes <= NumBytes, \"json length exceeds NumBytes!\");\n        let mut text: [u8; NumBytes] = [0; NumBytes];\n        for i in 0..StringBytes {\n            text[i] = stringbytes[i];\n        }\n        for i in StringBytes..NumBytes {\n            text[i] = 32; // whitespace character\n        }\n        let mut json = JSON {\n            json: text,\n            raw_transcript: [0; MaxNumTokens],\n            transcript: [0; MaxNumTokens],\n            transcript_length: 0,\n            key_data: [0; MaxNumValues],\n            key_hashes: [0; MaxNumValues],\n            layer_type_of_root: 0,\n            root_id: 1,\n            root_index_in_transcript: 0,\n            json_entries_packed: [JSONEntryPacked::default(); MaxNumValues],\n            unsorted_json_entries_packed: [JSONEntryPacked::default(); MaxNumValues],\n            json_packed: [0; NumPackedFields],\n        };\n\n        json = json.build_transcript();\n        json.capture_missing_tokens();\n        json.keyswap();\n        json.compute_json_packed();\n        json.create_json_entries();\n\n        json.compute_keyhash_and_sort_json_entries();\n\n        json\n    }\n\n    fn parse_json_from_string<let StringBytes: u32>(s: str<StringBytes>) -> Self {\n        JSON::parse_json(s.as_bytes())\n    }\n}\n\n// TODO: our capture tables are not correctly set up to process a JSON blob that does not begin with an object or array\n// #[test]\n// fn test_single_value() {\n//     let text = \"100\";\n//     let mut json: JSON<3, 10, 20, 20> = JSON::parse_json_from_string(text);\n//\n//     assert(json.get_length() == 0);\n//     assert(json.get_array_element_as_number(0) == 100);\n// }\n\n#[test]\nfn test_numbers() {\n    let text = \"{ \\\"a\\\": 9, \\\"b\\\": 99, \\\"c\\\": 999, \\\"d\\\": 9999, \\\"e\\\": 99999, \\\"f\\\": 999999, \\\"g\\\": 9999999, \\\"h\\\": 99999999, \\\"i\\\": 999999999, \\\"j\\\": 9999999999, \\\"k\\\": 99999999999, \\\"l\\\": 999999999999, \\\"m\\\": 9999999999999, \\\"n\\\": 99999999999999, \\\"o\\\": 999999999999999, \\\"p\\\": 999999999999999,\\\"q\\\": 9999999999999999, \\\"r\\\": 99999999999999999, \\\"s\\\": 999999999999999999, \\\"t\\\": 9999999999999999999, \\\"u\\\": 18446744073709551615}\";\n    let mut json: JSON<372, 16, 100, 24, 2> = JSON::parse_json_from_string(text);\n\n    let a = json.get_number_unchecked(\"a\".as_bytes());\n    let b = json.get_number_unchecked(\"b\".as_bytes());\n    let c = json.get_number_unchecked(\"c\".as_bytes());\n    let d = json.get_number_unchecked(\"d\".as_bytes());\n    let e = json.get_number_unchecked(\"e\".as_bytes());\n    let f = json.get_number_unchecked_var(BoundedVec { storage: \"ftrololol\".as_bytes(), len: 1 });\n    let g = json.get_number(\"g\".as_bytes()).unwrap();\n    let h = json.get_number_var(BoundedVec { storage: \"h\".as_bytes(), len: 1 }).unwrap();\n    let i = json.get_number_unchecked(\"i\".as_bytes());\n    let j = json.get_number_unchecked(\"j\".as_bytes());\n    let k = json.get_number_unchecked(\"k\".as_bytes());\n    let l = json.get_number_unchecked(\"l\".as_bytes());\n    let m = json.get_number_unchecked(\"m\".as_bytes());\n    let n = json.get_number_unchecked(\"n\".as_bytes());\n    let o = json.get_number_unchecked(\"o\".as_bytes());\n    let p = json.get_number_unchecked(\"p\".as_bytes());\n    let q = json.get_number_unchecked(\"q\".as_bytes());\n    let r = json.get_number_unchecked(\"r\".as_bytes());\n    let s = json.get_number_unchecked(\"s\".as_bytes());\n    let t = json.get_number_unchecked(\"t\".as_bytes());\n    let u = json.get_number_unchecked(\"u\".as_bytes());\n\n    assert(a == 9);\n    assert(b == 99);\n    assert(c == 999);\n    assert(d == 9999);\n    assert(e == 99999);\n    assert(f == 999999);\n    assert(g == 9999999);\n    assert(h == 99999999);\n    assert(i == 999999999);\n    assert(j == 9999999999);\n    assert(k == 99999999999);\n    assert(l == 999999999999);\n    assert(m == 9999999999999);\n    assert(n == 99999999999999);\n    assert(o == 999999999999999);\n    assert(p == 999999999999999);\n    assert(q == 9999999999999999);\n    assert(r == 99999999999999999);\n    assert(s == 999999999999999999);\n    assert(t == 9999999999999999999);\n    assert(u == 18446744073709551615);\n}\n\n#[test]\nfn test_parent_array() {\n    let text = \"[0,10,21,32,44]\";\n    let mut json: JSON<15, 10, 20, 20, 2> = JSON::parse_json_from_string(text);\n    assert(json.get_length() == 5);\n    assert(json.get_number_from_array_unchecked(0) == 0);\n    assert(json.get_number_from_array_unchecked(1) == 10);\n    assert(json.get_number_from_array_unchecked(2) == 21);\n    assert(json.get_number_from_array_unchecked(3) == 32);\n    assert(json.get_number_from_array_unchecked(4) == 44);\n}\n\n#[test]\nfn test_escaped_strings() {\n    let text = \"{   \\\"name\\\": \\\"\\\\\\\"Ade\\\\nel Solangi\\\\\\\"\\\", \\\"testA\\\": false, \\\"testB\\\": true, \\\"testC\\\": null }                                                                   \";\n    let mut json: JSON<148, 10, 20, 20, 2> = JSON::parse_json_from_string(text);\n    let result: BoundedVec<u8, 19> = json.get_string_unchecked(\"name\".as_bytes());\n    assert(result.storage == BoundedVec::from_array(\"\\\"Ade\\nel Solangi\\\"\".as_bytes()).storage);\n    assert(result.len == 16);\n}\n\n#[test]\nfn test_parse_json() {\n    let text = \"{ \\\"foo\\\": 1234, \\\"bar\\\": { \\\"foo\\\": 9876, \\\"bar\\\": true }, \\\"baz\\\": \\\"hello\\\" }\";\n    let mut json: JSON<68, 7, 30, 30, 2> = JSON::parse_json_from_string(text);\n\n    let result = json.get_string_unchecked(\"baz\".as_bytes());\n    assert(result.storage == \"hello\".as_bytes());\n\n    let result: Option<BoundedVec<u8, 5>> = json.get_string(\"baz\".as_bytes());\n    assert(result.is_some());\n    assert(result.unwrap().storage == \"hello\".as_bytes());\n\n    let result: Option<BoundedVec<u8, 1>> = json.get_string(\"wibble\".as_bytes());\n    assert(result.is_some() == false);\n\n    let result: u64 = json.get_number_unchecked(\"foo\".as_bytes());\n    assert(result == 1234);\n\n    let result: Option<u64> = json.get_number(\"foo\".as_bytes());\n    assert(result.is_some());\n    assert(result.unwrap() == 1234);\n\n    let result: Option<u64> = json.get_number(\"fooo\".as_bytes());\n    assert(result.is_some() == false);\n\n    let mut nested_json = json.get_object(\"bar\".as_bytes()).unwrap();\n    let result: Option<u64> = nested_json.get_number_var(\n        BoundedVec { storage: \"foounusedkeybyteslolol\".as_bytes(), len: 3 },\n    );\n    assert(result.is_some() == true);\n    assert(result.unwrap() == 9876);\n\n    let key0: BoundedVec<u8, 3> = BoundedVec::from_array(\"bar\".as_bytes());\n    let key1: BoundedVec<u8, 3> = BoundedVec::from_array(\"baz\".as_bytes());\n\n    let result: Option<BoundedVec<u8, 10>> = json.get_string_from_path([key0, key1]);\n    assert(result.is_some() == false);\n}\n\n#[test]\nfn test_literal() {\n    let text = \"{   \\\"name\\\": \\\"Adeel Solangi\\\", \\\"testA\\\": false, \\\"testB\\\": true, \\\"testC\\\": null }                                                                   \";\n    let mut json: JSON<142, 10, 20, 20, 2> = JSON::parse_json_from_string(text);\n\n    let result: JSONLiteral = json.get_literal_unchecked(\"testA\".as_bytes());\n    assert(result.is_false() == true);\n    assert(result.is_true() == false);\n    assert(result.is_null() == false);\n    assert(result.to_bool() == false);\n\n    let result_option: Option<JSONLiteral> = json.get_literal(\"testA\".as_bytes());\n    assert(result_option.is_some());\n    assert(result_option.unwrap().value == result.value);\n}\n\n#[test]\nfn test_arrays() {\n    let text = \"{   \\\"name\\\": \\\"Adeel Solangi\\\", \\\"age\\\": 62, \\\"portfolio\\\": { \\\"vibe_ratings\\\": [1,2],\\\"elemental_lorem\\\": false }}                                                 \";\n    let mut json: JSON<153, 10, 60, 60, 2> = JSON::parse_json_from_string(text);\n\n    assert(json.key_exists(BoundedVec { storage: \"foo\".as_bytes(), len: 3 }) == false);\n    assert(json.key_exists(BoundedVec { storage: \"name\".as_bytes(), len: 4 }));\n    assert(json.key_exists(BoundedVec { storage: \"age\".as_bytes(), len: 3 }));\n    assert(json.key_exists(BoundedVec { storage: \"portfolio\".as_bytes(), len: 9 }));\n}\n\n#[test(should_fail_with = \"build_transcript: MaxNumTokens limit exceeded!\")]\nfn test_json_not_enough_tokens_fails() {\n    let text = \"{ \\\"hello \\\": \\\"world\\\" }\";\n    let _: JSON<26, 10, 2, 20, 2> = JSON::parse_json_from_string(text);\n}\n\n#[test(should_fail_with = \"capture_missing_tokens: MaxNumTokens limit exceeded!\")]\nfn test_json_not_enough_tokens_fails_2() {\n    // we should exceed the limit of 8 tokens here, when capturing the `,` token missed by build_transcript\n    let text = \"{ \\\"hello \\\": false,\\\"world\\\": true }\";\n    let _: JSON<33, 10, 8, 20, 2> = JSON::parse_json_from_string(text);\n}\n\n#[test(should_fail_with = \"create_json_entries: MaxNumValues limit exceeded!\")]\nfn test_json_not_enough_values_fails() {\n    let text = \"{ \\\"hello \\\": false,\\\"world\\\": true }\";\n    let _: JSON<33, 10, 10, 4, 2> = JSON::parse_json_from_string(text);\n}\n\n#[test(should_fail_with = \"ValidationFlags: grammar error\")]\nfn test_json_object_without_key_fails() {\n    let text = \"{ \\\"hello \\\": \\\"world\\\", 100 }\";\n    let _: JSON<26, 10, 20, 20, 2> = JSON::parse_json_from_string(text);\n}\n\n#[test(should_fail_with = \"ValidationFlags: grammar error\")]\nfn test_json_array_with_key_fails() {\n    let text = \"[ \\\"hello \\\": \\\"world\\\" ]\";\n    let _: JSON<26, 10, 20, 20, 2> = JSON::parse_json_from_string(text);\n}\n\n#[test(should_fail_with = \"ValidationFlags: grammar error\")]\nfn test_json_unclosed_object_fails() {\n    let text = \"{ \\\"hello \\\": \\\"world\\\" \";\n    let _: JSON<26, 10, 20, 20, 2> = JSON::parse_json_from_string(text);\n}\n\n#[test(should_fail_with = \"ValidationFlags: grammar error\")]\nfn test_json_object_closed_with_array_fails() {\n    let text = \"{ \\\"hello \\\": \\\"world\\\" ]\";\n    let _: JSON<26, 10, 20, 20, 2> = JSON::parse_json_from_string(text);\n}\n\n#[test(should_fail_with = \"ValidationFlags: grammar error\")]\nfn test_json_object_with_trailing_comma_fails() {\n    let text = \"{ \\\"hello \\\" : \\\"world\\\", }\";\n    let _: JSON<26, 10, 20, 20, 2> = JSON::parse_json_from_string(text);\n}\n\n#[test(should_fail_with = \"ValidationFlags: grammar error\")]\nfn test_json_unclosed_array_fails() {\n    let text = \"[ \\\"hello \\\", \\\"world\\\"\";\n    let _: JSON<19, 10, 20, 20, 2> = JSON::parse_json_from_string(text);\n}\n\n#[test(should_fail_with = \"validate_tokens: unclosed objects or arrays\")]\nfn test_json_unclosed_array_fails_2() {\n    let text = \"[ \\\"hello \\\", \\\"world\\\", [1,2,3,4] \";\n    let _: JSON<31, 10, 20, 20, 2> = JSON::parse_json_from_string(text);\n}\n\n#[test(should_fail_with = \"ValidationFlags: grammar error\")]\nfn test_json_array_with_trailing_comma_fails() {\n    let text = \"[ \\\"hello \\\", \\\"world\\\", ]\";\n    let _: JSON<26, 10, 20, 20, 2> = JSON::parse_json_from_string(text);\n}\n\n#[test(should_fail_with = \"ValidationFlags: grammar error\")]\nfn test_json_array_closed_with_object_fails() {\n    let text = \"[ \\\"hello \\\": \\\"world\\\" }\";\n    let _: JSON<26, 10, 20, 20, 2> = JSON::parse_json_from_string(text);\n}\n\n#[test(should_fail_with = \"ScanData: Invalid token\")]\nfn test_json_key_not_wrapped_in_quotes_fails() {\n    let text = \"{ false: \\\"world\\\" }\";\n    let _: JSON<26, 10, 20, 20, 2> = JSON::parse_json_from_string(text);\n}\n\n#[test(should_fail_with = \"ScanData: Invalid token\")]\nfn test_json_string_not_wrapped_in_quotes_fails() {\n    let text = \"{ \\\"hello \\\": world }\";\n    let _: JSON<26, 10, 20, 20, 2> = JSON::parse_json_from_string(text);\n}\n\n#[test(should_fail_with = \"ScanData: Invalid token\")]\nfn test_json_char_outside_of_string_fails() {\n    let text = \"{ \\\"hello \\\", \\\"world\\\" a}\";\n    let _: JSON<26, 10, 20, 20, 2> = JSON::parse_json_from_string(text);\n}\n\n#[test(should_fail_with = \"ValidationFlags: grammar error\")]\nfn test_json_char_outside_of_string_fails_2() {\n    // n could be the start of the literal \"null\", so this passes the ScanData check but fails ValidationFlags\n    let text = \"{ \\\"hello \\\", \\\"world\\\" n}\";\n    let _: JSON<26, 10, 20, 20, 2> = JSON::parse_json_from_string(text);\n}\n\n#[test(should_fail_with = \"ValidationFlags: grammar error\")]\nfn test_json_array_with_invalid_tokens_fails() {\n    // n could be the start of the literal \"null\", so this passes the ScanData check but fails ValidationFlags\n    let text = \"[,,,]\";\n    let _: JSON<26, 10, 20, 20, 2> = JSON::parse_json_from_string(text);\n}\n\n#[test(should_fail_with = \"Cannot find key/value straddling KEY_DELIMITER_TOKEN\")]\nfn test_json_object_with_invalid_tokens_fails() {\n    // n could be the start of the literal \"null\", so this passes the ScanData check but fails ValidationFlags\n    let text = \"{:::}\";\n    let _: JSON<26, 10, 20, 20, 2> = JSON::parse_json_from_string(text);\n}\n\n#[test]\nfn test_json_empty_object_passes() {\n    // n could be the start of the literal \"null\", so this passes the ScanData check but fails ValidationFlags\n    let text = \"{}\";\n    let _: JSON<26, 10, 20, 20, 2> = JSON::parse_json_from_string(text);\n}\n\n#[test]\nfn test_json_empty_array_passes() {\n    // n could be the start of the literal \"null\", so this passes the ScanData check but fails ValidationFlags\n    let text = \"[]\";\n    let _: JSON<26, 10, 20, 20, 2> = JSON::parse_json_from_string(text);\n}\n\n#[test(should_fail)]\nfn test_finishing_with_string_scan_fails() {\n    let json_string = \"{ } \\\"}\";\n    let _: JSON<26, 10, 20, 20, 2> = JSON::parse_json_from_string(json_string);\n}\n\n#[test(should_fail)]\nfn test_finishing_with_literal_scan_fails() {\n    let json_string = \"{ } fa\";\n    let _: JSON<26, 10, 20, 20, 2> = JSON::parse_json_from_string(json_string);\n}\n\n#[test(should_fail)]\nfn test_finishing_with_numeric_scan_fails() {\n    let json_string = \"{ } 123\";\n    let _: JSON<26, 10, 20, 20, 2> = JSON::parse_json_from_string(json_string);\n}\n\n#[test(should_fail)]\nfn key_is_not_a_key() {\n    let json_string = \"{1\\n:0}\";\n    let _: JSON<26, 10, 20, 20, 2> = JSON::parse_json_from_string(json_string);\n}\n","path":"/home/runner/nargo/github.com/noir-lang/noir_json_parser/v0.4.0/src/json.nr"},"79":{"source":"/**\n * @brief contains data we need to keep track when, in `create_json_entries`, we enter or exist from an object or array\n **/\nstruct JSONContextStackEntry {\n    num_entries: Field,\n    context: Field,\n    current_key_index_and_length: Field,\n    json_index: Field,\n    current_identity: Field,\n}\nimpl JSONContextStackEntry {\n    unconstrained fn __from_field(f: Field) -> Self {\n        let bytes: [u8; 11] = f.to_be_bytes();\n        let context = bytes[0] as Field;\n        let num_entries = bytes[1] as Field * 0x100 + bytes[2] as Field;\n        let current_key_length = bytes[3] as Field * 0x100 + bytes[4] as Field;\n        let current_key_index = bytes[5] as Field * 0x100 + bytes[6] as Field;\n        let json_index = bytes[7] as Field * 0x100 + bytes[8] as Field;\n        let current_identity = bytes[9] as Field * 0x100 + bytes[10] as Field;\n        let current_key_index_and_length = current_key_index + current_key_length * 0x10000;\n        JSONContextStackEntry {\n            num_entries,\n            context,\n            current_key_index_and_length,\n            json_index,\n            current_identity,\n        }\n    }\n\n    /**\n     * @brief we pack multiple values into a Field element in order to reduce the number of array read/write queries we need\n     *        (each query will be 3.5 gates as we read and write from/to unknown locations)\n     * @note method cost = 9.5 gates\n     **/\n    fn from_field(f: Field) -> Self {\n        //@Safety: the set of assertions done below will ensure the result is in the correct domain, and the computed result matches the input f\n        let result = unsafe { JSONContextStackEntry::__from_field(f) };\n\n        result.context.assert_max_bit_size::<8>(); // 1.25\n        result.num_entries.assert_max_bit_size::<16>(); // 1.5\n        result.current_key_index_and_length.assert_max_bit_size::<32>(); // 1.75\n        result.json_index.assert_max_bit_size::<16>(); // 1.5\n        result.current_identity.assert_max_bit_size::<16>(); // 1.5\n        assert(result.to_field() == f); // 2\n        result\n    }\n\n    /**\n     * @brief we pack multiple values into a Field element in order to reduce the number of array read/write queries we need\n     *        (each query will be 3.5 gates as we read and write from/to unknown locations)\n     * @note method cost = 2 gates\n     **/\n    fn to_field(self) -> Field {\n        self.current_identity\n            + self.json_index * 0x10000\n            + self.current_key_index_and_length * 0x100000000\n            + self.num_entries * 0x10000000000000000\n            + self.context * 0x100000000000000000000\n    }\n}\n\n/**\n * @brief describes a single array, object or value within our JSON\n **/\nstruct JSONEntry {\n    entry_type: Field, // is this an OBJECT_TOKEN, ARRAY_TOKEN, STRING_TOKEN, NUMERIC_TOKEN or LITERAL_TOKEN?\n    id: Field, // if this is an object or array, describes the unique identifier assigned to this item\n    parent_index: Field, // if parent is an object or array, describes the unique identifier assigned to our parent\n    array_pointer: Field, // if parent is an array, where in the array are we?\n    child_pointer: Field, // if this is an object or array, points to the location in `json_entries_packed` of this item's first child\n    num_children: Field, // if this is an object or array, how many child elements do we contain?\n    json_pointer: Field, // points to the json that describes the first byte of this entry\n    json_length: Field, // how many bytes in the json describes this item? (only for strings, numbers or literals)\n}\nimpl JSONEntry {\n    fn new() -> Self {\n        JSONEntry {\n            array_pointer: 0,\n            entry_type: 0,\n            child_pointer: 0,\n            num_children: 0,\n            json_pointer: 0,\n            json_length: 0,\n            parent_index: 0,\n            id: 0,\n        }\n    }\n\n    unconstrained fn __extract_parent_index_from_field(f: Field) -> (Field, Field, Field) {\n        let entry = JSONEntry::from_field(f);\n        let low = entry.id;\n        let mid = entry.parent_index;\n        let hi = (f - low - mid * 0x10000) / 0x100000000;\n        (low, mid, hi)\n    }\n\n    fn add_child_pointer_into_field(f: Field, child_pointer: Field) -> Field {\n        f + child_pointer * 0x100000000000000000000\n    }\n    unconstrained fn __extract_entry_type_and_id_from_field(f: Field) -> (Field, Field, Field) {\n        let entry = JSONEntry::from_field(f);\n        let id = entry.id;\n        let entry_type = entry.entry_type;\n        let mid = (f - id - entry_type * 0x100000000000000000000000000000000000000) / 0x10000;\n        (id, mid, entry_type)\n    }\n    unconstrained fn __extract_entry_type_id_and_parent_index_from_field(\n        f: Field,\n    ) -> (Field, Field, Field, Field) {\n        let entry = JSONEntry::from_field(f);\n        let id = entry.id;\n        let entry_type = entry.entry_type;\n        let parent_index = entry.parent_index;\n        let mid = (\n            f - id - parent_index * 0x10000 - entry_type * 0x100000000000000000000000000000000000000\n        )\n            / 0x100000000;\n        (id, parent_index, mid, entry_type)\n    }\n\n    // 11.75 gates\n    fn extract_entry_type_id_and_parent_index_from_field(f: Field) -> (Field, Field, Field) {\n        //@Safety: we check all the outputs are in the correct range and we can construct the input from the outputs of the decomposition\n        let (id, parent_index, mid, entry_type) =\n            unsafe { JSONEntry::__extract_entry_type_id_and_parent_index_from_field(f) };\n        id.assert_max_bit_size::<8>(); // 1.25\n        parent_index.assert_max_bit_size::<16>(); // 1.5\n        entry_type.assert_max_bit_size::<16>(); // 1.5\n        mid.assert_max_bit_size::<136>(); // 5.5\n        assert(\n            id\n                + parent_index * 0x10000\n                + mid * 0x100000000\n                + entry_type * 0x100000000000000000000000000000000000000\n                == f,\n        );\n\n        (id, parent_index, entry_type)\n    }\n    fn extract_entry_type_and_id_from_field(f: Field) -> (Field, Field) {\n        let (id, mid, entry_type) = unsafe { JSONEntry::__extract_entry_type_and_id_from_field(f) };\n        id.assert_max_bit_size::<8>(); // 1.25\n        entry_type.assert_max_bit_size::<16>(); // 1.5\n        mid.assert_max_bit_size::<136>(); // 5.5\n        assert(id + mid * 0x10000 + entry_type * 0x100000000000000000000000000000000000000 == f);\n        (id, entry_type)\n    }\n\n    fn extract_parent_index_from_field(f: Field) -> Field {\n        //@Safety: we check all the outputs are in the correct range and we can construct the input from the outputs of the decomposition\n        let (low, parent_index, hi) = unsafe { JSONEntry::__extract_parent_index_from_field(f) };\n\n        low.assert_max_bit_size::<16>(); // 1.75\n        hi.assert_max_bit_size::<128>(); // 5.5\n        parent_index.assert_max_bit_size::<16>(); // 1.75\n        assert(low + parent_index * 0x10000 + hi * 0x100000000 == f); // 1\n        // 10 gates?\n        parent_index\n    }\n    unconstrained fn __from_field(f: Field) -> Self {\n        let bytes: [u8; 20] = f.to_be_bytes(); // 10.5 gates\n        let entry_type = bytes[0] as Field;\n\n        let json_length = bytes[2] as Field * 0x100 + bytes[3] as Field;\n        let json_pointer = bytes[4] as Field * 0x100 + bytes[5] as Field;\n        let num_children = bytes[6] as Field * 0x100 + bytes[7] as Field;\n        let child_pointer = bytes[8] as Field * 0x100 + bytes[9] as Field;\n        let array_pointer = bytes[10] as Field * 0x100 + bytes[11] as Field;\n        let parent_index = bytes[16] as Field * 0x100 + bytes[17] as Field; // 6 gates\n        let id = bytes[18] as Field * 0x100 + bytes[19] as Field; // 6 gates\n        JSONEntry {\n            array_pointer,\n            child_pointer,\n            num_children,\n            json_pointer,\n            json_length,\n            entry_type,\n            parent_index,\n            id,\n        }\n    }\n\n    fn to_field(self) -> Field {\n        self.id\n            + self.parent_index * 0x10000\n            + self.array_pointer * 0x10000000000000000 // 2 bytes\n            + self.child_pointer * 0x100000000000000000000 // 2 bytes\n            + self.num_children * 0x1000000000000000000000000 // 2 bytes\n            + self.json_pointer * 0x10000000000000000000000000000 // 2 bytes\n            + self.json_length * 0x100000000000000000000000000000000 // 2 bytes\n            + self.entry_type * 0x100000000000000000000000000000000000000 // 1 byte\n        // 4 gates. oof\n    }\n    fn from_field(f: Field) -> Self {\n        //@Safety: we check all the outputs are in the correct range and match the input field value\n        let result = unsafe { JSONEntry::__from_field(f) };\n        result.entry_type.assert_max_bit_size::<8>();\n        result.json_length.assert_max_bit_size::<16>();\n        result.json_pointer.assert_max_bit_size::<16>();\n        result.num_children.assert_max_bit_size::<16>();\n        result.child_pointer.assert_max_bit_size::<16>();\n        result.array_pointer.assert_max_bit_size::<16>();\n        result.parent_index.assert_max_bit_size::<16>();\n        result.id.assert_max_bit_size::<16>();\n        assert(result.to_field() == f);\n        result\n    }\n}\n\nimpl std::convert::From<JSONEntryPacked> for JSONEntry {\n    fn from(JSONEntryPacked { value: f }: JSONEntryPacked) -> Self {\n        //@Safety: we check all the outputs are in the correct range and match the input field value\n        let result = unsafe { JSONEntry::__from_field(f) };\n        result.entry_type.assert_max_bit_size::<8>();\n        result.json_length.assert_max_bit_size::<16>();\n        result.json_pointer.assert_max_bit_size::<16>();\n        result.num_children.assert_max_bit_size::<16>();\n        result.child_pointer.assert_max_bit_size::<16>();\n        result.array_pointer.assert_max_bit_size::<16>();\n        result.parent_index.assert_max_bit_size::<16>();\n        result.id.assert_max_bit_size::<16>();\n        assert(result.to_field() == f);\n        result\n    }\n}\n\nimpl std::cmp::Eq for JSONEntry {\n    // N.B. used for testing\n    fn eq(self, other: Self) -> bool {\n        let array_ptr = (self.array_pointer == other.array_pointer);\n        let entry = self.entry_type == other.entry_type;\n        let child = (self.child_pointer == other.child_pointer);\n        let num_children = (self.num_children == other.num_children);\n        let json_pointer = (self.json_pointer == other.json_pointer);\n        let json_length = (self.json_length == other.json_length);\n        array_ptr | entry | child | num_children | json_pointer | json_length\n    }\n}\n\n/**\n * @brief describes a JSONEntry object's data, but packed into a single field element.\n * @description We do this to minimize the number of array lookups we perform\n **/\nstruct JSONEntryPacked {\n    value: Field,\n}\n\nimpl std::cmp::Eq for JSONEntryPacked {\n    fn eq(self, other: Self) -> bool {\n        self.value == other.value\n    }\n}\n\nimpl std::default::Default for JSONEntryPacked {\n    fn default() -> Self {\n        JSONEntryPacked { value: 0 }\n    }\n}\n","path":"/home/runner/nargo/github.com/noir-lang/noir_json_parser/v0.4.0/src/json_entry.nr"},"81":{"source":"use crate::_string_tools::slice_field::slice_200_bits_from_field;\nuse crate::_string_tools::slice_packed_field::slice_fields;\n\n/**\n * @brief utility struct that computes a 200-bit Poseidon hash of some bytes,\n *        when the bytes are represented as packed 31 byte Field elements\n * @note we wrap `get_keyhash` in a struct so that the KeyFields parameter can be defined ahead of time\n **/\nstruct FieldHasher<let KeyFields: u32> {}\n\nimpl<let KeyFields: u32> FieldHasher<KeyFields> {\n\n    fn get_keyhash<let NumPackedFields: u32>(\n        _: Self,\n        packed_fields: [Field; NumPackedFields],\n        body_index: Field,\n        key_length: Field,\n    ) -> Field {\n        let key_fields: [Field; KeyFields] = slice_fields(packed_fields, body_index, key_length);\n        let hashed = dep::std::hash::poseidon2::Poseidon2::hash(key_fields, KeyFields as u32);\n        slice_200_bits_from_field(hashed)\n    }\n}\n\n/**\n * @brief utility struct that computes a 200-bit Poseidon hash of some bytes,\n *        when the bytes are represented as a substring in a byte array\n * @note we wrap `get_keyhash` in a struct so that the KeyFields parameter can be defined ahead of time\n * @note produces identical hash outputs when compared w. FieldHasher\n **/\nstruct ByteHasher<let KeyFields: u32> {}\n\nimpl<let KeyFields: u32> ByteHasher<KeyFields> {\n\n    fn get_keyhash_var<let N: u32>(\n        _: Self,\n        body_text: [u8; N],\n        body_index: u32,\n        key_length: u32,\n    ) -> Field {\n        assert(key_length < KeyFields * 31, \"key too large\");\n\n        let mut key_fields: [Field; KeyFields] = [0; KeyFields];\n\n        let mut key_idx: u32 = 0;\n        let mut limb = 0;\n\n        for j in 0..KeyFields {\n            limb = 0;\n\n            for _ in 0..31 {\n                let valid = (key_idx < key_length) as Field;\n                limb *= 0x100;\n                let byte_index = (body_index as Field + key_idx as Field) * valid;\n                let byte = body_text[byte_index] as Field;\n                limb += byte * valid;\n                key_idx += 1;\n            }\n            key_fields[j] = limb;\n        }\n\n        let hashed_full = dep::std::hash::poseidon2::Poseidon2::hash(key_fields, KeyFields as u32);\n\n        let mut r = slice_200_bits_from_field(hashed_full);\n        r\n    }\n}\n\n","path":"/home/runner/nargo/github.com/noir-lang/noir_json_parser/v0.4.0/src/keyhash.nr"},"82":{"source":"use crate::_comparison_tools::lt::assert_lte_240_bit;\nuse crate::_comparison_tools::lt::lt_field_16_bit;\nuse crate::_comparison_tools::lt::lte_field_240_bit;\nuse crate::_string_tools::slice_packed_field::slice_fields;\nuse crate::json::JSON;\nuse crate::json_entry::{JSONEntry, JSONEntryPacked};\nuse crate::json_tables::TOKEN_ENDS_OBJECT_OR_ARRAY;\nuse crate::keyhash::FieldHasher;\n\nuse dep::noir_sort;\n\nuse dep::std::hash::poseidon2;\nstruct KeyIndexData {\n    json_index: Field,\n    json_length: Field,\n    parent_id: Field,\n    array_index: Field,\n}\n\nimpl KeyIndexData {\n    fn to_field(self) -> Field {\n        self.parent_id\n            + self.json_index as Field * 0x10000\n            + self.json_length as Field * 0x100000000\n            + self.array_index * 0x1000000000000\n    }\n\n    unconstrained fn __from_field(packed: Field) -> Self {\n        let unpacked: [u8; 8] = packed.to_be_bytes();\n        let array_index: Field = unpacked[1] as Field + unpacked[0] as Field * 0x100;\n        let json_length: Field = unpacked[3] as Field + unpacked[2] as Field * 0x100;\n        let json_index: Field = unpacked[5] as Field + unpacked[4] as Field * 0x100;\n        let parent_id: Field = unpacked[7] as Field + unpacked[6] as Field * 0x100;\n        KeyIndexData { json_index, json_length, parent_id, array_index }\n    }\n\n    fn from_field(packed: Field) -> Self {\n        //@Safety: check the comments below\n        let result = unsafe { KeyIndexData::__from_field(packed) };\n        // checks that array_index is in range\n        result.array_index.assert_max_bit_size::<16>();\n        // checks that json_length is in range\n        result.json_length.assert_max_bit_size::<16>();\n        // checks that json_index is in range\n        result.json_index.assert_max_bit_size::<16>();\n        // checks that parent_id is in range\n        result.parent_id.assert_max_bit_size::<16>();\n        // checks that the input is a valid combination of the outputs of the decomposition\n        assert(result.to_field() == packed);\n        result\n    }\n}\n\nimpl<let NumBytes: u32, let NumPackedFields: u32, let MaxNumTokens: u32, let MaxNumValues: u32, let MaxKeyFields: u32> JSON<NumBytes, NumPackedFields, MaxNumTokens, MaxNumValues, MaxKeyFields> {\n    fn compute_keyhash_and_sort_json_entries(&mut self) {\n        let hasher: FieldHasher<MaxKeyFields> = FieldHasher {};\n\n        let mut hashlist: [Field; MaxNumValues] = [0; MaxNumValues];\n\n        let two_pow_200 = 0x10000000000000000000000000000000000000000000000000000;\n        let two_pow_216 = 0x100000000000000000000000000000000000000000000000000000000;\n        for i in 0..MaxNumValues {\n            let KeyIndexData { json_index, json_length, parent_id, array_index } =\n                KeyIndexData::from_field(self.key_data[i]);\n            let hash = hasher.get_keyhash(self.json_packed, json_index, json_length);\n            hashlist[i] = hash + array_index * two_pow_200 + parent_id * two_pow_216;\n        }\n\n        hashlist[MaxNumValues - 1] = 0; // we always ensure the last (unused hopefully!) entry goes first.\n        self.json_entries_packed[MaxNumValues - 1] = JSONEntryPacked::default();\n        // when updating identity_to_json_map we are relying on the fact that we can update sorted entry 0? maybe? oof document better\n        let sort_result = noir_sort::sort_advanced(hashlist, lte_field_240_bit, assert_lte_240_bit);\n\n        let mut sorted_entries: [JSONEntryPacked; MaxNumValues] =\n            [JSONEntryPacked::default(); MaxNumValues];\n        for i in 0..MaxNumValues {\n            sorted_entries[sort_result.sort_indices[i]] = self.json_entries_packed[i];\n        }\n\n        let mut ids: [Field; MaxNumValues] = [0; MaxNumValues];\n        let mut parent_indices: [Field; MaxNumValues] = [0; MaxNumValues];\n        let mut entry_types: [Field; MaxNumValues] = [0; MaxNumValues];\n\n        for i in 0..MaxNumValues {\n            // 11.75 + 3.5 = 15.25 gates per iteration\n            let (id, parent_index, entry_type) = JSONEntry::extract_entry_type_id_and_parent_index_from_field(\n                sorted_entries[i].value,\n            );\n            ids[i] = id;\n            parent_indices[i] = parent_index;\n            entry_types[i] = entry_type;\n        }\n\n        let mut identity_to_json_map: [Field; MaxNumValues] = [0; MaxNumValues];\n        // 6.5 gates per iteration\n        for i in 0..MaxNumValues {\n            let id = ids[i];\n            let entry_type = entry_types[i];\n            // 2 gates\n            let update = TOKEN_ENDS_OBJECT_OR_ARRAY[entry_type];\n            // NOTE THIS RELIES ON MaxNumValues ACTUALLY DESCRIBING NUMMaxNumValues + 1\n            // 1 gate\n            let index = (id - (MaxNumValues as Field - 1)) * update + (MaxNumValues as Field - 1);\n            // 3.5 gates\n            identity_to_json_map[index] = i as Field;\n        }\n\n        // 13.5 gates per iteration\n        let mut parent_identity_pre = parent_indices[0];\n        for i in 1..MaxNumValues {\n            let parent_identity_post = parent_indices[i];\n            // if the parent identity changes,\n            // 3.5 gate\n            // the list is sorted according to parent_ideneity,\n            // n.b. parent_identity_post - parent_identity_pre is not neccessarily 0 or 1 (can be larger)\n            //      due to empty objects and arrays increasing identity value without creating associated child json entries\n            let new_parent = lt_field_16_bit(parent_identity_pre, parent_identity_post) as Field;\n            // let new_parent = (parent_identity_post as u32 > parent_identity_pre as u32) as Field;\n            // 3.5 gates\n            let index_of_parent = identity_to_json_map[parent_identity_post];\n            // 1 gate + 3.5 gates\n            let updated = JSONEntry::add_child_pointer_into_field(\n                sorted_entries[index_of_parent].value,\n                i as Field,\n            );\n\n            // RELIES ON THE SMALLEST ENTRY IN THE SORTED LIST BEING EMPTY\n            // 1 gate\n            let index = (index_of_parent * new_parent);\n            // 3.5 gates\n            sorted_entries[index] = JSONEntryPacked { value: updated };\n\n            parent_identity_pre = parent_identity_post;\n        }\n        sorted_entries[0] = JSONEntryPacked::default(); // TODO document why we want to always make 0 a dead entry\n        self.unsorted_json_entries_packed = self.json_entries_packed;\n        self.json_entries_packed = sorted_entries;\n        self.key_hashes = sort_result.sorted;\n        self.set_root_entry();\n    }\n\n    unconstrained fn __find_root_entry(self) -> Field {\n        let mut found_index = 0;\n        for i in 0..MaxNumValues {\n            let entry: JSONEntry = self.json_entries_packed[i].into();\n            if (entry.parent_index == 0) & (self.json_entries_packed[i].value != 0) {\n                found_index = i as Field;\n                break;\n            }\n        }\n        found_index\n    }\n\n    fn set_root_entry(&mut self) {\n        //@Safety: check the comments below\n        let root_index = unsafe { self.__find_root_entry() };\n\n        let packed_entry = self.json_entries_packed[root_index];\n        let entry: JSONEntry = packed_entry.into();\n\n        // checks that the entry is not empty\n        assert(packed_entry.value != 0);\n        // checks that the parent index is 0\n        assert(entry.parent_index == 0);\n        self.root_index_in_transcript = root_index;\n    }\n}\n\n// 68002\n","path":"/home/runner/nargo/github.com/noir-lang/noir_json_parser/v0.4.0/src/keymap.nr"},"84":{"source":"struct TokenFlags {\n    create_json_entry: Field,\n    is_end_of_object_or_array: Field,\n    is_start_of_object_or_array: Field,\n    new_context: Field,\n    is_key_token: Field,\n    is_value_token: Field,\n    preserve_num_entries: Field,\n}\n\nimpl TokenFlags {\n\n    unconstrained fn __from_field(f: Field) -> Self {\n        let bytes: [u8; 7] = f.to_be_bytes();\n        let create_json_entry = bytes[0] as Field;\n        let is_end_of_object_or_array = bytes[1] as Field;\n        let is_start_of_object_or_array = bytes[2] as Field;\n        let new_context = bytes[3] as Field;\n        let is_key_token = bytes[4] as Field;\n        let is_value_token = bytes[5] as Field;\n        let preserve_num_entries = bytes[6] as Field;\n\n        TokenFlags {\n            create_json_entry,\n            is_end_of_object_or_array,\n            is_start_of_object_or_array,\n            new_context,\n            is_key_token,\n            is_value_token,\n            preserve_num_entries,\n        }\n    }\n\n    fn from_field(f: Field) -> Self {\n        // 10 gates\n        //@Safety: check the comments below\n        let r = unsafe { TokenFlags::__from_field(f) };\n\n        // checks that the flags are binary\n        assert(r.create_json_entry * r.create_json_entry == r.create_json_entry);\n        assert(\n            r.is_end_of_object_or_array * r.is_end_of_object_or_array\n                == r.is_end_of_object_or_array,\n        );\n        assert(\n            r.is_start_of_object_or_array * r.is_start_of_object_or_array\n                == r.is_start_of_object_or_array,\n        );\n        assert(r.new_context * r.new_context == r.new_context);\n        assert(r.is_key_token * r.is_key_token == r.is_key_token);\n        assert(r.is_value_token * r.is_value_token == r.is_value_token);\n        assert(r.preserve_num_entries * r.preserve_num_entries == r.preserve_num_entries);\n\n        // asserts the relation of r and f\n        assert(r.to_field() == f);\n        r\n    }\n\n    // 4 gates\n    fn to_field(self) -> Field {\n        self.preserve_num_entries\n            + self.is_value_token * 0x100\n            + self.is_key_token * 0x10000\n            + self.new_context * 0x1000000\n            + self.is_start_of_object_or_array * 0x100000000\n            + self.is_end_of_object_or_array * 0x10000000000\n            + self.create_json_entry * 0x1000000000000\n    }\n\n    fn default() -> Self {\n        TokenFlags {\n            create_json_entry: 0,\n            is_end_of_object_or_array: 0,\n            is_start_of_object_or_array: 0,\n            new_context: 0,\n            is_key_token: 0,\n            preserve_num_entries: 0,\n            is_value_token: 0,\n        }\n    }\n}\n","path":"/home/runner/nargo/github.com/noir-lang/noir_json_parser/v0.4.0/src/token_flags.nr"},"85":{"source":"use crate::json_tables::ASCII_TO_TOKEN_TABLE;\n\nstruct ValidationFlags {\n    push_layer: Field,\n    push_layer_type_of_root: Field,\n    pop_layer: Field,\n}\n\nimpl ValidationFlags {\n    fn to_field(self) -> Field {\n        self.push_layer + self.push_layer_type_of_root * 0x100 + self.pop_layer * 0x10000\n    }\n\n    unconstrained fn __from_field(f: Field) -> Self {\n        let bytes: [u8; 4] = f.to_be_bytes();\n        let mut push_layer = bytes[3] as Field;\n        let push_layer_type_of_root = bytes[2] as Field;\n        let pop_layer = bytes[1] as Field;\n        let error = bytes[0] as Field;\n\n        assert(error == 0, \"ValidationFlags: grammar error\");\n        // we are doing something very degenerate here.\n        // in `validate_tokens` update a `depth` parameter via `depth = depth + push_layer - pop_layer`\n        // we index a size-32 array `parent_layer_stack` using the `depth_parameter` immediately after updating `depth`\n        // i.e. we implicitly validate `push_layer < 32`\n        // If the Prover incorrectly generates the `push_layer` witness via encoding any other flag data within it,\n        // an out of bounds error will be triggered\n        // n.b. reason for doing this is that by only having 3 flags stored in our lookup table,\n        // we can extract them all with 1 add gate. combined with 2 bool checks = 3 gates instead of 5/6 gates if we had 4 flags\n        push_layer = push_layer + error * 0x1000000;\n        ValidationFlags { push_layer, push_layer_type_of_root, pop_layer }\n    }\n\n    // 3 gates\n    fn from_field(f: Field) -> Self {\n        //@Safety: check the comments below\n        let r = unsafe { ValidationFlags::__from_field(f) };\n        // checks pop_layer is a valid boolean\n        assert(r.pop_layer * r.pop_layer == r.pop_layer);\n        // checks push_layer_type_of_root is a valid boolean\n        assert(r.push_layer_type_of_root * r.push_layer_type_of_root == r.push_layer_type_of_root);\n        // checks the input field is a valid combination of the outputs of the decomposition\n        assert(r.pop_layer * 0x10000 + r.push_layer_type_of_root * 0x100 + r.push_layer == f);\n        r\n    }\n}\n\nstruct RawTranscriptEntry {\n    encoded_ascii: Field,\n    index: Field,\n    length: Field,\n}\n\nimpl RawTranscriptEntry {\n    fn new() -> Self {\n        RawTranscriptEntry { encoded_ascii: 0, index: 0, length: 0 }\n    }\n    fn to_field(self) -> Field {\n        self.encoded_ascii + self.index * 0x10000 + self.length * (0x100000000)\n    }\n\n    unconstrained fn __from_field(felt: Field) -> Self {\n        let slices: [u8; 6] = felt.to_be_bytes(); // 2 gates + 1.25 + 2 = 5.25\n        let length = slices[1] as Field + slices[0] as Field * 0x100;\n        let index = slices[3] as Field + slices[2] as Field * 0x100;\n        let encoded_ascii = slices[5] as Field + slices[4] as Field * 0x100;\n        Self { encoded_ascii, index, length }\n    }\n    // 2 gates to add bytes into sum\n    // 1.25 gates for range checks\n    // 2 gates to get u16s\n    // 5.25 gates total\n    fn from_field(felt: Field) -> Self {\n        //@Safety: check the comments below\n        let result = unsafe { RawTranscriptEntry::__from_field(felt) };\n        result.length.assert_max_bit_size::<16>();\n        result.index.assert_max_bit_size::<16>();\n        result.encoded_ascii.assert_max_bit_size::<14>();\n\n        assert(result.encoded_ascii + result.index * 0x10000 + result.length * 0x100000000 == felt);\n        result\n    }\n\n    unconstrained fn __extract_ascii(f: Field) -> (Field, Field) {\n        let r = RawTranscriptEntry::__from_field(f);\n        let ascii = r.encoded_ascii;\n        let remainder = r.index + r.length * 0x10000;\n        (ascii, remainder)\n    }\n    fn extract_ascii(f: Field) -> (Field, Field) {\n        //@Safety: ascci length is checked. remainder size is checked. the relation to the input is asserted as well.\n        let (ascii, remainder) = unsafe { RawTranscriptEntry::__extract_ascii(f) };\n        ascii.assert_max_bit_size::<14>();\n        remainder.assert_max_bit_size::<32>();\n        assert(ascii + remainder * 0x10000 == f);\n        (ascii, remainder)\n    }\n}\n\nstruct TranscriptEntry {\n    token: Field,\n    index: Field,\n    length: Field,\n}\n\nstruct ScanData {\n    scan_token: Field,\n    push_transcript: Field,\n    increase_length: Field,\n    is_potential_escape_sequence: Field,\n}\n\nimpl ScanData {\n    unconstrained fn __from_field(f: Field) -> Self {\n        let bytes: [u8; 6] = f.to_le_bytes();\n\n        let mut scan_token = bytes[0] as Field;\n        let push_transcript = bytes[1] as Field;\n        let increase_length = bytes[2] as Field;\n        let is_potential_escape_sequence = bytes[3] as Field;\n        let error = bytes[4] as Field * 0x100 + bytes[5] as Field;\n        assert(error == 0, \"ScanData: Invalid token\");\n        // TODO document this\n        scan_token = scan_token + error * 0x100000000;\n        ScanData { scan_token, push_transcript, increase_length, is_potential_escape_sequence }\n    }\n    fn from_field(f: Field) -> Self {\n        //@Safety: check the comments below\n        let result = unsafe { ScanData::__from_field(f) };\n        // checks increase_length is a valid boolean\n        assert(result.increase_length * result.increase_length == result.increase_length);\n        // checks push_transcript is a valid boolean\n        assert(result.push_transcript * result.push_transcript == result.push_transcript);\n        // checks is_potential_escape_sequence is a valid boolean\n        assert(\n            result.is_potential_escape_sequence * result.is_potential_escape_sequence\n                == result.is_potential_escape_sequence,\n        );\n        // checks the input field is a valid combination of the outputs of the decomposition\n        assert(\n            result.scan_token\n                + result.push_transcript * 0x100\n                + result.increase_length * 0x10000\n                + result.is_potential_escape_sequence * 0x1000000\n                == f,\n        );\n        result\n    }\n}\n\nstruct PostProcessScanData {\n    token: Field,\n    new_grammar: Field,\n    scan_token: Field,\n}\nimpl PostProcessScanData {\n    fn from_field(f: Field) -> Self {\n        let bytes: [u8; 3] = f.to_be_bytes();\n        let token = bytes[2] as Field;\n        let new_grammar = bytes[1] as Field;\n        let scan_token = bytes[0] as Field;\n        PostProcessScanData { token, new_grammar, scan_token }\n    }\n}\nimpl TranscriptEntry {\n    fn new() -> Self {\n        TranscriptEntry { token: 0, index: 0, length: 0 }\n    }\n    fn to_field(self) -> Field {\n        self.token + self.index * 0x100 + self.length * (0x1000000)\n    }\n    unconstrained fn __from_field(felt: Field) -> Self {\n        let slices: [u8; 5] = felt.to_be_bytes(); // 2 gates + 1.25 + 2 = 5.25\n        let length = slices[1] as Field + slices[0] as Field * 256;\n        let index = slices[3] as Field + slices[2] as Field * 256;\n        let token = slices[4] as Field;\n        Self { token, index, length }\n    }\n    unconstrained fn __get_token(f: Field) -> (Field, Field) {\n        let r = TranscriptEntry::__from_field(f);\n        (r.token, (r.index + r.length * 0x10000))\n    }\n    // 4 gates\n    fn get_token(f: Field) -> Field {\n        //@Safety: check the comments below\n        let (token, remainder) = unsafe { TranscriptEntry::__get_token(f) };\n        // checks that remainder is in range\n        remainder.assert_max_bit_size::<32>();\n        // checks that token is in range\n        token.assert_max_bit_size::<8>();\n        // checks that the input is a valid combination of the outputs of the decomposition\n        assert(token + remainder * 0x100 == f);\n        token\n    }\n    // 5.25 gates\n    fn from_field(felt: Field) -> Self {\n        //@Safety: check the comments below\n        let result = unsafe { TranscriptEntry::__from_field(felt) };\n        // checks that length is in range\n        result.length.assert_max_bit_size::<16>();\n        // checks that index is in range\n        result.index.assert_max_bit_size::<16>();\n        // checks that token is in range\n        result.token.assert_max_bit_size::<8>();\n        // checks that the input is a valid combination of the outputs of the decomposition\n        assert(result.token + result.index * 0x100 + result.length * 0x1000000 == felt);\n        result\n    }\n\n    fn get_token_and_index_length_combined(f: Field) -> (Field, Field) {\n        //@Safety: check the comments below\n        let (token, remainder) = unsafe { TranscriptEntry::__get_token(f) };\n        // checks that remainder is in range\n        remainder.assert_max_bit_size::<32>();\n        // checks that token is in range\n        token.assert_max_bit_size::<8>();\n        // checks that the input is a valid combination of the outputs of the decomposition\n        assert(token + remainder * 0x100 == f);\n        (token, remainder)\n    }\n\n    // 5.75 gates\n    fn from_raw(raw_encoded: Field) -> Field {\n        //@Safety: check the comments below\n        let (ascii, remainder) = unsafe { RawTranscriptEntry::__extract_ascii(raw_encoded) };\n        // checks that remainder is in range\n        remainder.assert_max_bit_size::<32>();\n        // checks that the input is a valid combination of the outputs of the decomposition\n        assert(ascii + remainder * 0x10000 == raw_encoded);\n        // this lookup enforces an implicit 10 bit range check on ascii\n        let token = ASCII_TO_TOKEN_TABLE[ascii];\n        token + remainder * 0x100\n    }\n}\n","path":"/home/runner/nargo/github.com/noir-lang/noir_json_parser/v0.4.0/src/transcript_entry.nr"},"86":{"source":"pub mod quicksort;\nuse crate::quicksort::quicksort::quicksort as quicksort;\nuse crate::quicksort::quicksort_explicit::quicksort as quicksort_explicit;\nuse dep::check_shuffle::{check_shuffle, get_shuffle_indices};\n\n/**\n * Given an input array of type T, return a sorted array.\n * Type `T` must satisfy the Ord and Eq trait\n * The Eq function is used within an unconstrained function so its constraint-efficiently is not relevant\n * Note: sort_extended is likely more efficient as constraining `x < y` can typically be described\n *       more efficiently than returning a boolean that describes whether `x < y`\n **/\npub fn sort<T, let N: u32>(input: [T; N]) -> [T; N]\nwhere\n    T: std::cmp::Ord + std::cmp::Eq,\n{\n    let sorted = unsafe { quicksort(input) };\n\n    for i in 0..N - 1 {\n        assert(sorted[i] <= sorted[i + 1]);\n    }\n    check_shuffle(input, sorted);\n    sorted\n}\n\n/**\n * Given an input array of type T, return a sorted array.\n * Type `T` must satisfy the Eq trait\n * The Eq function is used within an unconstrained function so its constraint-efficiently is not relevant\n *\n * The `sortfn` parameter is a function that descibes whether, given two elements `a, b` of type T, `a <= b`\n * Note: sort_extended is likely more efficient as constraining `x < y` can typically be described\n *       more efficiently than returning a boolean that describes whether `x < y`\n **/\npub fn sort_via<T, let N: u32>(input: [T; N], sortfn: fn(T, T) -> bool) -> [T; N]\nwhere\n    T: std::cmp::Eq,\n{\n    let sorted = unsafe { quicksort_explicit(input, sortfn) };\n\n    for i in 0..N - 1 {\n        assert(sortfn(sorted[i], sorted[i + 1]));\n    }\n    check_shuffle(input, sorted);\n    sorted\n}\n\n/**\n * Given an input array of type T, return a sorted array.\n * Type `T` must satisfy the Eq trait\n * The Eq function is used within an unconstrained function so its constraint-efficiently is not relevant\n *\n * The `sortfn` parameter is a function that descibes whether, given two elements `a, b` of type T, `a <= b`\n * The `sortfn_assert` parameter is a function that *asserts* that `a <= b`\n *\n * `sortfn` is used in unconstrained functions only\n * `sortfn_assert` is used in constrained functions\n\n * Note: This is likely the most efficient sort function as constraining `x < y` can typically be described\n *       more efficiently than returning a boolean that describes whether `x < y`\n **/\npub fn sort_extended<T, let N: u32>(\n    input: [T; N],\n    sortfn: fn(T, T) -> bool,\n    sortfn_assert: fn(T, T) -> (),\n) -> [T; N]\nwhere\n    T: std::cmp::Eq,\n{\n    let sorted = unsafe { quicksort_explicit(input, sortfn) };\n\n    for i in 0..N - 1 {\n        sortfn_assert(sorted[i], sorted[i + 1]);\n    }\n    check_shuffle(input, sorted);\n    sorted\n}\n\npub struct SortResult<T, let N: u32> {\n    pub sorted: [T; N],\n    pub sort_indices: [Field; N],\n}\npub fn sort_advanced<T, let N: u32>(\n    input: [T; N],\n    sortfn: fn(T, T) -> bool,\n    sortfn_assert: fn(T, T) -> (),\n) -> SortResult<T, N>\nwhere\n    T: std::cmp::Eq,\n{\n    let sorted = unsafe { quicksort_explicit(input, sortfn) };\n\n    let sort_indices = get_shuffle_indices(input, sorted);\n\n    for i in 0..N - 1 {\n        sortfn_assert(sorted[i], sorted[i + 1]);\n    }\n    SortResult { sorted, sort_indices }\n}\n\nmod test {\n    use crate::sort;\n    use crate::sort_extended;\n    use crate::sort_via;\n\n    fn sort_u32(a: u32, b: u32) -> bool {\n        a <= b\n    }\n\n    // unconditional_lt will cost fewer constraints than the `<=` operator\n    // as we do not need to constrain the case where `a > b`, and assign a boolean variable to the result\n    fn unconditional_lt(_a: u32, _b: u32) {\n        let a = _a as Field;\n        let b = _b as Field;\n\n        let diff = b - a;\n        diff.assert_max_bit_size::<32>();\n    }\n\n    #[test]\n    fn test_sort() {\n        let mut arr: [u32; 7] = [3, 6, 8, 10, 1, 2, 1];\n\n        let sorted = sort(arr);\n\n        let expected: [u32; 7] = [1, 1, 2, 3, 6, 8, 10];\n        assert(sorted == expected);\n    }\n\n    #[test]\n    fn test_sort_via() {\n        let mut arr: [u32; 7] = [3, 6, 8, 10, 1, 2, 1];\n\n        let sorted = sort_via(arr, sort_u32);\n\n        let expected: [u32; 7] = [1, 1, 2, 3, 6, 8, 10];\n        assert(sorted == expected);\n    }\n\n    #[test]\n    fn test_sort_extended() {\n        let mut arr: [u32; 7] = [3, 6, 8, 10, 1, 2, 1];\n\n        let sorted = sort_extended(arr, sort_u32, unconditional_lt);\n\n        let expected: [u32; 7] = [1, 1, 2, 3, 6, 8, 10];\n        assert(sorted == expected);\n    }\n}\n\n","path":"/home/runner/nargo/github.com/noir-lang/noir_sort/v0.2.2/src/lib.nr"},"88":{"source":"pub trait Swap {\n    fn swap(&mut self, i: u32, j: u32);\n}\n\nimpl<T, let N: u32> Swap for [T; N] {\n    fn swap(&mut self, i: u32, j: u32) {\n        let temp = self[i];\n        self[i] = self[j];\n        self[j] = temp;\n    }\n}\n\nunconstrained fn partition<T, let N: u32>(\n    arr: &mut [T; N],\n    low: u32,\n    high: u32,\n    sortfn: fn(T, T) -> bool,\n) -> u32 {\n    let pivot = high;\n    let mut i = low;\n    for j in low..high {\n        if (sortfn(arr[j], arr[pivot])) {\n            arr.swap(i, j);\n            i += 1;\n        }\n    }\n    arr.swap(i, pivot);\n    i\n}\n\nunconstrained fn quicksort_recursive<T, let N: u32>(\n    arr: &mut [T; N],\n    low: u32,\n    high: u32,\n    sortfn: fn(T, T) -> bool,\n) {\n    if low < high {\n        let pivot_index = partition(arr, low, high, sortfn);\n        if pivot_index > 0 {\n            quicksort_recursive(arr, low, pivot_index - 1, sortfn);\n        }\n        quicksort_recursive(arr, pivot_index + 1, high, sortfn);\n    }\n}\n\npub unconstrained fn quicksort<T, let N: u32>(_arr: [T; N], sortfn: fn(T, T) -> bool) -> [T; N] {\n    let mut arr: [T; N] = _arr;\n    if arr.len() <= 1 {} else {\n        quicksort_recursive(&mut arr, 0, arr.len() - 1, sortfn);\n    }\n    arr\n}\n\n","path":"/home/runner/nargo/github.com/noir-lang/noir_sort/v0.2.2/src/quicksort/quicksort_explicit.nr"},"90":{"source":"unconstrained fn __get_shuffle_indices<T, let N: u32>(lhs: [T; N], rhs: [T; N]) -> [Field; N]\nwhere\n    T: std::cmp::Eq,\n{\n    let mut shuffle_indices: [Field; N] = [0; N];\n\n    let mut shuffle_mask: [bool; N] = [false; N];\n    for i in 0..N {\n        let mut found = false;\n        for j in 0..N {\n            if ((shuffle_mask[j] == false) & (!found)) {\n                if (lhs[i] == rhs[j]) {\n                    found = true;\n                    shuffle_indices[i] = j as Field;\n                    shuffle_mask[j] = true;\n                }\n            }\n            if (found) {\n                continue;\n            }\n        }\n        assert(found == true, \"check_shuffle, lhs and rhs arrays do not contain equivalent values\");\n    }\n\n    shuffle_indices\n}\n\nunconstrained fn __get_index<let N: u32>(indices: [Field; N], idx: Field) -> Field {\n    let mut result = 0;\n    for i in 0..N {\n        if (indices[i] == idx) {\n            result = i as Field;\n            break;\n        }\n    }\n    result\n}\n\npub fn check_shuffle<T, let N: u32>(lhs: [T; N], rhs: [T; N])\nwhere\n    T: std::cmp::Eq,\n{\n    //@Safety: check the comments below\n    let shuffle_indices = unsafe { __get_shuffle_indices(lhs, rhs) };\n\n    for i in 0..N {\n        let idx = unsafe { __get_index(shuffle_indices, i as Field) };\n        // checks the relation between shuffle_indices and output of __get_index\n        assert_eq(shuffle_indices[idx], i as Field);\n    }\n    for i in 0..N {\n        let idx = shuffle_indices[i];\n        let expected = rhs[idx];\n        let result = lhs[i];\n        // checks the relation between shuffle_indices and the lhs, rhs inputs\n        assert_eq(expected, result);\n    }\n}\n\npub fn get_shuffle_indices<T, let N: u32>(lhs: [T; N], rhs: [T; N]) -> [Field; N]\nwhere\n    T: std::cmp::Eq,\n{\n    //@Safety: as explained in check_shuffle function\n    let shuffle_indices = unsafe { __get_shuffle_indices(lhs, rhs) };\n    for i in 0..N {\n        let idx = unsafe { __get_index(shuffle_indices, i as Field) };\n        assert_eq(shuffle_indices[idx], i as Field);\n    }\n    for i in 0..N {\n        let idx = shuffle_indices[i];\n        let expected = rhs[idx];\n        let result = lhs[i];\n        assert_eq(expected, result);\n    }\n    shuffle_indices\n}\n\nmod test {\n    struct CompoundStruct {\n        a: bool,\n        b: Field,\n        c: u64,\n    }\n    impl std::cmp::Eq for CompoundStruct {\n        fn eq(self, other: Self) -> bool {\n            (self.a == other.a) & (self.b == other.b) & (self.c == other.c)\n        }\n    }\n\n    use crate::check_shuffle;\n    #[test]\n    fn test_shuffle() {\n        let lhs: [Field; 5] = [0, 1, 2, 3, 4];\n        let rhs: [Field; 5] = [2, 0, 3, 1, 4];\n        check_shuffle(lhs, rhs);\n    }\n\n    #[test]\n    fn test_shuffle_identity() {\n        let lhs: [Field; 5] = [0, 1, 2, 3, 4];\n        let rhs: [Field; 5] = [0, 1, 2, 3, 4];\n        check_shuffle(lhs, rhs);\n    }\n\n    #[test(should_fail_with = \"check_shuffle, lhs and rhs arrays do not contain equivalent values\")]\n    fn test_shuffle_fail() {\n        let lhs: [Field; 5] = [0, 1, 2, 3, 4];\n        let rhs: [Field; 5] = [0, 1, 2, 3, 5];\n        check_shuffle(lhs, rhs);\n    }\n\n    #[test(should_fail_with = \"check_shuffle, lhs and rhs arrays do not contain equivalent values\")]\n    fn test_shuffle_duplicates() {\n        let lhs: [Field; 5] = [0, 1, 2, 3, 4];\n        let rhs: [Field; 5] = [0, 1, 2, 3, 3];\n        check_shuffle(lhs, rhs);\n    }\n\n    #[test]\n    fn test_shuffle_compound_struct() {\n        let lhs: [CompoundStruct; 5] = [\n            CompoundStruct { a: false, b: 0, c: 12345 },\n            CompoundStruct { a: false, b: -100, c: 54321 },\n            CompoundStruct { a: true, b: 5, c: 0xffffffffffffffff },\n            CompoundStruct { a: true, b: 9814, c: 0xeeffee0011001133 },\n            CompoundStruct { a: false, b: 0x155, c: 0 },\n        ];\n        let rhs: [CompoundStruct; 5] = [\n            CompoundStruct { a: false, b: 0x155, c: 0 },\n            CompoundStruct { a: false, b: 0, c: 12345 },\n            CompoundStruct { a: false, b: -100, c: 54321 },\n            CompoundStruct { a: true, b: 9814, c: 0xeeffee0011001133 },\n            CompoundStruct { a: true, b: 5, c: 0xffffffffffffffff },\n        ];\n        check_shuffle(lhs, rhs);\n    }\n}\n\n#[export]\nfn bench_test() {\n    let lhs: [Field; 5] = [0, 1, 2, 3, 4];\n    let rhs: [Field; 5] = [2, 0, 3, 1, 4];\n    check_shuffle(lhs, rhs);\n}\n","path":"/home/runner/nargo/github.com/noir-lang/noir_check_shuffle/v0.2.0/src/lib.nr"}},"names":["main"],"brillig_names":["__build_transcript","__from_field","__capture_missing_tokens","__get_validity_flags","__from_field","__from_field","__from_field","__check_entry_ptr_bounds","__from_field","__from_field","__from_field","__divmod","__slice_field","decompose","__slice_200_bits_from_field","quicksort","__get_shuffle_indices","__get_index","__extract_entry_type_id_and_parent_index_from_field","get_lt_predicate_f","__find_root_entry","__from_field","find_key_in_map","to_u8","directive_integer_quotient","directive_invert","directive_to_radix"]}